
A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800581c  0800581c  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005824  08005824  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00006824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800582c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000408  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011837  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cab  00000000  00000000  00018873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf5  00000000  00000000  0001c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c6f  00000000  00000000  0001d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d8c  00000000  00000000  00040d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da706  00000000  00000000  00054a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f196  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ffc  00000000  00000000  0012f1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000037  00000000  00000000  001331d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080057e4 	.word	0x080057e4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080057e4 	.word	0x080057e4

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2f>:
 80007b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007c0:	bf24      	itt	cs
 80007c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ca:	d90d      	bls.n	80007e8 <__aeabi_d2f+0x30>
 80007cc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e0:	bf08      	it	eq
 80007e2:	f020 0001 	biceq.w	r0, r0, #1
 80007e6:	4770      	bx	lr
 80007e8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007ec:	d121      	bne.n	8000832 <__aeabi_d2f+0x7a>
 80007ee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007f2:	bfbc      	itt	lt
 80007f4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007f8:	4770      	bxlt	lr
 80007fa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000802:	f1c2 0218 	rsb	r2, r2, #24
 8000806:	f1c2 0c20 	rsb	ip, r2, #32
 800080a:	fa10 f30c 	lsls.w	r3, r0, ip
 800080e:	fa20 f002 	lsr.w	r0, r0, r2
 8000812:	bf18      	it	ne
 8000814:	f040 0001 	orrne.w	r0, r0, #1
 8000818:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000820:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000824:	ea40 000c 	orr.w	r0, r0, ip
 8000828:	fa23 f302 	lsr.w	r3, r3, r2
 800082c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000830:	e7cc      	b.n	80007cc <__aeabi_d2f+0x14>
 8000832:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000836:	d107      	bne.n	8000848 <__aeabi_d2f+0x90>
 8000838:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800083c:	bf1e      	ittt	ne
 800083e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bxne	lr
 8000848:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800084c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000850:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <__aeabi_uldivmod>:
 8000858:	b953      	cbnz	r3, 8000870 <__aeabi_uldivmod+0x18>
 800085a:	b94a      	cbnz	r2, 8000870 <__aeabi_uldivmod+0x18>
 800085c:	2900      	cmp	r1, #0
 800085e:	bf08      	it	eq
 8000860:	2800      	cmpeq	r0, #0
 8000862:	bf1c      	itt	ne
 8000864:	f04f 31ff 	movne.w	r1, #4294967295
 8000868:	f04f 30ff 	movne.w	r0, #4294967295
 800086c:	f000 b96a 	b.w	8000b44 <__aeabi_idiv0>
 8000870:	f1ad 0c08 	sub.w	ip, sp, #8
 8000874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000878:	f000 f806 	bl	8000888 <__udivmoddi4>
 800087c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000884:	b004      	add	sp, #16
 8000886:	4770      	bx	lr

08000888 <__udivmoddi4>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	9d08      	ldr	r5, [sp, #32]
 800088e:	460c      	mov	r4, r1
 8000890:	2b00      	cmp	r3, #0
 8000892:	d14e      	bne.n	8000932 <__udivmoddi4+0xaa>
 8000894:	4694      	mov	ip, r2
 8000896:	458c      	cmp	ip, r1
 8000898:	4686      	mov	lr, r0
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	d962      	bls.n	8000966 <__udivmoddi4+0xde>
 80008a0:	b14a      	cbz	r2, 80008b6 <__udivmoddi4+0x2e>
 80008a2:	f1c2 0320 	rsb	r3, r2, #32
 80008a6:	4091      	lsls	r1, r2
 80008a8:	fa20 f303 	lsr.w	r3, r0, r3
 80008ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b0:	4319      	orrs	r1, r3
 80008b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ba:	fa1f f68c 	uxth.w	r6, ip
 80008be:	fbb1 f4f7 	udiv	r4, r1, r7
 80008c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c6:	fb07 1114 	mls	r1, r7, r4, r1
 80008ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ce:	fb04 f106 	mul.w	r1, r4, r6
 80008d2:	4299      	cmp	r1, r3
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x64>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f104 30ff 	add.w	r0, r4, #4294967295
 80008de:	f080 8112 	bcs.w	8000b06 <__udivmoddi4+0x27e>
 80008e2:	4299      	cmp	r1, r3
 80008e4:	f240 810f 	bls.w	8000b06 <__udivmoddi4+0x27e>
 80008e8:	3c02      	subs	r4, #2
 80008ea:	4463      	add	r3, ip
 80008ec:	1a59      	subs	r1, r3, r1
 80008ee:	fa1f f38e 	uxth.w	r3, lr
 80008f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008f6:	fb07 1110 	mls	r1, r7, r0, r1
 80008fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fe:	fb00 f606 	mul.w	r6, r0, r6
 8000902:	429e      	cmp	r6, r3
 8000904:	d90a      	bls.n	800091c <__udivmoddi4+0x94>
 8000906:	eb1c 0303 	adds.w	r3, ip, r3
 800090a:	f100 31ff 	add.w	r1, r0, #4294967295
 800090e:	f080 80fc 	bcs.w	8000b0a <__udivmoddi4+0x282>
 8000912:	429e      	cmp	r6, r3
 8000914:	f240 80f9 	bls.w	8000b0a <__udivmoddi4+0x282>
 8000918:	4463      	add	r3, ip
 800091a:	3802      	subs	r0, #2
 800091c:	1b9b      	subs	r3, r3, r6
 800091e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000922:	2100      	movs	r1, #0
 8000924:	b11d      	cbz	r5, 800092e <__udivmoddi4+0xa6>
 8000926:	40d3      	lsrs	r3, r2
 8000928:	2200      	movs	r2, #0
 800092a:	e9c5 3200 	strd	r3, r2, [r5]
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	428b      	cmp	r3, r1
 8000934:	d905      	bls.n	8000942 <__udivmoddi4+0xba>
 8000936:	b10d      	cbz	r5, 800093c <__udivmoddi4+0xb4>
 8000938:	e9c5 0100 	strd	r0, r1, [r5]
 800093c:	2100      	movs	r1, #0
 800093e:	4608      	mov	r0, r1
 8000940:	e7f5      	b.n	800092e <__udivmoddi4+0xa6>
 8000942:	fab3 f183 	clz	r1, r3
 8000946:	2900      	cmp	r1, #0
 8000948:	d146      	bne.n	80009d8 <__udivmoddi4+0x150>
 800094a:	42a3      	cmp	r3, r4
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0xcc>
 800094e:	4290      	cmp	r0, r2
 8000950:	f0c0 80f0 	bcc.w	8000b34 <__udivmoddi4+0x2ac>
 8000954:	1a86      	subs	r6, r0, r2
 8000956:	eb64 0303 	sbc.w	r3, r4, r3
 800095a:	2001      	movs	r0, #1
 800095c:	2d00      	cmp	r5, #0
 800095e:	d0e6      	beq.n	800092e <__udivmoddi4+0xa6>
 8000960:	e9c5 6300 	strd	r6, r3, [r5]
 8000964:	e7e3      	b.n	800092e <__udivmoddi4+0xa6>
 8000966:	2a00      	cmp	r2, #0
 8000968:	f040 8090 	bne.w	8000a8c <__udivmoddi4+0x204>
 800096c:	eba1 040c 	sub.w	r4, r1, ip
 8000970:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000974:	fa1f f78c 	uxth.w	r7, ip
 8000978:	2101      	movs	r1, #1
 800097a:	fbb4 f6f8 	udiv	r6, r4, r8
 800097e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000982:	fb08 4416 	mls	r4, r8, r6, r4
 8000986:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800098a:	fb07 f006 	mul.w	r0, r7, r6
 800098e:	4298      	cmp	r0, r3
 8000990:	d908      	bls.n	80009a4 <__udivmoddi4+0x11c>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f106 34ff 	add.w	r4, r6, #4294967295
 800099a:	d202      	bcs.n	80009a2 <__udivmoddi4+0x11a>
 800099c:	4298      	cmp	r0, r3
 800099e:	f200 80cd 	bhi.w	8000b3c <__udivmoddi4+0x2b4>
 80009a2:	4626      	mov	r6, r4
 80009a4:	1a1c      	subs	r4, r3, r0
 80009a6:	fa1f f38e 	uxth.w	r3, lr
 80009aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ae:	fb08 4410 	mls	r4, r8, r0, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb00 f707 	mul.w	r7, r0, r7
 80009ba:	429f      	cmp	r7, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x148>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x146>
 80009c8:	429f      	cmp	r7, r3
 80009ca:	f200 80b0 	bhi.w	8000b2e <__udivmoddi4+0x2a6>
 80009ce:	4620      	mov	r0, r4
 80009d0:	1bdb      	subs	r3, r3, r7
 80009d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0x9c>
 80009d8:	f1c1 0620 	rsb	r6, r1, #32
 80009dc:	408b      	lsls	r3, r1
 80009de:	fa22 f706 	lsr.w	r7, r2, r6
 80009e2:	431f      	orrs	r7, r3
 80009e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009e8:	fa04 f301 	lsl.w	r3, r4, r1
 80009ec:	ea43 030c 	orr.w	r3, r3, ip
 80009f0:	40f4      	lsrs	r4, r6
 80009f2:	fa00 f801 	lsl.w	r8, r0, r1
 80009f6:	0c38      	lsrs	r0, r7, #16
 80009f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000a00:	fa1f fc87 	uxth.w	ip, r7
 8000a04:	fb00 441e 	mls	r4, r0, lr, r4
 8000a08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000a10:	45a1      	cmp	r9, r4
 8000a12:	fa02 f201 	lsl.w	r2, r2, r1
 8000a16:	d90a      	bls.n	8000a2e <__udivmoddi4+0x1a6>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a1e:	f080 8084 	bcs.w	8000b2a <__udivmoddi4+0x2a2>
 8000a22:	45a1      	cmp	r9, r4
 8000a24:	f240 8081 	bls.w	8000b2a <__udivmoddi4+0x2a2>
 8000a28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a2c:	443c      	add	r4, r7
 8000a2e:	eba4 0409 	sub.w	r4, r4, r9
 8000a32:	fa1f f983 	uxth.w	r9, r3
 8000a36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a46:	45a4      	cmp	ip, r4
 8000a48:	d907      	bls.n	8000a5a <__udivmoddi4+0x1d2>
 8000a4a:	193c      	adds	r4, r7, r4
 8000a4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a50:	d267      	bcs.n	8000b22 <__udivmoddi4+0x29a>
 8000a52:	45a4      	cmp	ip, r4
 8000a54:	d965      	bls.n	8000b22 <__udivmoddi4+0x29a>
 8000a56:	3b02      	subs	r3, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a62:	eba4 040c 	sub.w	r4, r4, ip
 8000a66:	429c      	cmp	r4, r3
 8000a68:	46ce      	mov	lr, r9
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	d351      	bcc.n	8000b12 <__udivmoddi4+0x28a>
 8000a6e:	d04e      	beq.n	8000b0e <__udivmoddi4+0x286>
 8000a70:	b155      	cbz	r5, 8000a88 <__udivmoddi4+0x200>
 8000a72:	ebb8 030e 	subs.w	r3, r8, lr
 8000a76:	eb64 040c 	sbc.w	r4, r4, ip
 8000a7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a7e:	40cb      	lsrs	r3, r1
 8000a80:	431e      	orrs	r6, r3
 8000a82:	40cc      	lsrs	r4, r1
 8000a84:	e9c5 6400 	strd	r6, r4, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e750      	b.n	800092e <__udivmoddi4+0xa6>
 8000a8c:	f1c2 0320 	rsb	r3, r2, #32
 8000a90:	fa20 f103 	lsr.w	r1, r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa24 f303 	lsr.w	r3, r4, r3
 8000a9c:	4094      	lsls	r4, r2
 8000a9e:	430c      	orrs	r4, r1
 8000aa0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa8:	fa1f f78c 	uxth.w	r7, ip
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ab4:	0c23      	lsrs	r3, r4, #16
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f107 	mul.w	r1, r0, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x24c>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aca:	d22c      	bcs.n	8000b26 <__udivmoddi4+0x29e>
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d92a      	bls.n	8000b26 <__udivmoddi4+0x29e>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000adc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb01 f307 	mul.w	r3, r1, r7
 8000ae8:	42a3      	cmp	r3, r4
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x276>
 8000aec:	eb1c 0404 	adds.w	r4, ip, r4
 8000af0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000af4:	d213      	bcs.n	8000b1e <__udivmoddi4+0x296>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d911      	bls.n	8000b1e <__udivmoddi4+0x296>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4464      	add	r4, ip
 8000afe:	1ae4      	subs	r4, r4, r3
 8000b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b04:	e739      	b.n	800097a <__udivmoddi4+0xf2>
 8000b06:	4604      	mov	r4, r0
 8000b08:	e6f0      	b.n	80008ec <__udivmoddi4+0x64>
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e706      	b.n	800091c <__udivmoddi4+0x94>
 8000b0e:	45c8      	cmp	r8, r9
 8000b10:	d2ae      	bcs.n	8000a70 <__udivmoddi4+0x1e8>
 8000b12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b1a:	3801      	subs	r0, #1
 8000b1c:	e7a8      	b.n	8000a70 <__udivmoddi4+0x1e8>
 8000b1e:	4631      	mov	r1, r6
 8000b20:	e7ed      	b.n	8000afe <__udivmoddi4+0x276>
 8000b22:	4603      	mov	r3, r0
 8000b24:	e799      	b.n	8000a5a <__udivmoddi4+0x1d2>
 8000b26:	4630      	mov	r0, r6
 8000b28:	e7d4      	b.n	8000ad4 <__udivmoddi4+0x24c>
 8000b2a:	46d6      	mov	lr, sl
 8000b2c:	e77f      	b.n	8000a2e <__udivmoddi4+0x1a6>
 8000b2e:	4463      	add	r3, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e74d      	b.n	80009d0 <__udivmoddi4+0x148>
 8000b34:	4606      	mov	r6, r0
 8000b36:	4623      	mov	r3, r4
 8000b38:	4608      	mov	r0, r1
 8000b3a:	e70f      	b.n	800095c <__udivmoddi4+0xd4>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	e730      	b.n	80009a4 <__udivmoddi4+0x11c>
 8000b42:	bf00      	nop

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <can_user_init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void can_user_init(CAN_HandleTypeDef* hcan )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  can_filter;

  can_filter.FilterBank = 0;                       // filter 0
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  can_filter.FilterIdHigh = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // enable can filter
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
 8000b74:	230e      	movs	r3, #14
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   
  HAL_CAN_ConfigFilter(hcan, &can_filter);        // init can filter
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f001 f844 	bl	8001c0c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);                          // start can1
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <can_user_init+0x54>)
 8000b86:	f001 f921 	bl	8001dcc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <can_user_init+0x54>)
 8000b8e:	f001 fb53 	bl	8002238 <HAL_CAN_ActivateNotification>
}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000a4 	.word	0x200000a4

08000ba0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
//  CAN_RxHeaderTypeDef rx_header;
//  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a37      	ldr	r2, [pc, #220]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d105      	bne.n	8000bbe <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 8000bb2:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000bb4:	4a37      	ldr	r2, [pc, #220]	@ (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 fa1b 	bl	8001ff4 <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= FEEDBACK_ID_BASE)
 8000bbe:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8000bc6:	d955      	bls.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
   && (rx_header.StdId <  FEEDBACK_ID_BASE + MOTOR_MAX_NUM))                  // judge the can id
 8000bc8:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000bd0:	d250      	bcs.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
  {
    can_cnt ++;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000bdc:	801a      	strh	r2, [r3, #0]
    uint8_t index = rx_header.StdId - FEEDBACK_ID_BASE;                  // get motor index by can_id
 8000bde:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3b05      	subs	r3, #5
 8000be6:	73fb      	strb	r3, [r7, #15]
    motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000bf2:	785b      	ldrb	r3, [r3, #1]
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	4927      	ldr	r1, [pc, #156]	@ (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	801a      	strh	r2, [r3, #0]
    motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	b219      	sxth	r1, r3
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000c1a:	78db      	ldrb	r3, [r3, #3]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	b218      	sxth	r0, r3
 8000c24:	491d      	ldr	r1, [pc, #116]	@ (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	3306      	adds	r3, #6
 8000c32:	4602      	mov	r2, r0
 8000c34:	801a      	strh	r2, [r3, #0]
    motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b219      	sxth	r1, r3
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000c40:	795b      	ldrb	r3, [r3, #5]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	b218      	sxth	r0, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	@ (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	3308      	adds	r3, #8
 8000c58:	4602      	mov	r2, r0
 8000c5a:	801a      	strh	r2, [r3, #0]
    motor_info[index].temp           =   rx_data[6];
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000c60:	7998      	ldrb	r0, [r3, #6]
 8000c62:	490e      	ldr	r1, [pc, #56]	@ (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	330a      	adds	r3, #10
 8000c70:	4602      	mov	r2, r0
 8000c72:	701a      	strb	r2, [r3, #0]
  }
  if (can_cnt == 500)
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c7c:	d102      	bne.n	8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
  {
    can_cnt = 0;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
//    LED_GREEN_TOGGLE(); // green led blink indicate can comunication successful
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40006400 	.word	0x40006400
 8000c90:	20000080 	.word	0x20000080
 8000c94:	20000088 	.word	0x20000088
 8000c98:	2000007c 	.word	0x2000007c
 8000c9c:	20000028 	.word	0x20000028

08000ca0 <set_motor_voltage>:
  * @param  id_range to select can control id 0x1ff or 0x2ff
  * @param  motor voltage 1,2,3,4 or 5,6,7
  * @retval None
  */
void set_motor_voltage(uint8_t id_range, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	@ 0x2c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	807b      	strh	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];
    
  tx_header.StdId = (id_range == 0)?(0x1ff):(0x2ff);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <set_motor_voltage+0x2a>
 8000cc4:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000cc8:	e001      	b.n	8000cce <set_motor_voltage+0x2e>
 8000cca:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000cce:	613b      	str	r3, [r7, #16]
  tx_header.IDE   = CAN_ID_STD;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 8000cdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ce0:	121b      	asrs	r3, r3, #8
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8000cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cf2:	121b      	asrs	r3, r3, #8
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 8000d00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d04:	121b      	asrs	r3, r3, #8
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 8000d12:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000d16:	121b      	asrs	r3, r3, #8
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 8000d1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0); 
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	f107 0110 	add.w	r1, r7, #16
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <set_motor_voltage+0x9c>)
 8000d30:	f001 f890 	bl	8001e54 <HAL_CAN_AddTxMessage>
}
 8000d34:	bf00      	nop
 8000d36:	372c      	adds	r7, #44	@ 0x2c
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	200000a4 	.word	0x200000a4

08000d40 <pid_init>:
              float kp,
              float ki,
              float kd,
              float i_max,
              float out_max)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6178      	str	r0, [r7, #20]
 8000d48:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000d50:	ed87 1a02 	vstr	s2, [r7, #8]
 8000d54:	edc7 1a01 	vstr	s3, [r7, #4]
 8000d58:	ed87 2a00 	vstr	s4, [r7]
  pid->kp      = kp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	601a      	str	r2, [r3, #0]
  pid->ki      = ki;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	605a      	str	r2, [r3, #4]
  pid->kd      = kd;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	609a      	str	r2, [r3, #8]
  pid->i_max   = i_max;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	60da      	str	r2, [r3, #12]
  pid->out_max = out_max;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	611a      	str	r2, [r3, #16]
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <MX_CAN1_Init+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000d94:	2209      	movs	r2, #9
 8000d96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000db2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <MX_CAN1_Init+0x64>)
 8000dda:	f000 fe1b 	bl	8001a14 <HAL_CAN_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000de4:	f000 fb44 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000a4 	.word	0x200000a4
 8000df0:	40006400 	.word	0x40006400

08000df4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <MX_CAN2_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e00:	2209      	movs	r2, #9
 8000e02:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e16:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e1e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_CAN2_Init+0x64>)
 8000e46:	f000 fde5 	bl	8001a14 <HAL_CAN_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 fb0e 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000cc 	.word	0x200000cc
 8000e5c:	40006800 	.word	0x40006800

08000e60 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	@ (8000fc8 <HAL_CAN_MspInit+0x168>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d145      	bne.n	8000f0e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e82:	4b52      	ldr	r3, [pc, #328]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000e8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10d      	bne.n	8000eb0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	4b46      	ldr	r3, [pc, #280]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a45      	ldr	r2, [pc, #276]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000edc:	2309      	movs	r3, #9
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	483b      	ldr	r0, [pc, #236]	@ (8000fd4 <HAL_CAN_MspInit+0x174>)
 8000ee8:	f002 f88a 	bl	8003000 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2014      	movs	r0, #20
 8000ef2:	f001 fcd2 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ef6:	2014      	movs	r0, #20
 8000ef8:	f001 fceb 	bl	80028d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f001 fcca 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f06:	2015      	movs	r0, #21
 8000f08:	f001 fce3 	bl	80028d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000f0c:	e058      	b.n	8000fc0 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a31      	ldr	r2, [pc, #196]	@ (8000fd8 <HAL_CAN_MspInit+0x178>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d153      	bne.n	8000fc0 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f34:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a24      	ldr	r2, [pc, #144]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000f3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_CAN_MspInit+0x16c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10d      	bne.n	8000f62 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_CAN_MspInit+0x170>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8000f7e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f90:	2309      	movs	r3, #9
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <HAL_CAN_MspInit+0x17c>)
 8000f9c:	f002 f830 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2040      	movs	r0, #64	@ 0x40
 8000fa6:	f001 fc78 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000faa:	2040      	movs	r0, #64	@ 0x40
 8000fac:	f001 fc91 	bl	80028d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2041      	movs	r0, #65	@ 0x41
 8000fb6:	f001 fc70 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000fba:	2041      	movs	r0, #65	@ 0x41
 8000fbc:	f001 fc89 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	@ 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40006400 	.word	0x40006400
 8000fcc:	200000f4 	.word	0x200000f4
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40006800 	.word	0x40006800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_DMA_Init+0x4c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_DMA_Init+0x4c>)
 8000ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_DMA_Init+0x4c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200c      	movs	r0, #12
 8001008:	f001 fc47 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800100c:	200c      	movs	r0, #12
 800100e:	f001 fc60 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200e      	movs	r0, #14
 8001018:	f001 fc3f 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800101c:	200e      	movs	r0, #14
 800101e:	f001 fc58 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <MX_GPIO_Init+0xf8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a36      	ldr	r2, [pc, #216]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a2f      	ldr	r2, [pc, #188]	@ (8001128 <MX_GPIO_Init+0xf8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a28      	ldr	r2, [pc, #160]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <MX_GPIO_Init+0xf8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a1a      	ldr	r2, [pc, #104]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_GPIO_Init+0xf8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	213c      	movs	r1, #60	@ 0x3c
 80010d6:	4815      	ldr	r0, [pc, #84]	@ (800112c <MX_GPIO_Init+0xfc>)
 80010d8:	f002 f93e 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80010dc:	2200      	movs	r2, #0
 80010de:	217e      	movs	r1, #126	@ 0x7e
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <MX_GPIO_Init+0x100>)
 80010e2:	f002 f939 	bl	8003358 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010e6:	233c      	movs	r3, #60	@ 0x3c
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	480b      	ldr	r0, [pc, #44]	@ (800112c <MX_GPIO_Init+0xfc>)
 80010fe:	f001 ff7f 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG5 PG4 PG3
                           PG2 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001102:	237e      	movs	r3, #126	@ 0x7e
 8001104:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_GPIO_Init+0x100>)
 800111a:	f001 ff71 	bl	8003000 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40021c00 	.word	0x40021c00
 8001130:	40021800 	.word	0x40021800

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800113a:	f000 fbd5 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f87b 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f7ff ff75 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 8001146:	f7ff ff4b 	bl	8000fe0 <MX_DMA_Init>
  MX_CAN1_Init();
 800114a:	f7ff fe1d 	bl	8000d88 <MX_CAN1_Init>
  MX_CAN2_Init();
 800114e:	f7ff fe51 	bl	8000df4 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8001152:	f000 fabf 	bl	80016d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001156:	f000 fa4b 	bl	80015f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
can_user_init(&hcan1);
 800115a:	482c      	ldr	r0, [pc, #176]	@ (800120c <main+0xd8>)
 800115c:	f7ff fcf4 	bl	8000b48 <can_user_init>
can_user_init(&hcan2);
 8001160:	482b      	ldr	r0, [pc, #172]	@ (8001210 <main+0xdc>)
 8001162:	f7ff fcf1 	bl	8000b48 <can_user_init>
pid_init(&motor_pid[2], 40, 3, 0, 15000, 15000);
 8001166:	ed9f 2a2b 	vldr	s4, [pc, #172]	@ 8001214 <main+0xe0>
 800116a:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8001214 <main+0xe0>
 800116e:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8001218 <main+0xe4>
 8001172:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8001176:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800121c <main+0xe8>
 800117a:	4829      	ldr	r0, [pc, #164]	@ (8001220 <main+0xec>)
 800117c:	f7ff fde0 	bl	8000d40 <pid_init>
pos_PID_Init();
 8001180:	f004 f958 	bl	8005434 <pos_PID_Init>
ver_PID_Init();
 8001184:	f004 f93e 	bl	8005404 <ver_PID_Init>
//HAL_TIM_Base_Start_IT(&htim2);
//htim2.Instance->CNT = 0;
HAL_TIM_Base_Start_IT(&htim2);
 8001188:	4826      	ldr	r0, [pc, #152]	@ (8001224 <main+0xf0>)
 800118a:	f002 fdf7 	bl	8003d7c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   LED_SET();
 800118e:	f000 f94b 	bl	8001428 <LED_SET>
//  	  htim2.Instance->CNT = motor_info[2].rotor_angle;
  	  angle_sum = angle_calc(motor_info[2].rotor_angle);
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <main+0xf4>)
 8001194:	8b9b      	ldrh	r3, [r3, #28]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f912 	bl	80013c0 <angle_calc>
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <main+0xf8>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]

//   LED_Control(50);
	  motor_info[2].set_voltage = Double_Loop_Control(angle_sum, target_position, motor_info[2].rotor_speed, desired_speed, 20000, 20000);
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <main+0xf8>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <main+0xfc>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <main+0xf4>)
 80011b8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80011bc:	ee06 3a90 	vmov	s13, r3
 80011c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <main+0x100>)
 80011c6:	ed93 6a00 	vldr	s12, [r3]
 80011ca:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80011ce:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80011d2:	eef0 1a46 	vmov.f32	s3, s12
 80011d6:	eeb0 1a66 	vmov.f32	s2, s13
 80011da:	eef0 0a47 	vmov.f32	s1, s14
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	f004 f93d 	bl	8005460 <Double_Loop_Control>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <main+0xf4>)
 80011ec:	835a      	strh	r2, [r3, #26]
//	   motor_info[2].set_voltage = pid_calc(&motor_pid[2],target_speed, motor_info[2].rotor_speed);
//	  motor_info[0].set_voltage = Double_Loop_Control(motor_info[0].rotor_angle, target_position, motor_info[0].rotor_speed, desired_speed, 20000, 20000);
//	  set_motor_voltage(0, 0, 0, motor_info[2].set_voltage, 0);
	  set_motor_voltage(0, 0, 0, motor_info[2].set_voltage, 0);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <main+0xf4>)
 80011f0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011f4:	2200      	movs	r2, #0
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fd4f 	bl	8000ca0 <set_motor_voltage>
//	  set_motor_voltage(0, 0, 0, 0, 0);
	  HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f000 fbe2 	bl	80019cc <HAL_Delay>
  {   LED_SET();
 8001208:	bf00      	nop
 800120a:	e7c0      	b.n	800118e <main+0x5a>
 800120c:	200000a4 	.word	0x200000a4
 8001210:	200000cc 	.word	0x200000cc
 8001214:	466a6000 	.word	0x466a6000
 8001218:	00000000 	.word	0x00000000
 800121c:	42200000 	.word	0x42200000
 8001220:	20000160 	.word	0x20000160
 8001224:	2000027c 	.word	0x2000027c
 8001228:	20000028 	.word	0x20000028
 800122c:	20000278 	.word	0x20000278
 8001230:	20000268 	.word	0x20000268
 8001234:	2000026c 	.word	0x2000026c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f004 faa0 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <SystemClock_Config+0xd8>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a2a      	ldr	r2, [pc, #168]	@ (8001310 <SystemClock_Config+0xd8>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <SystemClock_Config+0xd8>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <SystemClock_Config+0xdc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a24      	ldr	r2, [pc, #144]	@ (8001314 <SystemClock_Config+0xdc>)
 8001282:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <SystemClock_Config+0xdc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012ac:	23b4      	movs	r3, #180	@ 0xb4
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 f8b5 	bl	800342c <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c8:	f000 f8d2 	bl	8001470 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012cc:	f002 f85e 	bl	800338c <HAL_PWREx_EnableOverDrive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012d6:	f000 f8cb 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2105      	movs	r1, #5
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fb0f 	bl	800391c <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001304:	f000 f8b4 	bl	8001470 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	@ 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  if(htim->Instance == htim2.Instance)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d136      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x82>
  {

    if((motor_info[2].rotor_angle - last_angle) <  -180)
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800132e:	8b9b      	ldrh	r3, [r3, #28]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80013b4 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d504      	bpl.n	800135a <HAL_TIM_PeriodElapsedCallback+0x42>
    {
    	 overflowNum++;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a18      	ldr	r2, [pc, #96]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001358:	6013      	str	r3, [r2, #0]
    }
    if((motor_info[2].rotor_angle - last_angle) >  180)
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800135c:	8b9b      	ldrh	r3, [r3, #28]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001366:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80013bc <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	dd04      	ble.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
    	overflowNum--;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001386:	6013      	str	r3, [r2, #0]
    }

    last_angle = motor_info[2].rotor_angle;
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800138a:	8b9b      	ldrh	r3, [r3, #28]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
  }

}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000027c 	.word	0x2000027c
 80013ac:	20000028 	.word	0x20000028
 80013b0:	20000270 	.word	0x20000270
 80013b4:	c3340000 	.word	0xc3340000
 80013b8:	20000274 	.word	0x20000274
 80013bc:	43340000 	.word	0x43340000

080013c0 <angle_calc>:



int angle_calc( int CNT )
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	float angle;

	angle = overflowNum * 360 + CNT * (360.0 / 8192.0);
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <angle_calc+0x60>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f985 	bl	80006e4 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f980 	bl	80006e4 <__aeabi_i2d>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <angle_calc+0x64>)
 80013ea:	f7fe feff 	bl	80001ec <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f829 	bl	800044c <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff f9d9 	bl	80007b8 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]

	return angle;
 800140a:	edd7 7a03 	vldr	s15, [r7, #12]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	20000274 	.word	0x20000274
 8001424:	3fa68000 	.word	0x3fa68000

08001428 <LED_SET>:
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,RESET);

}

void LED_SET(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_1,SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2102      	movs	r1, #2
 8001430:	480e      	ldr	r0, [pc, #56]	@ (800146c <LED_SET+0x44>)
 8001432:	f001 ff91 	bl	8003358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2,SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2104      	movs	r1, #4
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <LED_SET+0x44>)
 800143c:	f001 ff8c 	bl	8003358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2108      	movs	r1, #8
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <LED_SET+0x44>)
 8001446:	f001 ff87 	bl	8003358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_4,SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2110      	movs	r1, #16
 800144e:	4807      	ldr	r0, [pc, #28]	@ (800146c <LED_SET+0x44>)
 8001450:	f001 ff82 	bl	8003358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_5,SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2120      	movs	r1, #32
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <LED_SET+0x44>)
 800145a:	f001 ff7d 	bl	8003358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2140      	movs	r1, #64	@ 0x40
 8001462:	4802      	ldr	r0, [pc, #8]	@ (800146c <LED_SET+0x44>)
 8001464:	f001 ff78 	bl	8003358 <HAL_GPIO_WritePin>

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021800 	.word	0x40021800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f000 fa33 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA1_Stream1_IRQHandler+0x10>)
 8001532:	f001 fb29 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000030c 	.word	0x2000030c

08001540 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Stream3_IRQHandler+0x10>)
 8001546:	f001 fb1f 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000036c 	.word	0x2000036c

08001554 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <CAN1_RX0_IRQHandler+0x10>)
 800155a:	f000 fe93 	bl	8002284 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000a4 	.word	0x200000a4

08001568 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <CAN1_RX1_IRQHandler+0x10>)
 800156e:	f000 fe89 	bl	8002284 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000a4 	.word	0x200000a4

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f002 fc6b 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000027c 	.word	0x2000027c

08001590 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <USART3_IRQHandler+0x10>)
 8001596:	f003 f867 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002c4 	.word	0x200002c4

080015a4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <CAN2_RX0_IRQHandler+0x10>)
 80015aa:	f000 fe6b 	bl	8002284 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000cc 	.word	0x200000cc

080015b8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <CAN2_RX1_IRQHandler+0x10>)
 80015be:	f000 fe61 	bl	8002284 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200000cc 	.word	0x200000cc

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160c:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <MX_TIM2_Init+0x94>)
 800160e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_TIM2_Init+0x94>)
 8001616:	f240 7207 	movw	r2, #1799	@ 0x707
 800161a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_TIM2_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_TIM2_Init+0x94>)
 8001624:	22c7      	movs	r2, #199	@ 0xc7
 8001626:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_TIM2_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	@ (8001684 <MX_TIM2_Init+0x94>)
 8001636:	f002 fb51 	bl	8003cdc <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001640:	f7ff ff16 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <MX_TIM2_Init+0x94>)
 8001652:	f002 fcf3 	bl	800403c <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800165c:	f7ff ff08 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_TIM2_Init+0x94>)
 800166e:	f002 ff1b 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001678:	f7ff fefa 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000027c 	.word	0x2000027c

08001688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001698:	d115      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	201c      	movs	r0, #28
 80016bc:	f001 f8ed 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c0:	201c      	movs	r0, #28
 80016c2:	f001 f906 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <MX_USART3_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART3_UART_Init+0x4c>)
 800170c:	f002 ff5c 	bl	80045c8 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f7ff feab 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002c4 	.word	0x200002c4
 8001724:	40004800 	.word	0x40004800

08001728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4c      	ldr	r2, [pc, #304]	@ (8001878 <HAL_UART_MspInit+0x150>)
 8001746:	4293      	cmp	r3, r2
 8001748:	f040 8091 	bne.w	800186e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	4b4a      	ldr	r3, [pc, #296]	@ (800187c <HAL_UART_MspInit+0x154>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	4a49      	ldr	r2, [pc, #292]	@ (800187c <HAL_UART_MspInit+0x154>)
 8001756:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175a:	6413      	str	r3, [r2, #64]	@ 0x40
 800175c:	4b47      	ldr	r3, [pc, #284]	@ (800187c <HAL_UART_MspInit+0x154>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_UART_MspInit+0x154>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	4a42      	ldr	r2, [pc, #264]	@ (800187c <HAL_UART_MspInit+0x154>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6313      	str	r3, [r2, #48]	@ 0x30
 8001778:	4b40      	ldr	r3, [pc, #256]	@ (800187c <HAL_UART_MspInit+0x154>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001784:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001796:	2307      	movs	r3, #7
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4837      	ldr	r0, [pc, #220]	@ (8001880 <HAL_UART_MspInit+0x158>)
 80017a2:	f001 fc2d 	bl	8003000 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80017a6:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017a8:	4a37      	ldr	r2, [pc, #220]	@ (8001888 <HAL_UART_MspInit+0x160>)
 80017aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80017ac:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b4:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ba:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017e6:	4827      	ldr	r0, [pc, #156]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017e8:	f001 f88e 	bl	8002908 <HAL_DMA_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017f2:	f7ff fe3d 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017fc:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_UART_MspInit+0x15c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_UART_MspInit+0x168>)
 8001806:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_UART_MspInit+0x164>)
 800180a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800180e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001812:	2240      	movs	r2, #64	@ 0x40
 8001814:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_UART_MspInit+0x164>)
 800181e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001822:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_UART_MspInit+0x164>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001830:	4b16      	ldr	r3, [pc, #88]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_UART_MspInit+0x164>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001842:	4812      	ldr	r0, [pc, #72]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001844:	f001 f860 	bl	8002908 <HAL_DMA_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800184e:	f7ff fe0f 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_UART_MspInit+0x164>)
 8001856:	639a      	str	r2, [r3, #56]	@ 0x38
 8001858:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <HAL_UART_MspInit+0x164>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2027      	movs	r0, #39	@ 0x27
 8001864:	f001 f819 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001868:	2027      	movs	r0, #39	@ 0x27
 800186a:	f001 f832 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	@ 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40004800 	.word	0x40004800
 800187c:	40023800 	.word	0x40023800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	2000030c 	.word	0x2000030c
 8001888:	40026028 	.word	0x40026028
 800188c:	2000036c 	.word	0x2000036c
 8001890:	40026058 	.word	0x40026058

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001898:	f7ff fe98 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	@ (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f003 ff6b 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fc35 	bl	8001134 <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018d8:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 80018dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018e0:	20000414 	.word	0x20000414

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_Init+0x40>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_Init+0x40>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <HAL_Init+0x40>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 ffb7 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fdae 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 ffcf 	bl	80028ee <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 ff97 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	200003cc 	.word	0x200003cc

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200003cc 	.word	0x200003cc

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0ed      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fa14 	bl	8000e60 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ffb4 	bl	80019b4 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ffb0 	bl	80019b4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0c5      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0e5      	beq.n	8001a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0202 	bic.w	r2, r2, #2
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff ff8e 	bl	80019b4 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9a:	e012      	b.n	8001ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a9c:	f7ff ff8a 	bl	80019b4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b0a      	cmp	r3, #10
 8001aa8:	d90b      	bls.n	8001ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2205      	movs	r2, #5
 8001aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e09f      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e5      	bne.n	8001a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e007      	b.n	8001afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e5b      	ldrb	r3, [r3, #25]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e9b      	ldrb	r3, [r3, #26]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d108      	bne.n	8001b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e007      	b.n	8001b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0220 	bic.w	r2, r2, #32
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7edb      	ldrb	r3, [r3, #27]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0210 	bic.w	r2, r2, #16
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e007      	b.n	8001b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0210 	orr.w	r2, r2, #16
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7f1b      	ldrb	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0208 	orr.w	r2, r2, #8
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7f5b      	ldrb	r3, [r3, #29]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0204 	orr.w	r2, r2, #4
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e007      	b.n	8001bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0204 	bic.w	r2, r2, #4
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	ea42 0103 	orr.w	r1, r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c24:	7cfb      	ldrb	r3, [r7, #19]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d003      	beq.n	8001c32 <HAL_CAN_ConfigFilter+0x26>
 8001c2a:	7cfb      	ldrb	r3, [r7, #19]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 80be 	bne.w	8001dae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c32:	4b65      	ldr	r3, [pc, #404]	@ (8001dc8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c34:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c4c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2201      	movs	r2, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	401a      	ands	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d123      	bne.n	8001cdc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3248      	adds	r2, #72	@ 0x48
 8001cbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	3348      	adds	r3, #72	@ 0x48
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d122      	bne.n	8001d2a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3248      	adds	r2, #72	@ 0x48
 8001d0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d20:	6979      	ldr	r1, [r7, #20]
 8001d22:	3348      	adds	r3, #72	@ 0x48
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d44:	e007      	b.n	8001d56 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d70:	e007      	b.n	8001d82 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d107      	bne.n	8001d9a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001da0:	f023 0201 	bic.w	r2, r3, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e006      	b.n	8001dbc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40006400 	.word	0x40006400

08001dcc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d12e      	bne.n	8001e3e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff fddc 	bl	80019b4 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dfe:	e012      	b.n	8001e26 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e00:	f7ff fdd8 	bl	80019b4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	d90b      	bls.n	8001e26 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e012      	b.n	8001e4c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e5      	bne.n	8001e00 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e006      	b.n	8001e4c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e68:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d003      	beq.n	8001e80 <HAL_CAN_AddTxMessage+0x2c>
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	f040 80ad 	bne.w	8001fda <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8095 	beq.w	8001fca <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	0e1b      	lsrs	r3, r3, #24
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	6809      	ldr	r1, [r1, #0]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001eec:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3318      	adds	r3, #24
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	440b      	add	r3, r1
 8001f08:	3304      	adds	r3, #4
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	7d1b      	ldrb	r3, [r3, #20]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d111      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6811      	ldr	r1, [r2, #0]
 8001f28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3318      	adds	r3, #24
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	3304      	adds	r3, #4
 8001f36:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3307      	adds	r3, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	061a      	lsls	r2, r3, #24
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3306      	adds	r3, #6
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3305      	adds	r3, #5
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	4313      	orrs	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	3204      	adds	r2, #4
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	6811      	ldr	r1, [r2, #0]
 8001f60:	ea43 0200 	orr.w	r2, r3, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	440b      	add	r3, r1
 8001f6a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f6e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3303      	adds	r3, #3
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	061a      	lsls	r2, r3, #24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	4610      	mov	r0, r2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	6811      	ldr	r1, [r2, #0]
 8001f96:	ea43 0200 	orr.w	r2, r3, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001fa4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3318      	adds	r3, #24
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6811      	ldr	r1, [r2, #0]
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	440b      	add	r3, r1
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e00e      	b.n	8001fe8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e006      	b.n	8001fe8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3724      	adds	r7, #36	@ 0x24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002008:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d003      	beq.n	8002018 <HAL_CAN_GetRxMessage+0x24>
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b02      	cmp	r3, #2
 8002014:	f040 8103 	bne.w	800221e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d116      	bne.n	800205a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0f7      	b.n	800222c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0e8      	b.n	800222c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	331b      	adds	r3, #27
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0204 	and.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10c      	bne.n	8002092 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0d5b      	lsrs	r3, r3, #21
 8002088:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e00b      	b.n	80020aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	331b      	adds	r3, #27
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	331b      	adds	r3, #27
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0202 	and.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	331b      	adds	r3, #27
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2208      	movs	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	e00b      	b.n	80020f8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	331b      	adds	r3, #27
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	331b      	adds	r3, #27
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	b2da      	uxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4413      	add	r3, r2
 8002148:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0a1a      	lsrs	r2, r3, #8
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0c1a      	lsrs	r2, r3, #16
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3302      	adds	r3, #2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4413      	add	r3, r2
 800217c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0e1a      	lsrs	r2, r3, #24
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	3303      	adds	r3, #3
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	3304      	adds	r3, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0a1a      	lsrs	r2, r3, #8
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	3305      	adds	r3, #5
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	0c1a      	lsrs	r2, r3, #16
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3306      	adds	r3, #6
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e1a      	lsrs	r2, r3, #24
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	3307      	adds	r3, #7
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	e007      	b.n	800221a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e006      	b.n	800222c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d002      	beq.n	8002256 <HAL_CAN_ActivateNotification+0x1e>
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d109      	bne.n	800226a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6959      	ldr	r1, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e006      	b.n	8002278 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d07c      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f983 	bl	80025f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80022ec:	e016      	b.n	800231c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002300:	e00c      	b.n	800231c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	e002      	b.n	800231c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f989 	bl	800262e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d024      	beq.n	8002370 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800232e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f963 	bl	8002606 <HAL_CAN_TxMailbox1CompleteCallback>
 8002340:	e016      	b.n	8002370 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	e00c      	b.n	8002370 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
 8002368:	e002      	b.n	8002370 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f969 	bl	8002642 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d024      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002382:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f943 	bl	800261a <HAL_CAN_TxMailbox2CompleteCallback>
 8002394:	e016      	b.n	80023c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a8:	e00c      	b.n	80023c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	e002      	b.n	80023c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f949 	bl	8002656 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00c      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2210      	movs	r2, #16
 80023e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2208      	movs	r2, #8
 8002402:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f930 	bl	800266a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fbbc 	bl	8000ba0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f912 	bl	8002692 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8f9 	bl	800267e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2210      	movs	r2, #16
 80024a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f8fc 	bl	80026a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2208      	movs	r2, #8
 80024c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8f5 	bl	80026ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07b      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d072      	beq.n	80025ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800253e:	2b00      	cmp	r3, #0
 8002540:	d043      	beq.n	80025ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03e      	beq.n	80025ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002552:	2b60      	cmp	r3, #96	@ 0x60
 8002554:	d02b      	beq.n	80025ae <HAL_CAN_IRQHandler+0x32a>
 8002556:	2b60      	cmp	r3, #96	@ 0x60
 8002558:	d82e      	bhi.n	80025b8 <HAL_CAN_IRQHandler+0x334>
 800255a:	2b50      	cmp	r3, #80	@ 0x50
 800255c:	d022      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x320>
 800255e:	2b50      	cmp	r3, #80	@ 0x50
 8002560:	d82a      	bhi.n	80025b8 <HAL_CAN_IRQHandler+0x334>
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d019      	beq.n	800259a <HAL_CAN_IRQHandler+0x316>
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d826      	bhi.n	80025b8 <HAL_CAN_IRQHandler+0x334>
 800256a:	2b30      	cmp	r3, #48	@ 0x30
 800256c:	d010      	beq.n	8002590 <HAL_CAN_IRQHandler+0x30c>
 800256e:	2b30      	cmp	r3, #48	@ 0x30
 8002570:	d822      	bhi.n	80025b8 <HAL_CAN_IRQHandler+0x334>
 8002572:	2b10      	cmp	r3, #16
 8002574:	d002      	beq.n	800257c <HAL_CAN_IRQHandler+0x2f8>
 8002576:	2b20      	cmp	r3, #32
 8002578:	d005      	beq.n	8002586 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800257a:	e01d      	b.n	80025b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002584:	e019      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	f043 0310 	orr.w	r3, r3, #16
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800258e:	e014      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002598:	e00f      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025a2:	e00a      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ac:	e005      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025b6:	e000      	b.n	80025ba <HAL_CAN_IRQHandler+0x336>
            break;
 80025b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2204      	movs	r2, #4
 80025d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f872 	bl	80026ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	@ 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	@ (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	@ (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	@ 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff f84e 	bl	80019b4 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e099      	b.n	8002a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e00f      	b.n	8002966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff f835 	bl	80019b4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d908      	bls.n	8002966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e078      	b.n	8002a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e8      	bne.n	8002946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4b38      	ldr	r3, [pc, #224]	@ (8002a60 <HAL_DMA_Init+0x158>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d117      	bne.n	8002a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa7b 	bl	8002f08 <DMA_CheckFifoParam>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a26:	2301      	movs	r3, #1
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fa32 	bl	8002e9c <DMA_CalcBaseAndBitshift>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	223f      	movs	r2, #63	@ 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	f010803f 	.word	0xf010803f

08002a64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a72:	f7fe ff9f 	bl	80019b4 <HAL_GetTick>
 8002a76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d008      	beq.n	8002a96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2280      	movs	r2, #128	@ 0x80
 8002a88:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e052      	b.n	8002b3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_Abort+0x62>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae6:	e013      	b.n	8002b10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae8:	f7fe ff64 	bl	80019b4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d90c      	bls.n	8002b10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2203      	movs	r2, #3
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e015      	b.n	8002b3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e4      	bne.n	8002ae8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	223f      	movs	r2, #63	@ 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00c      	b.n	8002b7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2205      	movs	r2, #5
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b94:	4b8e      	ldr	r3, [pc, #568]	@ (8002dd0 <HAL_DMA_IRQHandler+0x248>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a8e      	ldr	r2, [pc, #568]	@ (8002dd4 <HAL_DMA_IRQHandler+0x24c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	2208      	movs	r2, #8
 8002be2:	409a      	lsls	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	2201      	movs	r2, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2204      	movs	r2, #4
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2210      	movs	r2, #16
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d043      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03c      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	2210      	movs	r2, #16
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d024      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
 8002cb6:	e01f      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e016      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0208 	bic.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808f 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8087 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	2220      	movs	r2, #32
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d136      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0216 	bic.w	r2, r2, #22
 8002d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x1da>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0208 	bic.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	223f      	movs	r2, #63	@ 0x3f
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d07e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
        }
        return;
 8002d9e:	e079      	b.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e02c      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
 8002de8:	e01e      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d032      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d307      	bcc.n	8002e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f2      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x2cc>
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e94:	bf00      	nop
    }
  }
}
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3b10      	subs	r3, #16
 8002eac:	4a14      	ldr	r2, [pc, #80]	@ (8002f00 <DMA_CalcBaseAndBitshift+0x64>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb6:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d909      	bls.n	8002ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	@ 0x58
 8002edc:	e007      	b.n	8002eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	aaaaaaab 	.word	0xaaaaaaab
 8002f04:	08005814 	.word	0x08005814

08002f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d856      	bhi.n	8002fd6 <DMA_CheckFifoParam+0xce>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <DMA_CheckFifoParam+0x28>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f53 	.word	0x08002f53
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002fd7 	.word	0x08002fd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d046      	beq.n	8002fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e043      	b.n	8002fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f5a:	d140      	bne.n	8002fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f60:	e03d      	b.n	8002fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6a:	d121      	bne.n	8002fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d837      	bhi.n	8002fe2 <DMA_CheckFifoParam+0xda>
 8002f72:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <DMA_CheckFifoParam+0x70>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f8f 	.word	0x08002f8f
 8002f80:	08002f89 	.word	0x08002f89
 8002f84:	08002fa1 	.word	0x08002fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e030      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d025      	beq.n	8002fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9e:	e022      	b.n	8002fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fa8:	d11f      	bne.n	8002fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fae:	e01c      	b.n	8002fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d903      	bls.n	8002fbe <DMA_CheckFifoParam+0xb6>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d003      	beq.n	8002fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fbc:	e018      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc2:	e015      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e00b      	b.n	8002fee <DMA_CheckFifoParam+0xe6>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e00a      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e008      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e006      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e004      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
    }
  } 
  
  return status; 
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e177      	b.n	800330c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8166 	bne.w	8003306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d005      	beq.n	8003052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	2b02      	cmp	r3, #2
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d017      	beq.n	80030f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d123      	bne.n	8003144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80c0 	beq.w	8003306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b66      	ldr	r3, [pc, #408]	@ (8003324 <HAL_GPIO_Init+0x324>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_GPIO_Init+0x324>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003194:	6453      	str	r3, [r2, #68]	@ 0x44
 8003196:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <HAL_GPIO_Init+0x324>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a2:	4a61      	ldr	r2, [pc, #388]	@ (8003328 <HAL_GPIO_Init+0x328>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a58      	ldr	r2, [pc, #352]	@ (800332c <HAL_GPIO_Init+0x32c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d037      	beq.n	800323e <HAL_GPIO_Init+0x23e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a57      	ldr	r2, [pc, #348]	@ (8003330 <HAL_GPIO_Init+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d031      	beq.n	800323a <HAL_GPIO_Init+0x23a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a56      	ldr	r2, [pc, #344]	@ (8003334 <HAL_GPIO_Init+0x334>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02b      	beq.n	8003236 <HAL_GPIO_Init+0x236>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a55      	ldr	r2, [pc, #340]	@ (8003338 <HAL_GPIO_Init+0x338>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x232>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a54      	ldr	r2, [pc, #336]	@ (800333c <HAL_GPIO_Init+0x33c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x22e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a53      	ldr	r2, [pc, #332]	@ (8003340 <HAL_GPIO_Init+0x340>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x22a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a52      	ldr	r2, [pc, #328]	@ (8003344 <HAL_GPIO_Init+0x344>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x226>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a51      	ldr	r2, [pc, #324]	@ (8003348 <HAL_GPIO_Init+0x348>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x222>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a50      	ldr	r2, [pc, #320]	@ (800334c <HAL_GPIO_Init+0x34c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x21e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4f      	ldr	r2, [pc, #316]	@ (8003350 <HAL_GPIO_Init+0x350>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x21a>
 8003216:	2309      	movs	r3, #9
 8003218:	e012      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800321a:	230a      	movs	r3, #10
 800321c:	e010      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800321e:	2308      	movs	r3, #8
 8003220:	e00e      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003222:	2307      	movs	r3, #7
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003226:	2306      	movs	r3, #6
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800323e:	2300      	movs	r3, #0
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003250:	4935      	ldr	r1, [pc, #212]	@ (8003328 <HAL_GPIO_Init+0x328>)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325e:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <HAL_GPIO_Init+0x354>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003282:	4a34      	ldr	r2, [pc, #208]	@ (8003354 <HAL_GPIO_Init+0x354>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003288:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <HAL_GPIO_Init+0x354>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ac:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <HAL_GPIO_Init+0x354>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b2:	4b28      	ldr	r3, [pc, #160]	@ (8003354 <HAL_GPIO_Init+0x354>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003354 <HAL_GPIO_Init+0x354>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_GPIO_Init+0x354>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003300:	4a14      	ldr	r2, [pc, #80]	@ (8003354 <HAL_GPIO_Init+0x354>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3301      	adds	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	f67f ae84 	bls.w	800301c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40013800 	.word	0x40013800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00
 800333c:	40021000 	.word	0x40021000
 8003340:	40021400 	.word	0x40021400
 8003344:	40021800 	.word	0x40021800
 8003348:	40021c00 	.word	0x40021c00
 800334c:	40022000 	.word	0x40022000
 8003350:	40022400 	.word	0x40022400
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	4b20      	ldr	r3, [pc, #128]	@ (800341c <HAL_PWREx_EnableOverDrive+0x90>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_PWREx_EnableOverDrive+0x90>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a6:	4b1d      	ldr	r3, [pc, #116]	@ (800341c <HAL_PWREx_EnableOverDrive+0x90>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <HAL_PWREx_EnableOverDrive+0x94>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b8:	f7fe fafc 	bl	80019b4 <HAL_GetTick>
 80033bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033be:	e009      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c0:	f7fe faf8 	bl	80019b4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ce:	d901      	bls.n	80033d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e01f      	b.n	8003414 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d4:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d1ee      	bne.n	80033c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e8:	f7fe fae4 	bl	80019b4 <HAL_GetTick>
 80033ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ee:	e009      	b.n	8003404 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f0:	f7fe fae0 	bl	80019b4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033fe:	d901      	bls.n	8003404 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e007      	b.n	8003414 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003404:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003410:	d1ee      	bne.n	80033f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	420e0040 	.word	0x420e0040
 8003424:	40007000 	.word	0x40007000
 8003428:	420e0044 	.word	0x420e0044

0800342c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e267      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00c      	beq.n	8003470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003456:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d112      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b82      	ldr	r3, [pc, #520]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800346e:	d10b      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	4b7e      	ldr	r3, [pc, #504]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05b      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d157      	bne.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e242      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x74>
 8003492:	4b76      	ldr	r3, [pc, #472]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b70      	ldr	r3, [pc, #448]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6f      	ldr	r2, [pc, #444]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6d      	ldr	r3, [pc, #436]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6c      	ldr	r2, [pc, #432]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034c4:	4b69      	ldr	r3, [pc, #420]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a68      	ldr	r2, [pc, #416]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b66      	ldr	r3, [pc, #408]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a65      	ldr	r2, [pc, #404]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fa66 	bl	80019b4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fa62 	bl	80019b4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e207      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b5b      	ldr	r3, [pc, #364]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xc0>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fa52 	bl	80019b4 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe fa4e 	bl	80019b4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1f3      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b51      	ldr	r3, [pc, #324]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	4b4a      	ldr	r3, [pc, #296]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b44      	ldr	r3, [pc, #272]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b41      	ldr	r3, [pc, #260]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c7      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4937      	ldr	r1, [pc, #220]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_RCC_OscConfig+0x244>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe fa07 	bl	80019b4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe fa03 	bl	80019b4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a8      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b28      	ldr	r3, [pc, #160]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4925      	ldr	r1, [pc, #148]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_OscConfig+0x244>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9e6 	bl	80019b4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe f9e2 	bl	80019b4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e187      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_RCC_OscConfig+0x248>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe f9c6 	bl	80019b4 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe f9c2 	bl	80019b4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e167      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_OscConfig+0x240>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x200>
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_OscConfig+0x248>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fe f9af 	bl	80019b4 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	e00e      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe f9ab 	bl	80019b4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d907      	bls.n	8003678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e150      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	42470000 	.word	0x42470000
 8003674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8097 	beq.w	80037c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b81      	ldr	r3, [pc, #516]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b7d      	ldr	r3, [pc, #500]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	4a7c      	ldr	r2, [pc, #496]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b2:	4b7a      	ldr	r3, [pc, #488]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b77      	ldr	r3, [pc, #476]	@ (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ce:	4b74      	ldr	r3, [pc, #464]	@ (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	@ (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7fe f96b 	bl	80019b4 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fe f967 	bl	80019b4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e10c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b6a      	ldr	r3, [pc, #424]	@ (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x2ea>
 8003708:	4b64      	ldr	r3, [pc, #400]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370c:	4a63      	ldr	r2, [pc, #396]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	@ 0x70
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x30c>
 800371e:	4b5f      	ldr	r3, [pc, #380]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	4a5e      	ldr	r2, [pc, #376]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	@ 0x70
 800372a:	4b5c      	ldr	r3, [pc, #368]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5b      	ldr	r2, [pc, #364]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003738:	4b58      	ldr	r3, [pc, #352]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4a57      	ldr	r2, [pc, #348]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	@ 0x70
 8003744:	4b55      	ldr	r3, [pc, #340]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a54      	ldr	r2, [pc, #336]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe f92c 	bl	80019b4 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe f928 	bl	80019b4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0cb      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	4b49      	ldr	r3, [pc, #292]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCC_OscConfig+0x334>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003784:	f7fe f916 	bl	80019b4 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe f912 	bl	80019b4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0b5      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b39      	ldr	r3, [pc, #228]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	4a38      	ldr	r2, [pc, #224]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a1 	beq.w	800390c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ca:	4b34      	ldr	r3, [pc, #208]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d05c      	beq.n	8003890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d141      	bne.n	8003862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe f8e6 	bl	80019b4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe f8e2 	bl	80019b4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e087      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	491b      	ldr	r1, [pc, #108]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe f8bb 	bl	80019b4 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe f8b7 	bl	80019b4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e05c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x416>
 8003860:	e054      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	4b10      	ldr	r3, [pc, #64]	@ (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe f8a4 	bl	80019b4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe f8a0 	bl	80019b4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e045      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_OscConfig+0x470>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x444>
 800388e:	e03d      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e038      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_RCC_OscConfig+0x4ec>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d121      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0cc      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d90c      	bls.n	8003958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b65      	ldr	r3, [pc, #404]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d044      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e067      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b37      	ldr	r3, [pc, #220]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4934      	ldr	r1, [pc, #208]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fd ffd2 	bl	80019b4 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fd ffce 	bl	80019b4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e04f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d20c      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	@ (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd ff32 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	080057fc 	.word	0x080057fc
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b090      	sub	sp, #64	@ 0x40
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af4:	2300      	movs	r3, #0
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af8:	2300      	movs	r3, #0
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b00:	4b59      	ldr	r3, [pc, #356]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80a1 	bhi.w	8003c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e09b      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003b20:	e09b      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b26:	e098      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b4f      	ldr	r3, [pc, #316]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b32:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d028      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b50:	2100      	movs	r1, #0
 8003b52:	4b47      	ldr	r3, [pc, #284]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b54:	fb03 f201 	mul.w	r2, r3, r1
 8003b58:	2300      	movs	r3, #0
 8003b5a:	fb00 f303 	mul.w	r3, r0, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b62:	fba0 1202 	umull	r1, r2, r0, r2
 8003b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b68:	460a      	mov	r2, r1
 8003b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b6e:	4413      	add	r3, r2
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b74:	2200      	movs	r2, #0
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b82:	f7fc fe69 	bl	8000858 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b8e:	e053      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b90:	4b35      	ldr	r3, [pc, #212]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	2200      	movs	r2, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	617a      	str	r2, [r7, #20]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ba2:	f04f 0b00 	mov.w	fp, #0
 8003ba6:	4652      	mov	r2, sl
 8003ba8:	465b      	mov	r3, fp
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	0159      	lsls	r1, r3, #5
 8003bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb8:	0150      	lsls	r0, r2, #5
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8003bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bda:	ebb2 0408 	subs.w	r4, r2, r8
 8003bde:	eb63 0509 	sbc.w	r5, r3, r9
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	00eb      	lsls	r3, r5, #3
 8003bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf0:	00e2      	lsls	r2, r4, #3
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	461d      	mov	r5, r3
 8003bf6:	eb14 030a 	adds.w	r3, r4, sl
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	eb45 030b 	adc.w	r3, r5, fp
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c0e:	4629      	mov	r1, r5
 8003c10:	028b      	lsls	r3, r1, #10
 8003c12:	4621      	mov	r1, r4
 8003c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c18:	4621      	mov	r1, r4
 8003c1a:	028a      	lsls	r2, r1, #10
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c22:	2200      	movs	r2, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2c:	f7fc fe14 	bl	8000858 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4613      	mov	r3, r2
 8003c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	3301      	adds	r3, #1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3740      	adds	r7, #64	@ 0x40
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	00b71b00 	.word	0x00b71b00

08003c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000000 	.word	0x20000000

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff0 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0a9b      	lsrs	r3, r3, #10
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800580c 	.word	0x0800580c

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffdc 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0b5b      	lsrs	r3, r3, #13
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	0800580c 	.word	0x0800580c

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e041      	b.n	8003d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd fcc0 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 fa7e 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04e      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a23      	ldr	r2, [pc, #140]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d022      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	d01d      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d010      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e007      	b.n	8003e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40010400 	.word	0x40010400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40001800 	.word	0x40001800

08003e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0202 	mvn.w	r2, #2
 8003e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f999 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f98b 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f99c 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0204 	mvn.w	r2, #4
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f973 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f965 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f976 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0208 	mvn.w	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f94d 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f93f 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f950 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d020      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0210 	mvn.w	r2, #16
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f927 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f919 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f92a 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0201 	mvn.w	r2, #1
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd f9a8 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fae4 	bl	80045b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8fb 	bl	8004206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00c      	beq.n	8004034 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0220 	mvn.w	r2, #32
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fab6 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIM_ConfigClockSource+0x1c>
 8004054:	2302      	movs	r3, #2
 8004056:	e0b4      	b.n	80041c2 <HAL_TIM_ConfigClockSource+0x186>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800407e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004090:	d03e      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0xd4>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004096:	f200 8087 	bhi.w	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800409e:	f000 8086 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x172>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a6:	d87f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b70      	cmp	r3, #112	@ 0x70
 80040aa:	d01a      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0xa6>
 80040ac:	2b70      	cmp	r3, #112	@ 0x70
 80040ae:	d87b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b60      	cmp	r3, #96	@ 0x60
 80040b2:	d050      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x11a>
 80040b4:	2b60      	cmp	r3, #96	@ 0x60
 80040b6:	d877      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b50      	cmp	r3, #80	@ 0x50
 80040ba:	d03c      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xfa>
 80040bc:	2b50      	cmp	r3, #80	@ 0x50
 80040be:	d873      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b40      	cmp	r3, #64	@ 0x40
 80040c2:	d058      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x13a>
 80040c4:	2b40      	cmp	r3, #64	@ 0x40
 80040c6:	d86f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b30      	cmp	r3, #48	@ 0x30
 80040ca:	d064      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15a>
 80040cc:	2b30      	cmp	r3, #48	@ 0x30
 80040ce:	d86b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d060      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15a>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d867      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15a>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d05a      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	e062      	b.n	80041a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	f000 f9b9 	bl	8004468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	609a      	str	r2, [r3, #8]
      break;
 800410e:	e04f      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	f000 f9a2 	bl	8004468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004132:	609a      	str	r2, [r3, #8]
      break;
 8004134:	e03c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f916 	bl	8004374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2150      	movs	r1, #80	@ 0x50
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f96f 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 8004154:	e02c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f935 	bl	80043d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2160      	movs	r1, #96	@ 0x60
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f95f 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 8004174:	e01c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f8f6 	bl	8004374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2140      	movs	r1, #64	@ 0x40
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f94f 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 8004194:	e00c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 f946 	bl	8004432 <TIM_ITRx_SetConfig>
      break;
 80041a6:	e003      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e000      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a46      	ldr	r2, [pc, #280]	@ (8004348 <TIM_Base_SetConfig+0x12c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a43      	ldr	r2, [pc, #268]	@ (800434c <TIM_Base_SetConfig+0x130>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a42      	ldr	r2, [pc, #264]	@ (8004350 <TIM_Base_SetConfig+0x134>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a41      	ldr	r2, [pc, #260]	@ (8004354 <TIM_Base_SetConfig+0x138>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a40      	ldr	r2, [pc, #256]	@ (8004358 <TIM_Base_SetConfig+0x13c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a35      	ldr	r2, [pc, #212]	@ (8004348 <TIM_Base_SetConfig+0x12c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427c:	d027      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a32      	ldr	r2, [pc, #200]	@ (800434c <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d023      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a31      	ldr	r2, [pc, #196]	@ (8004350 <TIM_Base_SetConfig+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a30      	ldr	r2, [pc, #192]	@ (8004354 <TIM_Base_SetConfig+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2f      	ldr	r2, [pc, #188]	@ (8004358 <TIM_Base_SetConfig+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d017      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2e      	ldr	r2, [pc, #184]	@ (800435c <TIM_Base_SetConfig+0x140>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004360 <TIM_Base_SetConfig+0x144>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004364 <TIM_Base_SetConfig+0x148>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004368 <TIM_Base_SetConfig+0x14c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <TIM_Base_SetConfig+0x150>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a29      	ldr	r2, [pc, #164]	@ (8004370 <TIM_Base_SetConfig+0x154>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a10      	ldr	r2, [pc, #64]	@ (8004348 <TIM_Base_SetConfig+0x12c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <TIM_Base_SetConfig+0x13c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]
  }
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40010400 	.word	0x40010400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800
 8004368:	40001800 	.word	0x40001800
 800436c:	40001c00 	.word	0x40001c00
 8004370:	40002000 	.word	0x40002000

08004374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800439e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 030a 	bic.w	r3, r3, #10
 80043b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b087      	sub	sp, #28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0210 	bic.w	r2, r3, #16
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800440e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	f043 0307 	orr.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	431a      	orrs	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e05a      	b.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a21      	ldr	r2, [pc, #132]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450c:	d01d      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a17      	ldr	r2, [pc, #92]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a15      	ldr	r2, [pc, #84]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10c      	bne.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4313      	orrs	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40010000 	.word	0x40010000
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40010400 	.word	0x40010400
 8004598:	40014000 	.word	0x40014000
 800459c:	40001800 	.word	0x40001800

080045a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e042      	b.n	8004660 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd f89a 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	@ 0x24
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800460a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fc85 	bl	8004f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	@ 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb69 	bl	8004d9e <UART_Receive_IT>
      return;
 80046cc:	e25b      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80de 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d1 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81f2 	beq.w	8004b7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 faf4 	bl	8004d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_UART_IRQHandler+0x17a>
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04f      	beq.n	8004882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9fc 	bl	8004be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d141      	bne.n	800487a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004822:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800482e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800483a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1d9      	bne.n	80047f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a48 <HAL_UART_IRQHandler+0x3e0>)
 8004850:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f974 	bl	8002b44 <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f99e 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00a      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f99a 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e006      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f996 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800488e:	e175      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	bf00      	nop
    return;
 8004892:	e173      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 814f 	bne.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8148 	beq.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8141 	beq.w	8004b3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b40      	cmp	r3, #64	@ 0x40
 80048dc:	f040 80b6 	bne.w	8004a4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8145 	beq.w	8004b80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048fe:	429a      	cmp	r2, r3
 8004900:	f080 813e 	bcs.w	8004b80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800490a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004916:	f000 8088 	beq.w	8004a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800495e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1d9      	bne.n	800491a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800498a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800498e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800499c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e1      	bne.n	8004966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe f81d 	bl	8002a64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8c1 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a46:	e09b      	b.n	8004b80 <HAL_UART_IRQHandler+0x518>
 8004a48:	08004ca7 	.word	0x08004ca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 808e 	beq.w	8004b84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8089 	beq.w	8004b84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ace:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e3      	bne.n	8004aaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b14:	61fa      	str	r2, [r7, #28]
 8004b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	69b9      	ldr	r1, [r7, #24]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	617b      	str	r3, [r7, #20]
   return(result);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e3      	bne.n	8004af0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f847 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b3a:	e023      	b.n	8004b84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_UART_IRQHandler+0x4f4>
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8ba 	bl	8004cce <UART_Transmit_IT>
    return;
 8004b5a:	e014      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <HAL_UART_IRQHandler+0x51e>
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8fa 	bl	8004d6e <UART_EndTransmit_IT>
    return;
 8004b7a:	e004      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b7c:	bf00      	nop
 8004b7e:	e002      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b84:	bf00      	nop
  }
}
 8004b86:	37e8      	adds	r7, #232	@ 0xe8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b095      	sub	sp, #84	@ 0x54
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c08:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d119      	bne.n	8004c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c78:	61ba      	str	r2, [r7, #24]
 8004c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6979      	ldr	r1, [r7, #20]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	613b      	str	r3, [r7, #16]
   return(result);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c9a:	bf00      	nop
 8004c9c:	3754      	adds	r7, #84	@ 0x54
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff77 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b21      	cmp	r3, #33	@ 0x21
 8004ce0:	d13e      	bne.n	8004d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d114      	bne.n	8004d16 <UART_Transmit_IT+0x48>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]
 8004d14:	e008      	b.n	8004d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6211      	str	r1, [r2, #32]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4619      	mov	r1, r3
 8004d36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10f      	bne.n	8004d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fefc 	bl	8004b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b08c      	sub	sp, #48	@ 0x30
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b22      	cmp	r3, #34	@ 0x22
 8004db0:	f040 80ae 	bne.w	8004f10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbc:	d117      	bne.n	8004dee <UART_Receive_IT+0x50>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d113      	bne.n	8004dee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dec:	e026      	b.n	8004e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e00:	d007      	beq.n	8004e12 <UART_Receive_IT+0x74>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <UART_Receive_IT+0x82>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e008      	b.n	8004e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d15d      	bne.n	8004f0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0220 	bic.w	r2, r2, #32
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d135      	bne.n	8004f02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f023 0310 	bic.w	r3, r3, #16
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	623a      	str	r2, [r7, #32]
 8004ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d10a      	bne.n	8004ef4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fe64 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
 8004f00:	e002      	b.n	8004f08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe4c 	bl	8004ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e002      	b.n	8004f12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	@ 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f20:	b0c0      	sub	sp, #256	@ 0x100
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	ea40 0301 	orr.w	r3, r0, r1
 8004f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f74:	f021 010c 	bic.w	r1, r1, #12
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f82:	430b      	orrs	r3, r1
 8004f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	6999      	ldr	r1, [r3, #24]
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	ea40 0301 	orr.w	r3, r0, r1
 8004fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b8f      	ldr	r3, [pc, #572]	@ (80051e8 <UART_SetConfig+0x2cc>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d005      	beq.n	8004fbc <UART_SetConfig+0xa0>
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80051ec <UART_SetConfig+0x2d0>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d104      	bne.n	8004fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fe fe7a 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fc4:	e003      	b.n	8004fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc6:	f7fe fe61 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8004fca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd8:	f040 810c 	bne.w	80051f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	1891      	adds	r1, r2, r2
 8004ff4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ff6:	415b      	adcs	r3, r3
 8004ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ffe:	4621      	mov	r1, r4
 8005000:	eb12 0801 	adds.w	r8, r2, r1
 8005004:	4629      	mov	r1, r5
 8005006:	eb43 0901 	adc.w	r9, r3, r1
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800501a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501e:	4690      	mov	r8, r2
 8005020:	4699      	mov	r9, r3
 8005022:	4623      	mov	r3, r4
 8005024:	eb18 0303 	adds.w	r3, r8, r3
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800502c:	462b      	mov	r3, r5
 800502e:	eb49 0303 	adc.w	r3, r9, r3
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005042:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800504a:	460b      	mov	r3, r1
 800504c:	18db      	adds	r3, r3, r3
 800504e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005050:	4613      	mov	r3, r2
 8005052:	eb42 0303 	adc.w	r3, r2, r3
 8005056:	657b      	str	r3, [r7, #84]	@ 0x54
 8005058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800505c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005060:	f7fb fbfa 	bl	8000858 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4b61      	ldr	r3, [pc, #388]	@ (80051f0 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2302 	umull	r2, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	011c      	lsls	r4, r3, #4
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800507c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800508c:	415b      	adcs	r3, r3
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005094:	4641      	mov	r1, r8
 8005096:	eb12 0a01 	adds.w	sl, r2, r1
 800509a:	4649      	mov	r1, r9
 800509c:	eb43 0b01 	adc.w	fp, r3, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b4:	4692      	mov	sl, r2
 80050b6:	469b      	mov	fp, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	eb1a 0303 	adds.w	r3, sl, r3
 80050be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050c2:	464b      	mov	r3, r9
 80050c4:	eb4b 0303 	adc.w	r3, fp, r3
 80050c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050e0:	460b      	mov	r3, r1
 80050e2:	18db      	adds	r3, r3, r3
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e6:	4613      	mov	r3, r2
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050f6:	f7fb fbaf 	bl	8000858 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <UART_SetConfig+0x2d4>)
 8005102:	fba3 2301 	umull	r2, r3, r3, r1
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2264      	movs	r2, #100	@ 0x64
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005116:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <UART_SetConfig+0x2d4>)
 8005118:	fba3 2302 	umull	r2, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005124:	441c      	add	r4, r3
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005130:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005140:	415b      	adcs	r3, r3
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6339      	str	r1, [r7, #48]	@ 0x30
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005194:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051b2:	f7fb fb51 	bl	8000858 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <UART_SetConfig+0x2d4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	@ 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	3332      	adds	r3, #50	@ 0x32
 80051ce:	4a08      	ldr	r2, [pc, #32]	@ (80051f0 <UART_SetConfig+0x2d4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4422      	add	r2, r4
 80051e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e4:	e106      	b.n	80053f4 <UART_SetConfig+0x4d8>
 80051e6:	bf00      	nop
 80051e8:	40011000 	.word	0x40011000
 80051ec:	40011400 	.word	0x40011400
 80051f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	1891      	adds	r1, r2, r2
 800520c:	6239      	str	r1, [r7, #32]
 800520e:	415b      	adcs	r3, r3
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
 8005212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005216:	4641      	mov	r1, r8
 8005218:	1854      	adds	r4, r2, r1
 800521a:	4649      	mov	r1, r9
 800521c:	eb43 0501 	adc.w	r5, r3, r1
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800523c:	464b      	mov	r3, r9
 800523e:	eb45 0303 	adc.w	r3, r5, r3
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005262:	4629      	mov	r1, r5
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526c:	4621      	mov	r1, r4
 800526e:	008a      	lsls	r2, r1, #2
 8005270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005274:	f7fb faf0 	bl	8000858 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <UART_SetConfig+0x4e4>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011c      	lsls	r4, r3, #4
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	61b9      	str	r1, [r7, #24]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a8:	4641      	mov	r1, r8
 80052aa:	1851      	adds	r1, r2, r1
 80052ac:	6139      	str	r1, [r7, #16]
 80052ae:	4649      	mov	r1, r9
 80052b0:	414b      	adcs	r3, r1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c0:	4659      	mov	r1, fp
 80052c2:	00cb      	lsls	r3, r1, #3
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ca:	4651      	mov	r1, sl
 80052cc:	00ca      	lsls	r2, r1, #3
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	4642      	mov	r2, r8
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052dc:	464b      	mov	r3, r9
 80052de:	460a      	mov	r2, r1
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005300:	4649      	mov	r1, r9
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	4641      	mov	r1, r8
 8005306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530a:	4641      	mov	r1, r8
 800530c:	008a      	lsls	r2, r1, #2
 800530e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005312:	f7fb faa1 	bl	8000858 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4611      	mov	r1, r2
 800531c:	4b38      	ldr	r3, [pc, #224]	@ (8005400 <UART_SetConfig+0x4e4>)
 800531e:	fba3 2301 	umull	r2, r3, r3, r1
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2264      	movs	r2, #100	@ 0x64
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	1acb      	subs	r3, r1, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	@ 0x32
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <UART_SetConfig+0x4e4>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800533c:	441c      	add	r4, r3
 800533e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005342:	2200      	movs	r2, #0
 8005344:	673b      	str	r3, [r7, #112]	@ 0x70
 8005346:	677a      	str	r2, [r7, #116]	@ 0x74
 8005348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	415b      	adcs	r3, r3
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800538e:	464b      	mov	r3, r9
 8005390:	460a      	mov	r2, r1
 8005392:	eb42 0303 	adc.w	r3, r2, r3
 8005396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053b0:	4649      	mov	r1, r9
 80053b2:	008b      	lsls	r3, r1, #2
 80053b4:	4641      	mov	r1, r8
 80053b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ba:	4641      	mov	r1, r8
 80053bc:	008a      	lsls	r2, r1, #2
 80053be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053c2:	f7fb fa49 	bl	8000858 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <UART_SetConfig+0x4e4>)
 80053cc:	fba3 1302 	umull	r1, r3, r3, r2
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	2164      	movs	r1, #100	@ 0x64
 80053d4:	fb01 f303 	mul.w	r3, r1, r3
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	3332      	adds	r3, #50	@ 0x32
 80053de:	4a08      	ldr	r2, [pc, #32]	@ (8005400 <UART_SetConfig+0x4e4>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4422      	add	r2, r4
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005400:	51eb851f 	.word	0x51eb851f

08005404 <ver_PID_Init>:
int voltage_output,ver_voltage =0;
extern float target_speed;
extern float motor1_speed;
float pos_voltage = 0;
void ver_PID_Init()
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	ver_PID.kp = 45;
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <ver_PID_Init+0x20>)
 800540a:	4a07      	ldr	r2, [pc, #28]	@ (8005428 <ver_PID_Init+0x24>)
 800540c:	601a      	str	r2, [r3, #0]
	ver_PID.ki = 3;
 800540e:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <ver_PID_Init+0x20>)
 8005410:	4a06      	ldr	r2, [pc, #24]	@ (800542c <ver_PID_Init+0x28>)
 8005412:	605a      	str	r2, [r3, #4]
	ver_PID.kd = 0.05;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <ver_PID_Init+0x20>)
 8005416:	4a06      	ldr	r2, [pc, #24]	@ (8005430 <ver_PID_Init+0x2c>)
 8005418:	609a      	str	r2, [r3, #8]
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	200003d0 	.word	0x200003d0
 8005428:	42340000 	.word	0x42340000
 800542c:	40400000 	.word	0x40400000
 8005430:	3d4ccccd 	.word	0x3d4ccccd

08005434 <pos_PID_Init>:
void pos_PID_Init()
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
	pos_PID.kp = 0.1;
 8005438:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <pos_PID_Init+0x24>)
 800543a:	4a08      	ldr	r2, [pc, #32]	@ (800545c <pos_PID_Init+0x28>)
 800543c:	601a      	str	r2, [r3, #0]
	pos_PID.ki = 0;
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <pos_PID_Init+0x24>)
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
	pos_PID.kd = 0.;
 8005446:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <pos_PID_Init+0x24>)
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
}
 800544e:	bf00      	nop
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	200003dc 	.word	0x200003dc
 800545c:	3dcccccd 	.word	0x3dcccccd

08005460 <Double_Loop_Control>:

int Double_Loop_Control(float position, float target_position, float current_speed, float desired_speed, int pos_I_max,int ver_I_max)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	ed87 0a05 	vstr	s0, [r7, #20]
 800546a:	edc7 0a04 	vstr	s1, [r7, #16]
 800546e:	ed87 1a03 	vstr	s2, [r7, #12]
 8005472:	edc7 1a02 	vstr	s3, [r7, #8]
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	
    
int position_error = target_position - position;
 800547a:	ed97 7a04 	vldr	s14, [r7, #16]
 800547e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800548a:	ee17 3a90 	vmov	r3, s15
 800548e:	61fb      	str	r3, [r7, #28]

    // 角度死区处理
    if (position_error < ANGLE_DEADZONE && position_error > -ANGLE_DEADZONE) 
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	dc07      	bgt.n	80054a6 <Double_Loop_Control+0x46>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db04      	blt.n	80054a6 <Double_Loop_Control+0x46>
	{
        target_speed = 0; // 在死区内，目标速度置零
 800549c:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <Double_Loop_Control+0xf0>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e036      	b.n	8005514 <Double_Loop_Control+0xb4>
    } 
	else {
		
		// 位置环控制
		target_speed = Position_PID(position, target_position,pos_I_max);
 80054a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80054aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80054b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	ee17 1a90 	vmov	r1, s15
 80054bc:	ee17 0a10 	vmov	r0, s14
 80054c0:	f000 f84a 	bl	8005558 <Position_PID>
 80054c4:	ee07 0a90 	vmov	s15, r0
 80054c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054cc:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <Double_Loop_Control+0xf0>)
 80054ce:	edc3 7a00 	vstr	s15, [r3]
		/* 目标速度上限处理 */
		if (target_speed > desired_speed)// 目标速度的最大值
 80054d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <Double_Loop_Control+0xf0>)
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80054dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	d503      	bpl.n	80054ee <Double_Loop_Control+0x8e>
		{
			target_speed = desired_speed;
 80054e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005550 <Double_Loop_Control+0xf0>)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	e012      	b.n	8005514 <Double_Loop_Control+0xb4>
		}
		else if (target_speed < -desired_speed)
 80054ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80054f2:	eeb1 7a67 	vneg.f32	s14, s15
 80054f6:	4b16      	ldr	r3, [pc, #88]	@ (8005550 <Double_Loop_Control+0xf0>)
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	dd06      	ble.n	8005514 <Double_Loop_Control+0xb4>
		{
			target_speed = -desired_speed;
 8005506:	edd7 7a02 	vldr	s15, [r7, #8]
 800550a:	eef1 7a67 	vneg.f32	s15, s15
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <Double_Loop_Control+0xf0>)
 8005510:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	

    // 速度环控制
    voltage_output = Incremental_PID(current_speed, target_speed,ver_I_max);
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <Double_Loop_Control+0xf0>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	ee07 3a10 	vmov	s14, r3
 8005520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005524:	eeb0 1a47 	vmov.f32	s2, s14
 8005528:	eef0 0a67 	vmov.f32	s1, s15
 800552c:	ed97 0a03 	vldr	s0, [r7, #12]
 8005530:	f000 f898 	bl	8005664 <Incremental_PID>
 8005534:	eef0 7a40 	vmov.f32	s15, s0
 8005538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800553c:	ee17 2a90 	vmov	r2, s15
 8005540:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <Double_Loop_Control+0xf4>)
 8005542:	601a      	str	r2, [r3, #0]

	
    return voltage_output;
 8005544:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <Double_Loop_Control+0xf4>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000264 	.word	0x20000264
 8005554:	200003f0 	.word	0x200003f0

08005558 <Position_PID>:
*	e(k-1)代表上一次的偏差  
*	∑e(k)代表e(k)以及之前的偏差的累积和;其中k为1,2,,k;
*	pwm代表输出
**************************************************************************/
int Position_PID (int position,int target,int I_max)
{   
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
	static float Integral_bias,Last_Bias;
	pos_Bias=target-position;                                  //计算偏差
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005572:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <Position_PID+0xf8>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
	Integral_bias+=pos_Bias;	                                 //求出偏差的积分
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <Position_PID+0xfc>)
 800557a:	ed93 7a00 	vldr	s14, [r3]
 800557e:	4b34      	ldr	r3, [pc, #208]	@ (8005650 <Position_PID+0xf8>)
 8005580:	edd3 7a00 	vldr	s15, [r3]
 8005584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005588:	4b32      	ldr	r3, [pc, #200]	@ (8005654 <Position_PID+0xfc>)
 800558a:	edc3 7a00 	vstr	s15, [r3]
	if(Integral_bias>I_max)Integral_bias=I_max;				//对积分 限幅
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005598:	4b2e      	ldr	r3, [pc, #184]	@ (8005654 <Position_PID+0xfc>)
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	d507      	bpl.n	80055b8 <Position_PID+0x60>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b2:	4b28      	ldr	r3, [pc, #160]	@ (8005654 <Position_PID+0xfc>)
 80055b4:	edc3 7a00 	vstr	s15, [r3]
	if(Integral_bias<-I_max)Integral_bias=-I_max;		//积分限幅 防止到达目标位置后过冲
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	425b      	negs	r3, r3
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055c4:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <Position_PID+0xfc>)
 80055c6:	edd3 7a00 	vldr	s15, [r3]
 80055ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d2:	dd08      	ble.n	80055e6 <Position_PID+0x8e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	425b      	negs	r3, r3
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <Position_PID+0xfc>)
 80055e2:	edc3 7a00 	vstr	s15, [r3]
	
	Last_Bias=pos_Bias;                                       //保存上一次偏差 
 80055e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <Position_PID+0xf8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <Position_PID+0x100>)
 80055ec:	6013      	str	r3, [r2, #0]
	// if(pos_Bias < 10)
	// {
	// 	Pwm = 0;
	// }
	pos_voltage = pos_PID.kp*pos_Bias+pos_PID.ki*Integral_bias+pos_PID.kd*(pos_Bias-Last_Bias);       //位置式PID控制器
 80055ee:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <Position_PID+0x104>)
 80055f0:	ed93 7a00 	vldr	s14, [r3]
 80055f4:	4b16      	ldr	r3, [pc, #88]	@ (8005650 <Position_PID+0xf8>)
 80055f6:	edd3 7a00 	vldr	s15, [r3]
 80055fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055fe:	4b17      	ldr	r3, [pc, #92]	@ (800565c <Position_PID+0x104>)
 8005600:	edd3 6a01 	vldr	s13, [r3, #4]
 8005604:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <Position_PID+0xfc>)
 8005606:	edd3 7a00 	vldr	s15, [r3]
 800560a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800560e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005612:	4b12      	ldr	r3, [pc, #72]	@ (800565c <Position_PID+0x104>)
 8005614:	edd3 6a02 	vldr	s13, [r3, #8]
 8005618:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <Position_PID+0xf8>)
 800561a:	ed93 6a00 	vldr	s12, [r3]
 800561e:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <Position_PID+0x100>)
 8005620:	edd3 7a00 	vldr	s15, [r3]
 8005624:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005630:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <Position_PID+0x108>)
 8005632:	edc3 7a00 	vstr	s15, [r3]
	return pos_voltage;                                           //增量输出
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <Position_PID+0x108>)
 8005638:	edd3 7a00 	vldr	s15, [r3]
 800563c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005640:	ee17 3a90 	vmov	r3, s15
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	200003e8 	.word	0x200003e8
 8005654:	200003fc 	.word	0x200003fc
 8005658:	20000400 	.word	0x20000400
 800565c:	200003dc 	.word	0x200003dc
 8005660:	200003f8 	.word	0x200003f8

08005664 <Incremental_PID>:
//     last_filt_velocity = filt_velocity;

//     return  ver_PID.kp*filt_velocity + ver_PID.ki*velocity_sum + ver_PID.kd * (filt_velocity - last_filt_velocity);
// }
float Incremental_PID (float Encoder,float Target,float I_max)
{ 	
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	ed87 0a03 	vstr	s0, [r7, #12]
 800566e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005672:	ed87 1a01 	vstr	s2, [r7, #4]
		
	static float last_bias,Bias_sum,P_out,I_out,d_out;
	last_bias = ver_Bias;
 8005676:	4b3e      	ldr	r3, [pc, #248]	@ (8005770 <Incremental_PID+0x10c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3e      	ldr	r2, [pc, #248]	@ (8005774 <Incremental_PID+0x110>)
 800567c:	6013      	str	r3, [r2, #0]
	ver_Bias=Target-Encoder;                //计算偏差
 800567e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005682:	edd7 7a03 	vldr	s15, [r7, #12]
 8005686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800568a:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <Incremental_PID+0x10c>)
 800568c:	edc3 7a00 	vstr	s15, [r3]
	
	P_out = ver_PID.kp *ver_Bias;
 8005690:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <Incremental_PID+0x114>)
 8005692:	ed93 7a00 	vldr	s14, [r3]
 8005696:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <Incremental_PID+0x10c>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <Incremental_PID+0x118>)
 80056a2:	edc3 7a00 	vstr	s15, [r3]
	I_out += ver_PID.ki *ver_Bias;
 80056a6:	4b34      	ldr	r3, [pc, #208]	@ (8005778 <Incremental_PID+0x114>)
 80056a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80056ac:	4b30      	ldr	r3, [pc, #192]	@ (8005770 <Incremental_PID+0x10c>)
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056b6:	4b32      	ldr	r3, [pc, #200]	@ (8005780 <Incremental_PID+0x11c>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005780 <Incremental_PID+0x11c>)
 80056c2:	edc3 7a00 	vstr	s15, [r3]
	LIMIT_MIN_MAX(I_out,-I_max,I_max);
 80056c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056ca:	eeb1 7a67 	vneg.f32	s14, s15
 80056ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <Incremental_PID+0x11c>)
 80056d0:	edd3 7a00 	vldr	s15, [r3]
 80056d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056dc:	db04      	blt.n	80056e8 <Incremental_PID+0x84>
 80056de:	edd7 7a01 	vldr	s15, [r7, #4]
 80056e2:	eef1 7a67 	vneg.f32	s15, s15
 80056e6:	e00f      	b.n	8005708 <Incremental_PID+0xa4>
 80056e8:	4b25      	ldr	r3, [pc, #148]	@ (8005780 <Incremental_PID+0x11c>)
 80056ea:	edd3 7a00 	vldr	s15, [r3]
 80056ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80056f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fa:	d802      	bhi.n	8005702 <Incremental_PID+0x9e>
 80056fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005700:	e002      	b.n	8005708 <Incremental_PID+0xa4>
 8005702:	4b1f      	ldr	r3, [pc, #124]	@ (8005780 <Incremental_PID+0x11c>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <Incremental_PID+0x11c>)
 800570a:	edc3 7a00 	vstr	s15, [r3]
	d_out = ver_PID.kd *(ver_Bias - last_bias);
 800570e:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <Incremental_PID+0x114>)
 8005710:	ed93 7a02 	vldr	s14, [r3, #8]
 8005714:	4b16      	ldr	r3, [pc, #88]	@ (8005770 <Incremental_PID+0x10c>)
 8005716:	edd3 6a00 	vldr	s13, [r3]
 800571a:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <Incremental_PID+0x110>)
 800571c:	edd3 7a00 	vldr	s15, [r3]
 8005720:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005728:	4b16      	ldr	r3, [pc, #88]	@ (8005784 <Incremental_PID+0x120>)
 800572a:	edc3 7a00 	vstr	s15, [r3]

//	ver_voltage = ver_PID.kp*ver_Bias+ver_PID.ki*Bias_sum +ver_PID.kd*(ver_Bias - Last_bias);   //增量式PI控制器
	ver_voltage = P_out + I_out + d_out;
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <Incremental_PID+0x118>)
 8005730:	ed93 7a00 	vldr	s14, [r3]
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <Incremental_PID+0x11c>)
 8005736:	edd3 7a00 	vldr	s15, [r3]
 800573a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800573e:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <Incremental_PID+0x120>)
 8005740:	edd3 7a00 	vldr	s15, [r3]
 8005744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800574c:	ee17 2a90 	vmov	r2, s15
 8005750:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <Incremental_PID+0x124>)
 8005752:	601a      	str	r2, [r3, #0]
	return ver_voltage;                         //增量输出
 8005754:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <Incremental_PID+0x124>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005760:	eeb0 0a67 	vmov.f32	s0, s15
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	200003ec 	.word	0x200003ec
 8005774:	20000404 	.word	0x20000404
 8005778:	200003d0 	.word	0x200003d0
 800577c:	20000408 	.word	0x20000408
 8005780:	2000040c 	.word	0x2000040c
 8005784:	20000410 	.word	0x20000410
 8005788:	200003f4 	.word	0x200003f4

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	@ (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	@ (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	@ (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	@ (80057e0 <__libc_init_array+0x44>)
 80057b0:	f000 f818 	bl	80057e4 <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08005824 	.word	0x08005824
 80057d8:	08005824 	.word	0x08005824
 80057dc:	08005824 	.word	0x08005824
 80057e0:	08005828 	.word	0x08005828

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr

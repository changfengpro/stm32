
Stepper motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f24  08003f24  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f24  08003f24  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f24  08003f24  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000006c  08003f98  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003f98  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b00  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a42  00000000  00000000  00027bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000565  00000000  00000000  00029d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016741  00000000  00000000  0002a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ca3  00000000  00000000  000409ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000804de  00000000  00000000  0004a691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022bc  00000000  00000000  000cab70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000cce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da8 	.word	0x08003da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003da8 	.word	0x08003da8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2uiz>:
 80008f8:	004a      	lsls	r2, r1, #1
 80008fa:	d211      	bcs.n	8000920 <__aeabi_d2uiz+0x28>
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000900:	d211      	bcs.n	8000926 <__aeabi_d2uiz+0x2e>
 8000902:	d50d      	bpl.n	8000920 <__aeabi_d2uiz+0x28>
 8000904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d40e      	bmi.n	800092c <__aeabi_d2uiz+0x34>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	4770      	bx	lr
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	4770      	bx	lr
 8000926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092a:	d102      	bne.n	8000932 <__aeabi_d2uiz+0x3a>
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	4770      	bx	lr
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	4770      	bx	lr

08000938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_DMA_Init+0x48>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <MX_DMA_Init+0x48>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_DMA_Init+0x48>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200e      	movs	r0, #14
 800095c:	f000 fde5 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000960:	200e      	movs	r0, #14
 8000962:	f000 fdfe 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200f      	movs	r0, #15
 800096c:	f000 fddd 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000970:	200f      	movs	r0, #15
 8000972:	f000 fdf6 	bl	8001562 <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_GPIO_Init+0xd0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a2d      	ldr	r2, [pc, #180]	; (8000a54 <MX_GPIO_Init+0xd0>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a00:	f001 f962 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a0c:	f001 f95c 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a2a:	f000 ffc9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a2e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a48:	f000 ffba 	bl	80019c0 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fc04 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f85a 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f7ff ff8a 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a70:	f7ff ff62 	bl	8000938 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a74:	f000 fb02 	bl	800107c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 8);
 8000a78:	2208      	movs	r2, #8
 8000a7a:	491f      	ldr	r1, [pc, #124]	; (8000af8 <main+0x98>)
 8000a7c:	481f      	ldr	r0, [pc, #124]	; (8000afc <main+0x9c>)
 8000a7e:	f001 fdea 	bl	8002656 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while(1)
{					read_angle= (global_i/64)*5.625;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <main+0xa0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	099b      	lsrs	r3, r3, #6
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fca9 	bl	80003e0 <__aeabi_ui2d>
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <main+0xa4>)
 8000a94:	f7ff fd1e 	bl	80004d4 <__aeabi_dmul>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f7ff ff2a 	bl	80008f8 <__aeabi_d2uiz>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <main+0xa8>)
 8000aa8:	6013      	str	r3, [r2, #0]
			    HAL_UART_Transmit_IT(&huart1, TxData, 8);
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4917      	ldr	r1, [pc, #92]	; (8000b0c <main+0xac>)
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <main+0x9c>)
 8000ab0:	f001 fd9c 	bl	80025ec <HAL_UART_Transmit_IT>
			    HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f000 fc3c 	bl	8001334 <HAL_Delay>
			    if(read_angle != angle)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <main+0xa8>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <main+0xb0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d00e      	beq.n	8000ae6 <main+0x86>
			    {Step_Motor_Start(angle, direction, speed);
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <main+0xb0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <main+0xb4>)
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <main+0xb8>)
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9b0 	bl	8000e3c <Step_Motor_Start>
			    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);}
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	480e      	ldr	r0, [pc, #56]	; (8000b1c <main+0xbc>)
 8000ae2:	f001 f909 	bl	8001cf8 <HAL_GPIO_TogglePin>
			    if(read_angle == angle)
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <main+0xa8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <main+0xb0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d1c7      	bne.n	8000a82 <main+0x22>
			    		{
			    	Step_Motor_Stop();
 8000af2:	f000 f9ed 	bl	8000ed0 <Step_Motor_Stop>
{					read_angle= (global_i/64)*5.625;
 8000af6:	e7c4      	b.n	8000a82 <main+0x22>
 8000af8:	20000088 	.word	0x20000088
 8000afc:	200000ac 	.word	0x200000ac
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	40168000 	.word	0x40168000
 8000b08:	200000a0 	.word	0x200000a0
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000094 	.word	0x20000094
 8000b14:	20000098 	.word	0x20000098
 8000b18:	20000099 	.word	0x20000099
 8000b1c:	40011000 	.word	0x40011000

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b090      	sub	sp, #64	; 0x40
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	2228      	movs	r2, #40	; 0x28
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fb2a 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f8df 	bl	8001d2c <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b74:	f000 f9c8 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fb4c 	bl	8002230 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b9e:	f000 f9b3 	bl	8000f08 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3740      	adds	r7, #64	; 0x40
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_UARTEx_RxEventCallback>:
	uint32_t t=t_ms*3127;
	while(t--);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
	  		if(huart == &huart1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_UARTEx_RxEventCallback+0x38>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d10c      	bne.n	8000bda <HAL_UARTEx_RxEventCallback+0x2e>
	  		{
	  			HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 8);
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4909      	ldr	r1, [pc, #36]	; (8000be8 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <HAL_UARTEx_RxEventCallback+0x38>)
 8000bc6:	f001 fd46 	bl	8002656 <HAL_UARTEx_ReceiveToIdle_IT>
	  			sscanf(RxData,"%d%d%d%d",&angle,&direction,&speed);
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_UARTEx_RxEventCallback+0x40>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bd2:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000bd6:	f002 faab 	bl	8003130 <siscanf>

	  		}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	20000088 	.word	0x20000088
 8000bec:	20000099 	.word	0x20000099
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	08003dc0 	.word	0x08003dc0

08000bfc <MOTOR_CONTROL>:


void MOTOR_CONTROL(uint8_t direction,uint8_t speed)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
	static uint8_t step=0;
	if(direction == 1)//反转
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10c      	bne.n	8000c2c <MOTOR_CONTROL+0x30>
	{
		if(step == 0)step=8;
 8000c12:	4b88      	ldr	r3, [pc, #544]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <MOTOR_CONTROL+0x24>
 8000c1a:	4b86      	ldr	r3, [pc, #536]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	701a      	strb	r2, [r3, #0]
		step--;
 8000c20:	4b84      	ldr	r3, [pc, #528]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b82      	ldr	r3, [pc, #520]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c2a:	701a      	strb	r2, [r3, #0]
	}

	if(step == 0)//步序1
 8000c2c:	4b81      	ldr	r3, [pc, #516]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d119      	bne.n	8000c68 <MOTOR_CONTROL+0x6c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);//1
 8000c34:	2201      	movs	r2, #1
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	487f      	ldr	r0, [pc, #508]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c3a:	f001 f845 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);//0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	487d      	ldr	r0, [pc, #500]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c44:	f001 f840 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);//0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4e:	487a      	ldr	r0, [pc, #488]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c50:	f001 f83a 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);//0
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5a:	4877      	ldr	r0, [pc, #476]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c5c:	f001 f834 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fb66 	bl	8001334 <HAL_Delay>
	}
	if(step == 1)//步序2
 8000c68:	4b72      	ldr	r3, [pc, #456]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d119      	bne.n	8000ca4 <MOTOR_CONTROL+0xa8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);//1
 8000c70:	2201      	movs	r2, #1
 8000c72:	2140      	movs	r1, #64	; 0x40
 8000c74:	4870      	ldr	r0, [pc, #448]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c76:	f001 f827 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);//1
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	486e      	ldr	r0, [pc, #440]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c80:	f001 f822 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);//0
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8a:	486b      	ldr	r0, [pc, #428]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c8c:	f001 f81c 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);//0
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c96:	4868      	ldr	r0, [pc, #416]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000c98:	f001 f816 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fb48 	bl	8001334 <HAL_Delay>
	}
	if(step == 2)//步序3
 8000ca4:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d119      	bne.n	8000ce0 <MOTOR_CONTROL+0xe4>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//0
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4861      	ldr	r0, [pc, #388]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cb2:	f001 f809 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);//1
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	485f      	ldr	r0, [pc, #380]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cbc:	f001 f804 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);//0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc6:	485c      	ldr	r0, [pc, #368]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cc8:	f000 fffe 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);//0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4859      	ldr	r0, [pc, #356]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cd4:	f000 fff8 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fb2a 	bl	8001334 <HAL_Delay>
	}
	if(step == 3)//步序4
 8000ce0:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d119      	bne.n	8000d1c <MOTOR_CONTROL+0x120>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4852      	ldr	r0, [pc, #328]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cee:	f000 ffeb 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);//1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4850      	ldr	r0, [pc, #320]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000cf8:	f000 ffe6 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);//1
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	484d      	ldr	r0, [pc, #308]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d04:	f000 ffe0 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);//0
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0e:	484a      	ldr	r0, [pc, #296]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d10:	f000 ffda 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fb0c 	bl	8001334 <HAL_Delay>

	}
	if(step == 4)//步序5
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d119      	bne.n	8000d58 <MOTOR_CONTROL+0x15c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//0
 8000d24:	2200      	movs	r2, #0
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	4843      	ldr	r0, [pc, #268]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d2a:	f000 ffcd 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);//0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	4841      	ldr	r0, [pc, #260]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d34:	f000 ffc8 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);//1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	483e      	ldr	r0, [pc, #248]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d40:	f000 ffc2 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);//0
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4a:	483b      	ldr	r0, [pc, #236]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d4c:	f000 ffbc 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 faee 	bl	8001334 <HAL_Delay>
	}
	if(step == 5)//步序6
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d119      	bne.n	8000d94 <MOTOR_CONTROL+0x198>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//0
 8000d60:	2200      	movs	r2, #0
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	4834      	ldr	r0, [pc, #208]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d66:	f000 ffaf 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);//0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	4832      	ldr	r0, [pc, #200]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d70:	f000 ffaa 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);//1
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7a:	482f      	ldr	r0, [pc, #188]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d7c:	f000 ffa4 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);//1
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d86:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000d88:	f000 ff9e 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fad0 	bl	8001334 <HAL_Delay>
	}
	if(step == 6)//步序7
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d119      	bne.n	8000dd0 <MOTOR_CONTROL+0x1d4>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000da2:	f000 ff91 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);//0
 8000da6:	2200      	movs	r2, #0
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	4823      	ldr	r0, [pc, #140]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000dac:	f000 ff8c 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);//0
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db6:	4820      	ldr	r0, [pc, #128]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000db8:	f000 ff86 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);//1
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	481d      	ldr	r0, [pc, #116]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000dc4:	f000 ff80 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fab2 	bl	8001334 <HAL_Delay>
	}
	if(step == 7)//步序8
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d119      	bne.n	8000e0c <MOTOR_CONTROL+0x210>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);//1
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000dde:	f000 ff73 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);//0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000de8:	f000 ff6e 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);//0
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000df4:	f000 ff68 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);//1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <MOTOR_CONTROL+0x23c>)
 8000e00:	f000 ff62 	bl	8001cc8 <HAL_GPIO_WritePin>
		HAL_Delay(speed);
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fa94 	bl	8001334 <HAL_Delay>
	}
	if(direction == 0)//正转
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <MOTOR_CONTROL+0x230>
	{
		step++;if(step == 8)step=0;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d102      	bne.n	8000e2c <MOTOR_CONTROL+0x230>
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <MOTOR_CONTROL+0x238>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	40010c00 	.word	0x40010c00

08000e3c <Step_Motor_Start>:

void Step_Motor_Start(uint16_t angle, uint8_t direction,uint8_t speed)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	717b      	strb	r3, [r7, #5]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	713b      	strb	r3, [r7, #4]
	 pulse = (uint32_t)((double)((uint32_t)angle/5.625)*64);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fac5 	bl	80003e0 <__aeabi_ui2d>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <Step_Motor_Start+0x84>)
 8000e5c:	f7ff fc64 	bl	8000728 <__aeabi_ddiv>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <Step_Motor_Start+0x88>)
 8000e6e:	f7ff fb31 	bl	80004d4 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fd3d 	bl	80008f8 <__aeabi_d2uiz>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <Step_Motor_Start+0x8c>)
 8000e82:	6013      	str	r3, [r2, #0]
	for(global_i=0; global_i<pulse; global_i++){
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <Step_Motor_Start+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e00e      	b.n	8000eaa <Step_Motor_Start+0x6e>
		MOTOR_CONTROL(direction,speed);
 8000e8c:	793a      	ldrb	r2, [r7, #4]
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff feb2 	bl	8000bfc <MOTOR_CONTROL>
		HAL_Delay(speed);//延时2ms,修改延时可改变电机转动�?�度。即修改了脉冲频�?
 8000e98:	793b      	ldrb	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fa4a 	bl	8001334 <HAL_Delay>
	for(global_i=0; global_i<pulse; global_i++){
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <Step_Motor_Start+0x90>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <Step_Motor_Start+0x90>)
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <Step_Motor_Start+0x90>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <Step_Motor_Start+0x8c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3ea      	bcc.n	8000e8c <Step_Motor_Start+0x50>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40168000 	.word	0x40168000
 8000ec4:	40500000 	.word	0x40500000
 8000ec8:	2000009c 	.word	0x2000009c
 8000ecc:	2000000c 	.word	0x2000000c

08000ed0 <Step_Motor_Stop>:

void Step_Motor_Stop(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <Step_Motor_Stop+0x34>)
 8000eda:	f000 fef5 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <Step_Motor_Stop+0x34>)
 8000ee4:	f000 fef0 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <Step_Motor_Stop+0x34>)
 8000ef0:	f000 feea 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <Step_Motor_Stop+0x34>)
 8000efc:	f000 fee4 	bl	8001cc8 <HAL_GPIO_WritePin>

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_MspInit+0x60>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_MspInit+0x60>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 f99d 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Channel4_IRQHandler+0x10>)
 8000fce:	f000 fbf1 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000138 	.word	0x20000138

08000fdc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel5_IRQHandler+0x10>)
 8000fe2:	f000 fbe7 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000f4 	.word	0x200000f4

08000ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USART1_IRQHandler+0x10>)
 8000ff6:	f001 fb8b 	bl	8002710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000ac 	.word	0x200000ac

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f002 f8b0 	bl	8003198 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005000 	.word	0x20005000
 8001064:	00000400 	.word	0x00000400
 8001068:	200000a8 	.word	0x200000a8
 800106c:	200002c8 	.word	0x200002c8

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART1_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010b4:	f001 fa4a 	bl	800254c <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f7ff ff23 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000ac 	.word	0x200000ac
 80010cc:	40013800 	.word	0x40013800

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a47      	ldr	r2, [pc, #284]	; (8001208 <HAL_UART_MspInit+0x138>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	f040 8086 	bne.w	80011fe <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_UART_MspInit+0x13c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_UART_MspInit+0x13c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6193      	str	r3, [r2, #24]
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_UART_MspInit+0x13c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_UART_MspInit+0x13c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_UART_MspInit+0x13c>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6193      	str	r3, [r2, #24]
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_UART_MspInit+0x13c>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <HAL_UART_MspInit+0x140>)
 8001138:	f000 fc42 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	482f      	ldr	r0, [pc, #188]	; (8001210 <HAL_UART_MspInit+0x140>)
 8001152:	f000 fc35 	bl	80019c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001158:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <HAL_UART_MspInit+0x148>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_UART_MspInit+0x144>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_UART_MspInit+0x144>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_UART_MspInit+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <HAL_UART_MspInit+0x144>)
 8001188:	f000 fa06 	bl	8001598 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001192:	f7ff feb9 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_UART_MspInit+0x144>)
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_UART_MspInit+0x144>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_UART_MspInit+0x150>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011d4:	f000 f9e0 	bl	8001598 <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80011de:	f7ff fe93 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <HAL_UART_MspInit+0x14c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2025      	movs	r0, #37	; 0x25
 80011f4:	f000 f999 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011f8:	2025      	movs	r0, #37	; 0x25
 80011fa:	f000 f9b2 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800
 8001214:	200000f4 	.word	0x200000f4
 8001218:	40020058 	.word	0x40020058
 800121c:	20000138 	.word	0x20000138
 8001220:	40020044 	.word	0x40020044

08001224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001224:	f7ff ff24 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800122a:	490c      	ldr	r1, [pc, #48]	; (800125c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001240:	4c09      	ldr	r4, [pc, #36]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f001 ffa9 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001252:	f7ff fc05 	bl	8000a60 <main>
  bx lr
 8001256:	4770      	bx	lr
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001260:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 8001264:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001268:	200002c8 	.word	0x200002c8

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x28>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f947 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fe42 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f95f 	bl	800157e <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f927 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000010 	.word	0x20000010
 80012f4:	20000018 	.word	0x20000018
 80012f8:	20000014 	.word	0x20000014

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x1c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <HAL_IncTick+0x20>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000018 	.word	0x20000018
 800131c:	2000017c 	.word	0x2000017c

08001320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	2000017c 	.word	0x2000017c

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fff0 	bl	8001320 <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffe0 	bl	8001320 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000018 	.word	0x20000018

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff2d 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff42 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff35 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e043      	b.n	8001636 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_DMA_Init+0xa8>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_DMA_Init+0xac>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_DMA_Init+0xb0>)
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	bffdfff8 	.word	0xbffdfff8
 8001644:	cccccccd 	.word	0xcccccccd
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e020      	b.n	80016b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020e 	bic.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d005      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e051      	b.n	800178c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020e 	bic.w	r2, r2, #14
 80016f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_DMA_Abort_IT+0xd4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d029      	beq.n	8001766 <HAL_DMA_Abort_IT+0xa2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_DMA_Abort_IT+0xd8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d022      	beq.n	8001762 <HAL_DMA_Abort_IT+0x9e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <HAL_DMA_Abort_IT+0xdc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01a      	beq.n	800175c <HAL_DMA_Abort_IT+0x98>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_DMA_Abort_IT+0xe0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d012      	beq.n	8001756 <HAL_DMA_Abort_IT+0x92>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_DMA_Abort_IT+0xe4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00a      	beq.n	8001750 <HAL_DMA_Abort_IT+0x8c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_DMA_Abort_IT+0xe8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_DMA_Abort_IT+0x86>
 8001744:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001748:	e00e      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	e00b      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	e008      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	e005      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	e002      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001762:	2310      	movs	r3, #16
 8001764:	e000      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001766:	2301      	movs	r3, #1
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_DMA_Abort_IT+0xec>)
 800176a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
    } 
  }
  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020008 	.word	0x40020008
 800179c:	4002001c 	.word	0x4002001c
 80017a0:	40020030 	.word	0x40020030
 80017a4:	40020044 	.word	0x40020044
 80017a8:	40020058 	.word	0x40020058
 80017ac:	4002006c 	.word	0x4002006c
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2204      	movs	r2, #4
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d04f      	beq.n	800187c <HAL_DMA_IRQHandler+0xc8>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d04a      	beq.n	800187c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_DMA_IRQHandler+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d029      	beq.n	8001862 <HAL_DMA_IRQHandler+0xae>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0xaa>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a63      	ldr	r2, [pc, #396]	; (80019ac <HAL_DMA_IRQHandler+0x1f8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01a      	beq.n	8001858 <HAL_DMA_IRQHandler+0xa4>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a62      	ldr	r2, [pc, #392]	; (80019b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0x9e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <HAL_DMA_IRQHandler+0x200>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00a      	beq.n	800184c <HAL_DMA_IRQHandler+0x98>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5f      	ldr	r2, [pc, #380]	; (80019b8 <HAL_DMA_IRQHandler+0x204>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_DMA_IRQHandler+0x92>
 8001840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001844:	e00e      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 8001846:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800184a:	e00b      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 800184c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001850:	e008      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 8001852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001856:	e005      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 8001858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185c:	e002      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	e000      	b.n	8001864 <HAL_DMA_IRQHandler+0xb0>
 8001862:	2304      	movs	r3, #4
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_DMA_IRQHandler+0x208>)
 8001866:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8094 	beq.w	800199a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800187a:	e08e      	b.n	800199a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2202      	movs	r2, #2
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d056      	beq.n	800193a <HAL_DMA_IRQHandler+0x186>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d051      	beq.n	800193a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10b      	bne.n	80018bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 020a 	bic.w	r2, r2, #10
 80018b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a38      	ldr	r2, [pc, #224]	; (80019a4 <HAL_DMA_IRQHandler+0x1f0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d029      	beq.n	800191a <HAL_DMA_IRQHandler+0x166>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_DMA_IRQHandler+0x1f4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d022      	beq.n	8001916 <HAL_DMA_IRQHandler+0x162>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a35      	ldr	r2, [pc, #212]	; (80019ac <HAL_DMA_IRQHandler+0x1f8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01a      	beq.n	8001910 <HAL_DMA_IRQHandler+0x15c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <HAL_DMA_IRQHandler+0x1fc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d012      	beq.n	800190a <HAL_DMA_IRQHandler+0x156>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <HAL_DMA_IRQHandler+0x200>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00a      	beq.n	8001904 <HAL_DMA_IRQHandler+0x150>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_DMA_IRQHandler+0x204>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <HAL_DMA_IRQHandler+0x14a>
 80018f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018fc:	e00e      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 80018fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001902:	e00b      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 8001904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001908:	e008      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	e005      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	e002      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 8001916:	2320      	movs	r3, #32
 8001918:	e000      	b.n	800191c <HAL_DMA_IRQHandler+0x168>
 800191a:	2302      	movs	r3, #2
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_DMA_IRQHandler+0x208>)
 800191e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	d034      	beq.n	800199a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001938:	e02f      	b.n	800199a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2208      	movs	r2, #8
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <HAL_DMA_IRQHandler+0x1e8>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020e 	bic.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
    }
  }
  return;
 800199a:	bf00      	nop
 800199c:	bf00      	nop
}
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020008 	.word	0x40020008
 80019a8:	4002001c 	.word	0x4002001c
 80019ac:	40020030 	.word	0x40020030
 80019b0:	40020044 	.word	0x40020044
 80019b4:	40020058 	.word	0x40020058
 80019b8:	4002006c 	.word	0x4002006c
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e169      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8158 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a9a      	ldr	r2, [pc, #616]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 80019fc:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d875      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a02:	4a98      	ldr	r2, [pc, #608]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d058      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a08:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a0e:	4a96      	ldr	r2, [pc, #600]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d052      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a14:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d869      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04c      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a20:	4a92      	ldr	r2, [pc, #584]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d863      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a26:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d046      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a2c:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d85d      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d82a      	bhi.n	8001a8c <HAL_GPIO_Init+0xcc>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d859      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_GPIO_Init+0x80>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001aa7 	.word	0x08001aa7
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001aef 	.word	0x08001aef
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_GPIO_Init+0x2b4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e029      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e024      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01f      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e01a      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e013      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e009      	b.n	8001af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          break;
 8001aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d801      	bhi.n	8001afa <HAL_GPIO_Init+0x13a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_Init+0x13e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d802      	bhi.n	8001b0c <HAL_GPIO_Init+0x14c>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x152>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	210f      	movs	r1, #15
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80b1 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	; (8001c80 <HAL_GPIO_Init+0x2c0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <HAL_GPIO_Init+0x2c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1e0>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbe:	492f      	ldr	r1, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	492c      	ldr	r1, [pc, #176]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4928      	ldr	r1, [pc, #160]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	491e      	ldr	r1, [pc, #120]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4918      	ldr	r1, [pc, #96]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4914      	ldr	r1, [pc, #80]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e021      	b.n	8001ca2 <HAL_GPIO_Init+0x2e2>
 8001c5e:	bf00      	nop
 8001c60:	10320000 	.word	0x10320000
 8001c64:	10310000 	.word	0x10310000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10210000 	.word	0x10210000
 8001c70:	10120000 	.word	0x10120000
 8001c74:	10110000 	.word	0x10110000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010800 	.word	0x40010800
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40011400 	.word	0x40011400
 8001c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4909      	ldr	r1, [pc, #36]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae8e 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	; 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e272      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d00c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d58:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d112      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
 8001d64:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x12c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d168      	bne.n	8001e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e24c      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x76>
 8001d94:	4b80      	ldr	r3, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7f      	ldr	r2, [pc, #508]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e02e      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0xbc>
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a71      	ldr	r2, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001de8:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a67      	ldr	r2, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa8a 	bl	8001320 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fa86 	bl	8001320 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e200      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe4>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa76 	bl	8001320 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fa72 	bl	8001320 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1ec      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x10c>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1c0      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4939      	ldr	r1, [pc, #228]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fa2b 	bl	8001320 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fa27 	bl	8001320 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1a1      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4927      	ldr	r1, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fa0a 	bl	8001320 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fa06 	bl	8001320 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e180      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03a      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d019      	beq.n	8001f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff f9ea 	bl	8001320 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff f9e6 	bl	8001320 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e160      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 face 	bl	8002510 <RCC_Delay>
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f9d0 	bl	8001320 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f9cc 	bl	8001320 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d908      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e146      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	42420000 	.word	0x42420000
 8001fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e9      	bne.n	8001f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a6 	beq.w	800210a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a87      	ldr	r2, [pc, #540]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x4c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x4c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a7e      	ldr	r2, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x4c8>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff f98d 	bl	8001320 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff f989 	bl	8001320 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e103      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x4c8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x312>
 8002030:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e02d      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x334>
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	e01c      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x356>
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a60      	ldr	r2, [pc, #384]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a5d      	ldr	r2, [pc, #372]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a5a      	ldr	r2, [pc, #360]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff f93d 	bl	8001320 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff f939 	bl	8001320 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0b1      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <HAL_RCC_OscConfig+0x37e>
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f927 	bl	8001320 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff f923 	bl	8001320 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e09b      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8087 	beq.w	8002222 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d061      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d146      	bne.n	80021b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff f8f7 	bl	8001320 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff f8f3 	bl	8001320 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e06d      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4921      	ldr	r1, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a19      	ldr	r1, [r3, #32]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	430b      	orrs	r3, r1
 8002182:	491b      	ldr	r1, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff f8c7 	bl	8001320 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff f8c3 	bl	8001320 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03d      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x46a>
 80021b4:	e035      	b.n	8002222 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f8b0 	bl	8001320 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f8ac 	bl	8001320 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e026      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x498>
 80021e2:	e01e      	b.n	8002222 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e019      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_OscConfig+0x500>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d0      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4965      	ldr	r1, [pc, #404]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d040      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d115      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e073      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06b      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4936      	ldr	r1, [pc, #216]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe fffe 	bl	8001320 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe fffa 	bl	8001320 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e053      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d210      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4922      	ldr	r1, [pc, #136]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f821 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1cc>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe ff5c 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40022000 	.word	0x40022000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08003dd8 	.word	0x08003dd8
 80023fc:	20000010 	.word	0x20000010
 8002400:	20000014 	.word	0x20000014

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCC_GetSysClockFreq+0x94>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x30>
 800242e:	2b08      	cmp	r3, #8
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x36>
 8002432:	e027      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_GetSysClockFreq+0x98>)
 8002436:	613b      	str	r3, [r7, #16]
      break;
 8002438:	e027      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d010      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_GetSysClockFreq+0x94>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0c5b      	lsrs	r3, r3, #17
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <HAL_RCC_GetSysClockFreq+0x98>)
 8002466:	fb03 f202 	mul.w	r2, r3, r2
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e004      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	613b      	str	r3, [r7, #16]
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetSysClockFreq+0x98>)
 8002486:	613b      	str	r3, [r7, #16]
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	693b      	ldr	r3, [r7, #16]
}
 800248c:	4618      	mov	r0, r3
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	08003df0 	.word	0x08003df0
 80024a4:	08003e00 	.word	0x08003e00
 80024a8:	003d0900 	.word	0x003d0900

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b02      	ldr	r3, [pc, #8]	; (80024bc <HAL_RCC_GetHCLKFreq+0x10>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	20000010 	.word	0x20000010

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff2 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08003de8 	.word	0x08003de8

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffde 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08003de8 	.word	0x08003de8

08002510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <RCC_Delay+0x34>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <RCC_Delay+0x38>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	0a5b      	lsrs	r3, r3, #9
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800252c:	bf00      	nop
  }
  while (Delay --);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	60fa      	str	r2, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f9      	bne.n	800252c <RCC_Delay+0x1c>
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000010 	.word	0x20000010
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e042      	b.n	80025e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fdac 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fd3f 	bl	8003014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b20      	cmp	r3, #32
 8002604:	d121      	bne.n	800264a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_UART_Transmit_IT+0x26>
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01a      	b.n	800264c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2221      	movs	r2, #33	; 0x21
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002644:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
  }
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08c      	sub	sp, #48	; 0x30
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	d14a      	bne.n	8002706 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e043      	b.n	8002708 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	461a      	mov	r2, r3
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fae9 	bl	8002c6a <UART_Start_Receive_IT>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800269e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d12c      	bne.n	8002700 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d125      	bne.n	80026fa <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	e853 3f00 	ldrex	r3, [r3]
 80026d2:	617b      	str	r3, [r7, #20]
   return(result);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f043 0310 	orr.w	r3, r3, #16
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e4:	627a      	str	r2, [r7, #36]	; 0x24
 80026e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e5      	bne.n	80026c4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80026f8:	e002      	b.n	8002700 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002704:	e000      	b.n	8002708 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3730      	adds	r7, #48	; 0x30
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ba      	sub	sp, #232	; 0xe8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800274e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb91 	bl	8002e96 <UART_Receive_IT>
      return;
 8002774:	e25b      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80de 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
 8002780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d106      	bne.n	800279a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800278c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80d1 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800281e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0208 	orr.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 81f2 	beq.w	8002c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb1c 	bl	8002e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_UART_IRQHandler+0x17a>
 8002882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04f      	beq.n	800292a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa26 	bl	8002cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d041      	beq.n	8002922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d9      	bne.n	800289e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_UART_IRQHandler+0x3e0>)
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fee0 	bl	80016c4 <HAL_DMA_Abort_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e00e      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f99c 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00a      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f998 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e006      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f994 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002936:	e175      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	bf00      	nop
    return;
 800293a:	e173      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 814f 	bne.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8148 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8141 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80b6 	beq.w	8002af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8145 	beq.w	8002c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f080 813e 	bcs.w	8002c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f000 8088 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1d9      	bne.n	80029c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e1      	bne.n	8002a0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e3      	bne.n	8002a48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e3      	bne.n	8002a8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fdbe 	bl	800164c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe f860 	bl	8000bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aec:	e09c      	b.n	8002c28 <HAL_UART_IRQHandler+0x518>
 8002aee:	bf00      	nop
 8002af0:	08002da1 	.word	0x08002da1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 808e 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8089 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e3      	bne.n	8002b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3314      	adds	r3, #20
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	623b      	str	r3, [r7, #32]
   return(result);
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b76:	633a      	str	r2, [r7, #48]	; 0x30
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e3      	bne.n	8002b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0310 	bic.w	r3, r3, #16
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e3      	bne.n	8002b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffe5 	bl	8000bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be2:	e023      	b.n	8002c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8e3 	bl	8002dc8 <UART_Transmit_IT>
    return;
 8002c02:	e014      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f922 	bl	8002e66 <UART_EndTransmit_IT>
    return;
 8002c22:	e004      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c2c:	bf00      	nop
  }
}
 8002c2e:	37e8      	adds	r7, #232	; 0xe8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2222      	movs	r2, #34	; 0x22
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0220 	orr.w	r2, r2, #32
 8002cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b095      	sub	sp, #84	; 0x54
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d04:	643a      	str	r2, [r7, #64]	; 0x40
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3314      	adds	r3, #20
 8002d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d119      	bne.n	8002d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 0310 	bic.w	r3, r3, #16
 8002d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d74:	61ba      	str	r2, [r7, #24]
 8002d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	613b      	str	r3, [r7, #16]
   return(result);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d96:	bf00      	nop
 8002d98:	3754      	adds	r7, #84	; 0x54
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff ff4c 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b21      	cmp	r3, #33	; 0x21
 8002dda:	d13e      	bne.n	8002e5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	d114      	bne.n	8002e10 <UART_Transmit_IT+0x48>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d110      	bne.n	8002e10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	e008      	b.n	8002e22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6211      	str	r1, [r2, #32]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff fed4 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08c      	sub	sp, #48	; 0x30
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b22      	cmp	r3, #34	; 0x22
 8002ea8:	f040 80ae 	bne.w	8003008 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d117      	bne.n	8002ee6 <UART_Receive_IT+0x50>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee4:	e026      	b.n	8002f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d007      	beq.n	8002f0a <UART_Receive_IT+0x74>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <UART_Receive_IT+0x82>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e008      	b.n	8002f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4619      	mov	r1, r3
 8002f42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d15d      	bne.n	8003004 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0220 	bic.w	r2, r2, #32
 8002f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d135      	bne.n	8002ffa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
 8002fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f023 0310 	bic.w	r3, r3, #16
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	623a      	str	r2, [r7, #32]
 8002fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69f9      	ldr	r1, [r7, #28]
 8002fba:	6a3a      	ldr	r2, [r7, #32]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e5      	bne.n	8002f94 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d10a      	bne.n	8002fec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fdda 	bl	8000bac <HAL_UARTEx_RxEventCallback>
 8002ff8:	e002      	b.n	8003000 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fe23 	bl	8002c46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e002      	b.n	800300a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3730      	adds	r7, #48	; 0x30
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800304e:	f023 030c 	bic.w	r3, r3, #12
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	430b      	orrs	r3, r1
 800305a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <UART_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7ff fa34 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	e002      	b.n	800308a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7ff fa1c 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003088:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <UART_SetConfig+0x118>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	0119      	lsls	r1, r3, #4
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <UART_SetConfig+0x118>)
 80030c2:	fba3 0302 	umull	r0, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2064      	movs	r0, #100	; 0x64
 80030ca:	fb00 f303 	mul.w	r3, r0, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	; 0x32
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <UART_SetConfig+0x118>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e0:	4419      	add	r1, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <UART_SetConfig+0x118>)
 80030fa:	fba3 0302 	umull	r0, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2064      	movs	r0, #100	; 0x64
 8003102:	fb00 f303 	mul.w	r3, r0, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	3332      	adds	r3, #50	; 0x32
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <UART_SetConfig+0x118>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	440a      	add	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40013800 	.word	0x40013800
 800312c:	51eb851f 	.word	0x51eb851f

08003130 <siscanf>:
 8003130:	b40e      	push	{r1, r2, r3}
 8003132:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003136:	b530      	push	{r4, r5, lr}
 8003138:	b09c      	sub	sp, #112	; 0x70
 800313a:	ac1f      	add	r4, sp, #124	; 0x7c
 800313c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003140:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003144:	9002      	str	r0, [sp, #8]
 8003146:	9006      	str	r0, [sp, #24]
 8003148:	f7fd f800 	bl	800014c <strlen>
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <siscanf+0x4c>)
 800314e:	9003      	str	r0, [sp, #12]
 8003150:	930b      	str	r3, [sp, #44]	; 0x2c
 8003152:	2300      	movs	r3, #0
 8003154:	930f      	str	r3, [sp, #60]	; 0x3c
 8003156:	9314      	str	r3, [sp, #80]	; 0x50
 8003158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315c:	9007      	str	r0, [sp, #28]
 800315e:	4808      	ldr	r0, [pc, #32]	; (8003180 <siscanf+0x50>)
 8003160:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003164:	462a      	mov	r2, r5
 8003166:	4623      	mov	r3, r4
 8003168:	a902      	add	r1, sp, #8
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	9401      	str	r4, [sp, #4]
 800316e:	f000 f98d 	bl	800348c <__ssvfiscanf_r>
 8003172:	b01c      	add	sp, #112	; 0x70
 8003174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003178:	b003      	add	sp, #12
 800317a:	4770      	bx	lr
 800317c:	08003185 	.word	0x08003185
 8003180:	20000068 	.word	0x20000068

08003184 <__seofread>:
 8003184:	2000      	movs	r0, #0
 8003186:	4770      	bx	lr

08003188 <memset>:
 8003188:	4603      	mov	r3, r0
 800318a:	4402      	add	r2, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	f803 1b01 	strb.w	r1, [r3], #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000068 	.word	0x20000068

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2600      	movs	r6, #0
 80031a8:	4d0c      	ldr	r5, [pc, #48]	; (80031dc <__libc_init_array+0x38>)
 80031aa:	4c0d      	ldr	r4, [pc, #52]	; (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	f000 fdf8 	bl	8003da8 <_init>
 80031b8:	2600      	movs	r6, #0
 80031ba:	4d0a      	ldr	r5, [pc, #40]	; (80031e4 <__libc_init_array+0x40>)
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <__libc_init_array+0x44>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003f24 	.word	0x08003f24
 80031e0:	08003f24 	.word	0x08003f24
 80031e4:	08003f24 	.word	0x08003f24
 80031e8:	08003f28 	.word	0x08003f28

080031ec <__retarget_lock_acquire_recursive>:
 80031ec:	4770      	bx	lr

080031ee <__retarget_lock_release_recursive>:
 80031ee:	4770      	bx	lr

080031f0 <_free_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4605      	mov	r5, r0
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d040      	beq.n	800327a <_free_r+0x8a>
 80031f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031fc:	1f0c      	subs	r4, r1, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfb8      	it	lt
 8003202:	18e4      	addlt	r4, r4, r3
 8003204:	f000 f8dc 	bl	80033c0 <__malloc_lock>
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <_free_r+0x8c>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b933      	cbnz	r3, 800321c <_free_r+0x2c>
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6014      	str	r4, [r2, #0]
 8003212:	4628      	mov	r0, r5
 8003214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003218:	f000 b8d8 	b.w	80033cc <__malloc_unlock>
 800321c:	42a3      	cmp	r3, r4
 800321e:	d908      	bls.n	8003232 <_free_r+0x42>
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	1821      	adds	r1, r4, r0
 8003224:	428b      	cmp	r3, r1
 8003226:	bf01      	itttt	eq
 8003228:	6819      	ldreq	r1, [r3, #0]
 800322a:	685b      	ldreq	r3, [r3, #4]
 800322c:	1809      	addeq	r1, r1, r0
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	e7ed      	b.n	800320e <_free_r+0x1e>
 8003232:	461a      	mov	r2, r3
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b10b      	cbz	r3, 800323c <_free_r+0x4c>
 8003238:	42a3      	cmp	r3, r4
 800323a:	d9fa      	bls.n	8003232 <_free_r+0x42>
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	1850      	adds	r0, r2, r1
 8003240:	42a0      	cmp	r0, r4
 8003242:	d10b      	bne.n	800325c <_free_r+0x6c>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	4401      	add	r1, r0
 8003248:	1850      	adds	r0, r2, r1
 800324a:	4283      	cmp	r3, r0
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	d1e0      	bne.n	8003212 <_free_r+0x22>
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4408      	add	r0, r1
 8003256:	6010      	str	r0, [r2, #0]
 8003258:	6053      	str	r3, [r2, #4]
 800325a:	e7da      	b.n	8003212 <_free_r+0x22>
 800325c:	d902      	bls.n	8003264 <_free_r+0x74>
 800325e:	230c      	movs	r3, #12
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	e7d6      	b.n	8003212 <_free_r+0x22>
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	1821      	adds	r1, r4, r0
 8003268:	428b      	cmp	r3, r1
 800326a:	bf01      	itttt	eq
 800326c:	6819      	ldreq	r1, [r3, #0]
 800326e:	685b      	ldreq	r3, [r3, #4]
 8003270:	1809      	addeq	r1, r1, r0
 8003272:	6021      	streq	r1, [r4, #0]
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	6054      	str	r4, [r2, #4]
 8003278:	e7cb      	b.n	8003212 <_free_r+0x22>
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200002c0 	.word	0x200002c0

08003280 <sbrk_aligned>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0e      	ldr	r6, [pc, #56]	; (80032bc <sbrk_aligned+0x3c>)
 8003284:	460c      	mov	r4, r1
 8003286:	6831      	ldr	r1, [r6, #0]
 8003288:	4605      	mov	r5, r0
 800328a:	b911      	cbnz	r1, 8003292 <sbrk_aligned+0x12>
 800328c:	f000 fc34 	bl	8003af8 <_sbrk_r>
 8003290:	6030      	str	r0, [r6, #0]
 8003292:	4621      	mov	r1, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f000 fc2f 	bl	8003af8 <_sbrk_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <sbrk_aligned+0x34>
 800329e:	1cc4      	adds	r4, r0, #3
 80032a0:	f024 0403 	bic.w	r4, r4, #3
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d007      	beq.n	80032b8 <sbrk_aligned+0x38>
 80032a8:	1a21      	subs	r1, r4, r0
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 fc24 	bl	8003af8 <_sbrk_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d101      	bne.n	80032b8 <sbrk_aligned+0x38>
 80032b4:	f04f 34ff 	mov.w	r4, #4294967295
 80032b8:	4620      	mov	r0, r4
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	200002c4 	.word	0x200002c4

080032c0 <_malloc_r>:
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c4:	1ccd      	adds	r5, r1, #3
 80032c6:	f025 0503 	bic.w	r5, r5, #3
 80032ca:	3508      	adds	r5, #8
 80032cc:	2d0c      	cmp	r5, #12
 80032ce:	bf38      	it	cc
 80032d0:	250c      	movcc	r5, #12
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	4607      	mov	r7, r0
 80032d6:	db01      	blt.n	80032dc <_malloc_r+0x1c>
 80032d8:	42a9      	cmp	r1, r5
 80032da:	d905      	bls.n	80032e8 <_malloc_r+0x28>
 80032dc:	230c      	movs	r3, #12
 80032de:	2600      	movs	r6, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033bc <_malloc_r+0xfc>
 80032ec:	f000 f868 	bl	80033c0 <__malloc_lock>
 80032f0:	f8d8 3000 	ldr.w	r3, [r8]
 80032f4:	461c      	mov	r4, r3
 80032f6:	bb5c      	cbnz	r4, 8003350 <_malloc_r+0x90>
 80032f8:	4629      	mov	r1, r5
 80032fa:	4638      	mov	r0, r7
 80032fc:	f7ff ffc0 	bl	8003280 <sbrk_aligned>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	4604      	mov	r4, r0
 8003304:	d155      	bne.n	80033b2 <_malloc_r+0xf2>
 8003306:	f8d8 4000 	ldr.w	r4, [r8]
 800330a:	4626      	mov	r6, r4
 800330c:	2e00      	cmp	r6, #0
 800330e:	d145      	bne.n	800339c <_malloc_r+0xdc>
 8003310:	2c00      	cmp	r4, #0
 8003312:	d048      	beq.n	80033a6 <_malloc_r+0xe6>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	4631      	mov	r1, r6
 8003318:	4638      	mov	r0, r7
 800331a:	eb04 0903 	add.w	r9, r4, r3
 800331e:	f000 fbeb 	bl	8003af8 <_sbrk_r>
 8003322:	4581      	cmp	r9, r0
 8003324:	d13f      	bne.n	80033a6 <_malloc_r+0xe6>
 8003326:	6821      	ldr	r1, [r4, #0]
 8003328:	4638      	mov	r0, r7
 800332a:	1a6d      	subs	r5, r5, r1
 800332c:	4629      	mov	r1, r5
 800332e:	f7ff ffa7 	bl	8003280 <sbrk_aligned>
 8003332:	3001      	adds	r0, #1
 8003334:	d037      	beq.n	80033a6 <_malloc_r+0xe6>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	442b      	add	r3, r5
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	f8d8 3000 	ldr.w	r3, [r8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d038      	beq.n	80033b6 <_malloc_r+0xf6>
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	42a2      	cmp	r2, r4
 8003348:	d12b      	bne.n	80033a2 <_malloc_r+0xe2>
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	e00f      	b.n	8003370 <_malloc_r+0xb0>
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	1b52      	subs	r2, r2, r5
 8003354:	d41f      	bmi.n	8003396 <_malloc_r+0xd6>
 8003356:	2a0b      	cmp	r2, #11
 8003358:	d917      	bls.n	800338a <_malloc_r+0xca>
 800335a:	1961      	adds	r1, r4, r5
 800335c:	42a3      	cmp	r3, r4
 800335e:	6025      	str	r5, [r4, #0]
 8003360:	bf18      	it	ne
 8003362:	6059      	strne	r1, [r3, #4]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	bf08      	it	eq
 8003368:	f8c8 1000 	streq.w	r1, [r8]
 800336c:	5162      	str	r2, [r4, r5]
 800336e:	604b      	str	r3, [r1, #4]
 8003370:	4638      	mov	r0, r7
 8003372:	f104 060b 	add.w	r6, r4, #11
 8003376:	f000 f829 	bl	80033cc <__malloc_unlock>
 800337a:	f026 0607 	bic.w	r6, r6, #7
 800337e:	1d23      	adds	r3, r4, #4
 8003380:	1af2      	subs	r2, r6, r3
 8003382:	d0ae      	beq.n	80032e2 <_malloc_r+0x22>
 8003384:	1b9b      	subs	r3, r3, r6
 8003386:	50a3      	str	r3, [r4, r2]
 8003388:	e7ab      	b.n	80032e2 <_malloc_r+0x22>
 800338a:	42a3      	cmp	r3, r4
 800338c:	6862      	ldr	r2, [r4, #4]
 800338e:	d1dd      	bne.n	800334c <_malloc_r+0x8c>
 8003390:	f8c8 2000 	str.w	r2, [r8]
 8003394:	e7ec      	b.n	8003370 <_malloc_r+0xb0>
 8003396:	4623      	mov	r3, r4
 8003398:	6864      	ldr	r4, [r4, #4]
 800339a:	e7ac      	b.n	80032f6 <_malloc_r+0x36>
 800339c:	4634      	mov	r4, r6
 800339e:	6876      	ldr	r6, [r6, #4]
 80033a0:	e7b4      	b.n	800330c <_malloc_r+0x4c>
 80033a2:	4613      	mov	r3, r2
 80033a4:	e7cc      	b.n	8003340 <_malloc_r+0x80>
 80033a6:	230c      	movs	r3, #12
 80033a8:	4638      	mov	r0, r7
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	f000 f80e 	bl	80033cc <__malloc_unlock>
 80033b0:	e797      	b.n	80032e2 <_malloc_r+0x22>
 80033b2:	6025      	str	r5, [r4, #0]
 80033b4:	e7dc      	b.n	8003370 <_malloc_r+0xb0>
 80033b6:	605b      	str	r3, [r3, #4]
 80033b8:	deff      	udf	#255	; 0xff
 80033ba:	bf00      	nop
 80033bc:	200002c0 	.word	0x200002c0

080033c0 <__malloc_lock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__malloc_lock+0x8>)
 80033c2:	f7ff bf13 	b.w	80031ec <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	200002bc 	.word	0x200002bc

080033cc <__malloc_unlock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__malloc_unlock+0x8>)
 80033ce:	f7ff bf0e 	b.w	80031ee <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	200002bc 	.word	0x200002bc

080033d8 <_sungetc_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	1c4b      	adds	r3, r1, #1
 80033dc:	4614      	mov	r4, r2
 80033de:	d103      	bne.n	80033e8 <_sungetc_r+0x10>
 80033e0:	f04f 35ff 	mov.w	r5, #4294967295
 80033e4:	4628      	mov	r0, r5
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	8993      	ldrh	r3, [r2, #12]
 80033ea:	b2cd      	uxtb	r5, r1
 80033ec:	f023 0320 	bic.w	r3, r3, #32
 80033f0:	8193      	strh	r3, [r2, #12]
 80033f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	b18b      	cbz	r3, 800341c <_sungetc_r+0x44>
 80033f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033fa:	4293      	cmp	r3, r2
 80033fc:	dd08      	ble.n	8003410 <_sungetc_r+0x38>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	6022      	str	r2, [r4, #0]
 8003404:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003408:	6863      	ldr	r3, [r4, #4]
 800340a:	3301      	adds	r3, #1
 800340c:	6063      	str	r3, [r4, #4]
 800340e:	e7e9      	b.n	80033e4 <_sungetc_r+0xc>
 8003410:	4621      	mov	r1, r4
 8003412:	f000 fb38 	bl	8003a86 <__submore>
 8003416:	2800      	cmp	r0, #0
 8003418:	d0f1      	beq.n	80033fe <_sungetc_r+0x26>
 800341a:	e7e1      	b.n	80033e0 <_sungetc_r+0x8>
 800341c:	6921      	ldr	r1, [r4, #16]
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	b151      	cbz	r1, 8003438 <_sungetc_r+0x60>
 8003422:	4299      	cmp	r1, r3
 8003424:	d208      	bcs.n	8003438 <_sungetc_r+0x60>
 8003426:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800342a:	42a9      	cmp	r1, r5
 800342c:	d104      	bne.n	8003438 <_sungetc_r+0x60>
 800342e:	3b01      	subs	r3, #1
 8003430:	3201      	adds	r2, #1
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	6062      	str	r2, [r4, #4]
 8003436:	e7d5      	b.n	80033e4 <_sungetc_r+0xc>
 8003438:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800343c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003440:	6363      	str	r3, [r4, #52]	; 0x34
 8003442:	2303      	movs	r3, #3
 8003444:	63a3      	str	r3, [r4, #56]	; 0x38
 8003446:	4623      	mov	r3, r4
 8003448:	f803 5f46 	strb.w	r5, [r3, #70]!
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	2301      	movs	r3, #1
 8003450:	e7dc      	b.n	800340c <_sungetc_r+0x34>

08003452 <__ssrefill_r>:
 8003452:	b510      	push	{r4, lr}
 8003454:	460c      	mov	r4, r1
 8003456:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003458:	b169      	cbz	r1, 8003476 <__ssrefill_r+0x24>
 800345a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800345e:	4299      	cmp	r1, r3
 8003460:	d001      	beq.n	8003466 <__ssrefill_r+0x14>
 8003462:	f7ff fec5 	bl	80031f0 <_free_r>
 8003466:	2000      	movs	r0, #0
 8003468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800346a:	6360      	str	r0, [r4, #52]	; 0x34
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	b113      	cbz	r3, 8003476 <__ssrefill_r+0x24>
 8003470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003472:	6023      	str	r3, [r4, #0]
 8003474:	bd10      	pop	{r4, pc}
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	e7f3      	b.n	8003474 <__ssrefill_r+0x22>

0800348c <__ssvfiscanf_r>:
 800348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	460c      	mov	r4, r1
 8003492:	2100      	movs	r1, #0
 8003494:	4606      	mov	r6, r0
 8003496:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800349a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800349e:	49a6      	ldr	r1, [pc, #664]	; (8003738 <__ssvfiscanf_r+0x2ac>)
 80034a0:	f10d 0804 	add.w	r8, sp, #4
 80034a4:	91a0      	str	r1, [sp, #640]	; 0x280
 80034a6:	49a5      	ldr	r1, [pc, #660]	; (800373c <__ssvfiscanf_r+0x2b0>)
 80034a8:	4fa5      	ldr	r7, [pc, #660]	; (8003740 <__ssvfiscanf_r+0x2b4>)
 80034aa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003744 <__ssvfiscanf_r+0x2b8>
 80034ae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80034b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	7813      	ldrb	r3, [r2, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 815a 	beq.w	8003772 <__ssvfiscanf_r+0x2e6>
 80034be:	5cf9      	ldrb	r1, [r7, r3]
 80034c0:	1c55      	adds	r5, r2, #1
 80034c2:	f011 0108 	ands.w	r1, r1, #8
 80034c6:	d019      	beq.n	80034fc <__ssvfiscanf_r+0x70>
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dd0f      	ble.n	80034ee <__ssvfiscanf_r+0x62>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	5cba      	ldrb	r2, [r7, r2]
 80034d4:	0712      	lsls	r2, r2, #28
 80034d6:	d401      	bmi.n	80034dc <__ssvfiscanf_r+0x50>
 80034d8:	462a      	mov	r2, r5
 80034da:	e7ec      	b.n	80034b6 <__ssvfiscanf_r+0x2a>
 80034dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80034de:	3301      	adds	r3, #1
 80034e0:	3201      	adds	r2, #1
 80034e2:	9245      	str	r2, [sp, #276]	; 0x114
 80034e4:	6862      	ldr	r2, [r4, #4]
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	3a01      	subs	r2, #1
 80034ea:	6062      	str	r2, [r4, #4]
 80034ec:	e7ec      	b.n	80034c8 <__ssvfiscanf_r+0x3c>
 80034ee:	4621      	mov	r1, r4
 80034f0:	4630      	mov	r0, r6
 80034f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80034f4:	4798      	blx	r3
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d0e9      	beq.n	80034ce <__ssvfiscanf_r+0x42>
 80034fa:	e7ed      	b.n	80034d8 <__ssvfiscanf_r+0x4c>
 80034fc:	2b25      	cmp	r3, #37	; 0x25
 80034fe:	d012      	beq.n	8003526 <__ssvfiscanf_r+0x9a>
 8003500:	469a      	mov	sl, r3
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f340 8092 	ble.w	800362e <__ssvfiscanf_r+0x1a2>
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	7813      	ldrb	r3, [r2, #0]
 800350e:	4553      	cmp	r3, sl
 8003510:	f040 812f 	bne.w	8003772 <__ssvfiscanf_r+0x2e6>
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	3201      	adds	r2, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	6063      	str	r3, [r4, #4]
 800351c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800351e:	6022      	str	r2, [r4, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	9345      	str	r3, [sp, #276]	; 0x114
 8003524:	e7d8      	b.n	80034d8 <__ssvfiscanf_r+0x4c>
 8003526:	9141      	str	r1, [sp, #260]	; 0x104
 8003528:	9143      	str	r1, [sp, #268]	; 0x10c
 800352a:	7853      	ldrb	r3, [r2, #1]
 800352c:	2b2a      	cmp	r3, #42	; 0x2a
 800352e:	bf04      	itt	eq
 8003530:	2310      	moveq	r3, #16
 8003532:	1c95      	addeq	r5, r2, #2
 8003534:	f04f 020a 	mov.w	r2, #10
 8003538:	bf08      	it	eq
 800353a:	9341      	streq	r3, [sp, #260]	; 0x104
 800353c:	46aa      	mov	sl, r5
 800353e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003542:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003546:	2b09      	cmp	r3, #9
 8003548:	d91c      	bls.n	8003584 <__ssvfiscanf_r+0xf8>
 800354a:	2203      	movs	r2, #3
 800354c:	487d      	ldr	r0, [pc, #500]	; (8003744 <__ssvfiscanf_r+0x2b8>)
 800354e:	f000 fae3 	bl	8003b18 <memchr>
 8003552:	b138      	cbz	r0, 8003564 <__ssvfiscanf_r+0xd8>
 8003554:	2301      	movs	r3, #1
 8003556:	4655      	mov	r5, sl
 8003558:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800355a:	eba0 0009 	sub.w	r0, r0, r9
 800355e:	4083      	lsls	r3, r0
 8003560:	4313      	orrs	r3, r2
 8003562:	9341      	str	r3, [sp, #260]	; 0x104
 8003564:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003568:	2b78      	cmp	r3, #120	; 0x78
 800356a:	d806      	bhi.n	800357a <__ssvfiscanf_r+0xee>
 800356c:	2b57      	cmp	r3, #87	; 0x57
 800356e:	d810      	bhi.n	8003592 <__ssvfiscanf_r+0x106>
 8003570:	2b25      	cmp	r3, #37	; 0x25
 8003572:	d0c5      	beq.n	8003500 <__ssvfiscanf_r+0x74>
 8003574:	d856      	bhi.n	8003624 <__ssvfiscanf_r+0x198>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d064      	beq.n	8003644 <__ssvfiscanf_r+0x1b8>
 800357a:	2303      	movs	r3, #3
 800357c:	9347      	str	r3, [sp, #284]	; 0x11c
 800357e:	230a      	movs	r3, #10
 8003580:	9342      	str	r3, [sp, #264]	; 0x108
 8003582:	e075      	b.n	8003670 <__ssvfiscanf_r+0x1e4>
 8003584:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003586:	4655      	mov	r5, sl
 8003588:	fb02 1103 	mla	r1, r2, r3, r1
 800358c:	3930      	subs	r1, #48	; 0x30
 800358e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003590:	e7d4      	b.n	800353c <__ssvfiscanf_r+0xb0>
 8003592:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003596:	2a20      	cmp	r2, #32
 8003598:	d8ef      	bhi.n	800357a <__ssvfiscanf_r+0xee>
 800359a:	a101      	add	r1, pc, #4	; (adr r1, 80035a0 <__ssvfiscanf_r+0x114>)
 800359c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80035a0:	08003653 	.word	0x08003653
 80035a4:	0800357b 	.word	0x0800357b
 80035a8:	0800357b 	.word	0x0800357b
 80035ac:	080036b1 	.word	0x080036b1
 80035b0:	0800357b 	.word	0x0800357b
 80035b4:	0800357b 	.word	0x0800357b
 80035b8:	0800357b 	.word	0x0800357b
 80035bc:	0800357b 	.word	0x0800357b
 80035c0:	0800357b 	.word	0x0800357b
 80035c4:	0800357b 	.word	0x0800357b
 80035c8:	0800357b 	.word	0x0800357b
 80035cc:	080036c7 	.word	0x080036c7
 80035d0:	080036ad 	.word	0x080036ad
 80035d4:	0800362b 	.word	0x0800362b
 80035d8:	0800362b 	.word	0x0800362b
 80035dc:	0800362b 	.word	0x0800362b
 80035e0:	0800357b 	.word	0x0800357b
 80035e4:	08003669 	.word	0x08003669
 80035e8:	0800357b 	.word	0x0800357b
 80035ec:	0800357b 	.word	0x0800357b
 80035f0:	0800357b 	.word	0x0800357b
 80035f4:	0800357b 	.word	0x0800357b
 80035f8:	080036d7 	.word	0x080036d7
 80035fc:	080036a5 	.word	0x080036a5
 8003600:	0800364b 	.word	0x0800364b
 8003604:	0800357b 	.word	0x0800357b
 8003608:	0800357b 	.word	0x0800357b
 800360c:	080036d3 	.word	0x080036d3
 8003610:	0800357b 	.word	0x0800357b
 8003614:	080036ad 	.word	0x080036ad
 8003618:	0800357b 	.word	0x0800357b
 800361c:	0800357b 	.word	0x0800357b
 8003620:	08003653 	.word	0x08003653
 8003624:	3b45      	subs	r3, #69	; 0x45
 8003626:	2b02      	cmp	r3, #2
 8003628:	d8a7      	bhi.n	800357a <__ssvfiscanf_r+0xee>
 800362a:	2305      	movs	r3, #5
 800362c:	e01f      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 800362e:	4621      	mov	r1, r4
 8003630:	4630      	mov	r0, r6
 8003632:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003634:	4798      	blx	r3
 8003636:	2800      	cmp	r0, #0
 8003638:	f43f af67 	beq.w	800350a <__ssvfiscanf_r+0x7e>
 800363c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800363e:	2800      	cmp	r0, #0
 8003640:	f040 808d 	bne.w	800375e <__ssvfiscanf_r+0x2d2>
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	e08f      	b.n	800376a <__ssvfiscanf_r+0x2de>
 800364a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	9241      	str	r2, [sp, #260]	; 0x104
 8003652:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003658:	9241      	str	r2, [sp, #260]	; 0x104
 800365a:	2210      	movs	r2, #16
 800365c:	2b6f      	cmp	r3, #111	; 0x6f
 800365e:	bf34      	ite	cc
 8003660:	2303      	movcc	r3, #3
 8003662:	2304      	movcs	r3, #4
 8003664:	9242      	str	r2, [sp, #264]	; 0x108
 8003666:	e002      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 8003668:	2300      	movs	r3, #0
 800366a:	9342      	str	r3, [sp, #264]	; 0x108
 800366c:	2303      	movs	r3, #3
 800366e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	dd3d      	ble.n	80036f2 <__ssvfiscanf_r+0x266>
 8003676:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003678:	0659      	lsls	r1, r3, #25
 800367a:	d404      	bmi.n	8003686 <__ssvfiscanf_r+0x1fa>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	5cba      	ldrb	r2, [r7, r2]
 8003682:	0712      	lsls	r2, r2, #28
 8003684:	d43c      	bmi.n	8003700 <__ssvfiscanf_r+0x274>
 8003686:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003688:	2b02      	cmp	r3, #2
 800368a:	dc4b      	bgt.n	8003724 <__ssvfiscanf_r+0x298>
 800368c:	466b      	mov	r3, sp
 800368e:	4622      	mov	r2, r4
 8003690:	4630      	mov	r0, r6
 8003692:	a941      	add	r1, sp, #260	; 0x104
 8003694:	f000 f872 	bl	800377c <_scanf_chars>
 8003698:	2801      	cmp	r0, #1
 800369a:	d06a      	beq.n	8003772 <__ssvfiscanf_r+0x2e6>
 800369c:	2802      	cmp	r0, #2
 800369e:	f47f af1b 	bne.w	80034d8 <__ssvfiscanf_r+0x4c>
 80036a2:	e7cb      	b.n	800363c <__ssvfiscanf_r+0x1b0>
 80036a4:	2308      	movs	r3, #8
 80036a6:	9342      	str	r3, [sp, #264]	; 0x108
 80036a8:	2304      	movs	r3, #4
 80036aa:	e7e0      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 80036ac:	220a      	movs	r2, #10
 80036ae:	e7d5      	b.n	800365c <__ssvfiscanf_r+0x1d0>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4640      	mov	r0, r8
 80036b4:	f000 f9ae 	bl	8003a14 <__sccl>
 80036b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036ba:	4605      	mov	r5, r0
 80036bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c0:	9341      	str	r3, [sp, #260]	; 0x104
 80036c2:	2301      	movs	r3, #1
 80036c4:	e7d3      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 80036c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036cc:	9341      	str	r3, [sp, #260]	; 0x104
 80036ce:	2300      	movs	r3, #0
 80036d0:	e7cd      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e7cb      	b.n	800366e <__ssvfiscanf_r+0x1e2>
 80036d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80036d8:	06c3      	lsls	r3, r0, #27
 80036da:	f53f aefd 	bmi.w	80034d8 <__ssvfiscanf_r+0x4c>
 80036de:	9b00      	ldr	r3, [sp, #0]
 80036e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80036e2:	1d19      	adds	r1, r3, #4
 80036e4:	9100      	str	r1, [sp, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	07c0      	lsls	r0, r0, #31
 80036ea:	bf4c      	ite	mi
 80036ec:	801a      	strhmi	r2, [r3, #0]
 80036ee:	601a      	strpl	r2, [r3, #0]
 80036f0:	e6f2      	b.n	80034d8 <__ssvfiscanf_r+0x4c>
 80036f2:	4621      	mov	r1, r4
 80036f4:	4630      	mov	r0, r6
 80036f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036f8:	4798      	blx	r3
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d0bb      	beq.n	8003676 <__ssvfiscanf_r+0x1ea>
 80036fe:	e79d      	b.n	800363c <__ssvfiscanf_r+0x1b0>
 8003700:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003702:	3201      	adds	r2, #1
 8003704:	9245      	str	r2, [sp, #276]	; 0x114
 8003706:	6862      	ldr	r2, [r4, #4]
 8003708:	3a01      	subs	r2, #1
 800370a:	2a00      	cmp	r2, #0
 800370c:	6062      	str	r2, [r4, #4]
 800370e:	dd02      	ble.n	8003716 <__ssvfiscanf_r+0x28a>
 8003710:	3301      	adds	r3, #1
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	e7b2      	b.n	800367c <__ssvfiscanf_r+0x1f0>
 8003716:	4621      	mov	r1, r4
 8003718:	4630      	mov	r0, r6
 800371a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800371c:	4798      	blx	r3
 800371e:	2800      	cmp	r0, #0
 8003720:	d0ac      	beq.n	800367c <__ssvfiscanf_r+0x1f0>
 8003722:	e78b      	b.n	800363c <__ssvfiscanf_r+0x1b0>
 8003724:	2b04      	cmp	r3, #4
 8003726:	dc0f      	bgt.n	8003748 <__ssvfiscanf_r+0x2bc>
 8003728:	466b      	mov	r3, sp
 800372a:	4622      	mov	r2, r4
 800372c:	4630      	mov	r0, r6
 800372e:	a941      	add	r1, sp, #260	; 0x104
 8003730:	f000 f87e 	bl	8003830 <_scanf_i>
 8003734:	e7b0      	b.n	8003698 <__ssvfiscanf_r+0x20c>
 8003736:	bf00      	nop
 8003738:	080033d9 	.word	0x080033d9
 800373c:	08003453 	.word	0x08003453
 8003740:	08003e22 	.word	0x08003e22
 8003744:	08003e02 	.word	0x08003e02
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <__ssvfiscanf_r+0x2ec>)
 800374a:	2b00      	cmp	r3, #0
 800374c:	f43f aec4 	beq.w	80034d8 <__ssvfiscanf_r+0x4c>
 8003750:	466b      	mov	r3, sp
 8003752:	4622      	mov	r2, r4
 8003754:	4630      	mov	r0, r6
 8003756:	a941      	add	r1, sp, #260	; 0x104
 8003758:	f3af 8000 	nop.w
 800375c:	e79c      	b.n	8003698 <__ssvfiscanf_r+0x20c>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003764:	bf18      	it	ne
 8003766:	f04f 30ff 	movne.w	r0, #4294967295
 800376a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003774:	e7f9      	b.n	800376a <__ssvfiscanf_r+0x2de>
 8003776:	bf00      	nop
 8003778:	00000000 	.word	0x00000000

0800377c <_scanf_chars>:
 800377c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003780:	4615      	mov	r5, r2
 8003782:	688a      	ldr	r2, [r1, #8]
 8003784:	4680      	mov	r8, r0
 8003786:	460c      	mov	r4, r1
 8003788:	b932      	cbnz	r2, 8003798 <_scanf_chars+0x1c>
 800378a:	698a      	ldr	r2, [r1, #24]
 800378c:	2a00      	cmp	r2, #0
 800378e:	bf0c      	ite	eq
 8003790:	2201      	moveq	r2, #1
 8003792:	f04f 32ff 	movne.w	r2, #4294967295
 8003796:	608a      	str	r2, [r1, #8]
 8003798:	2700      	movs	r7, #0
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800382c <_scanf_chars+0xb0>
 80037a0:	06d1      	lsls	r1, r2, #27
 80037a2:	bf5f      	itttt	pl
 80037a4:	681a      	ldrpl	r2, [r3, #0]
 80037a6:	1d11      	addpl	r1, r2, #4
 80037a8:	6019      	strpl	r1, [r3, #0]
 80037aa:	6816      	ldrpl	r6, [r2, #0]
 80037ac:	69a0      	ldr	r0, [r4, #24]
 80037ae:	b188      	cbz	r0, 80037d4 <_scanf_chars+0x58>
 80037b0:	2801      	cmp	r0, #1
 80037b2:	d107      	bne.n	80037c4 <_scanf_chars+0x48>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	6963      	ldr	r3, [r4, #20]
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	b953      	cbnz	r3, 80037d4 <_scanf_chars+0x58>
 80037be:	2f00      	cmp	r7, #0
 80037c0:	d031      	beq.n	8003826 <_scanf_chars+0xaa>
 80037c2:	e022      	b.n	800380a <_scanf_chars+0x8e>
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d120      	bne.n	800380a <_scanf_chars+0x8e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	d41a      	bmi.n	800380a <_scanf_chars+0x8e>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	3701      	adds	r7, #1
 80037d8:	06da      	lsls	r2, r3, #27
 80037da:	bf5e      	ittt	pl
 80037dc:	682b      	ldrpl	r3, [r5, #0]
 80037de:	781b      	ldrbpl	r3, [r3, #0]
 80037e0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80037e4:	682a      	ldr	r2, [r5, #0]
 80037e6:	686b      	ldr	r3, [r5, #4]
 80037e8:	3201      	adds	r2, #1
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	68a2      	ldr	r2, [r4, #8]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	3a01      	subs	r2, #1
 80037f2:	606b      	str	r3, [r5, #4]
 80037f4:	60a2      	str	r2, [r4, #8]
 80037f6:	b142      	cbz	r2, 800380a <_scanf_chars+0x8e>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dcd7      	bgt.n	80037ac <_scanf_chars+0x30>
 80037fc:	4629      	mov	r1, r5
 80037fe:	4640      	mov	r0, r8
 8003800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003804:	4798      	blx	r3
 8003806:	2800      	cmp	r0, #0
 8003808:	d0d0      	beq.n	80037ac <_scanf_chars+0x30>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f013 0310 	ands.w	r3, r3, #16
 8003810:	d105      	bne.n	800381e <_scanf_chars+0xa2>
 8003812:	68e2      	ldr	r2, [r4, #12]
 8003814:	3201      	adds	r2, #1
 8003816:	60e2      	str	r2, [r4, #12]
 8003818:	69a2      	ldr	r2, [r4, #24]
 800381a:	b102      	cbz	r2, 800381e <_scanf_chars+0xa2>
 800381c:	7033      	strb	r3, [r6, #0]
 800381e:	2000      	movs	r0, #0
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	443b      	add	r3, r7
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382a:	bf00      	nop
 800382c:	08003e22 	.word	0x08003e22

08003830 <_scanf_i>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	460c      	mov	r4, r1
 8003836:	4698      	mov	r8, r3
 8003838:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <_scanf_i+0x1d4>)
 800383a:	b087      	sub	sp, #28
 800383c:	4682      	mov	sl, r0
 800383e:	4616      	mov	r6, r2
 8003840:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003844:	ab03      	add	r3, sp, #12
 8003846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <_scanf_i+0x1d8>)
 800384c:	69a1      	ldr	r1, [r4, #24]
 800384e:	4a6f      	ldr	r2, [pc, #444]	; (8003a0c <_scanf_i+0x1dc>)
 8003850:	4627      	mov	r7, r4
 8003852:	2903      	cmp	r1, #3
 8003854:	bf18      	it	ne
 8003856:	461a      	movne	r2, r3
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	9201      	str	r2, [sp, #4]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003862:	bf81      	itttt	hi
 8003864:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003868:	eb03 0905 	addhi.w	r9, r3, r5
 800386c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003870:	60a3      	strhi	r3, [r4, #8]
 8003872:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003876:	bf98      	it	ls
 8003878:	f04f 0900 	movls.w	r9, #0
 800387c:	463d      	mov	r5, r7
 800387e:	f04f 0b00 	mov.w	fp, #0
 8003882:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	6831      	ldr	r1, [r6, #0]
 800388a:	ab03      	add	r3, sp, #12
 800388c:	2202      	movs	r2, #2
 800388e:	7809      	ldrb	r1, [r1, #0]
 8003890:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003894:	f000 f940 	bl	8003b18 <memchr>
 8003898:	b328      	cbz	r0, 80038e6 <_scanf_i+0xb6>
 800389a:	f1bb 0f01 	cmp.w	fp, #1
 800389e:	d159      	bne.n	8003954 <_scanf_i+0x124>
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	b92a      	cbnz	r2, 80038b0 <_scanf_i+0x80>
 80038a4:	2308      	movs	r3, #8
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	6022      	str	r2, [r4, #0]
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80038b6:	6022      	str	r2, [r4, #0]
 80038b8:	68a2      	ldr	r2, [r4, #8]
 80038ba:	1e51      	subs	r1, r2, #1
 80038bc:	60a1      	str	r1, [r4, #8]
 80038be:	b192      	cbz	r2, 80038e6 <_scanf_i+0xb6>
 80038c0:	6832      	ldr	r2, [r6, #0]
 80038c2:	1c51      	adds	r1, r2, #1
 80038c4:	6031      	str	r1, [r6, #0]
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	f805 2b01 	strb.w	r2, [r5], #1
 80038cc:	6872      	ldr	r2, [r6, #4]
 80038ce:	3a01      	subs	r2, #1
 80038d0:	2a00      	cmp	r2, #0
 80038d2:	6072      	str	r2, [r6, #4]
 80038d4:	dc07      	bgt.n	80038e6 <_scanf_i+0xb6>
 80038d6:	4631      	mov	r1, r6
 80038d8:	4650      	mov	r0, sl
 80038da:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80038de:	4790      	blx	r2
 80038e0:	2800      	cmp	r0, #0
 80038e2:	f040 8085 	bne.w	80039f0 <_scanf_i+0x1c0>
 80038e6:	f10b 0b01 	add.w	fp, fp, #1
 80038ea:	f1bb 0f03 	cmp.w	fp, #3
 80038ee:	d1cb      	bne.n	8003888 <_scanf_i+0x58>
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	b90b      	cbnz	r3, 80038f8 <_scanf_i+0xc8>
 80038f4:	230a      	movs	r3, #10
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	4945      	ldr	r1, [pc, #276]	; (8003a10 <_scanf_i+0x1e0>)
 80038fc:	6960      	ldr	r0, [r4, #20]
 80038fe:	1ac9      	subs	r1, r1, r3
 8003900:	f000 f888 	bl	8003a14 <__sccl>
 8003904:	f04f 0b00 	mov.w	fp, #0
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d03d      	beq.n	800398c <_scanf_i+0x15c>
 8003910:	6831      	ldr	r1, [r6, #0]
 8003912:	6960      	ldr	r0, [r4, #20]
 8003914:	f891 c000 	ldrb.w	ip, [r1]
 8003918:	f810 000c 	ldrb.w	r0, [r0, ip]
 800391c:	2800      	cmp	r0, #0
 800391e:	d035      	beq.n	800398c <_scanf_i+0x15c>
 8003920:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003924:	d124      	bne.n	8003970 <_scanf_i+0x140>
 8003926:	0510      	lsls	r0, r2, #20
 8003928:	d522      	bpl.n	8003970 <_scanf_i+0x140>
 800392a:	f10b 0b01 	add.w	fp, fp, #1
 800392e:	f1b9 0f00 	cmp.w	r9, #0
 8003932:	d003      	beq.n	800393c <_scanf_i+0x10c>
 8003934:	3301      	adds	r3, #1
 8003936:	f109 39ff 	add.w	r9, r9, #4294967295
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	6873      	ldr	r3, [r6, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	6073      	str	r3, [r6, #4]
 8003944:	dd1b      	ble.n	800397e <_scanf_i+0x14e>
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	6033      	str	r3, [r6, #0]
 800394c:	68a3      	ldr	r3, [r4, #8]
 800394e:	3b01      	subs	r3, #1
 8003950:	60a3      	str	r3, [r4, #8]
 8003952:	e7d9      	b.n	8003908 <_scanf_i+0xd8>
 8003954:	f1bb 0f02 	cmp.w	fp, #2
 8003958:	d1ae      	bne.n	80038b8 <_scanf_i+0x88>
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003960:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003964:	d1bf      	bne.n	80038e6 <_scanf_i+0xb6>
 8003966:	2310      	movs	r3, #16
 8003968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396c:	6063      	str	r3, [r4, #4]
 800396e:	e7a2      	b.n	80038b6 <_scanf_i+0x86>
 8003970:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	780b      	ldrb	r3, [r1, #0]
 8003978:	f805 3b01 	strb.w	r3, [r5], #1
 800397c:	e7de      	b.n	800393c <_scanf_i+0x10c>
 800397e:	4631      	mov	r1, r6
 8003980:	4650      	mov	r0, sl
 8003982:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003986:	4798      	blx	r3
 8003988:	2800      	cmp	r0, #0
 800398a:	d0df      	beq.n	800394c <_scanf_i+0x11c>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	05d9      	lsls	r1, r3, #23
 8003990:	d50d      	bpl.n	80039ae <_scanf_i+0x17e>
 8003992:	42bd      	cmp	r5, r7
 8003994:	d909      	bls.n	80039aa <_scanf_i+0x17a>
 8003996:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800399a:	4632      	mov	r2, r6
 800399c:	4650      	mov	r0, sl
 800399e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80039a6:	4798      	blx	r3
 80039a8:	464d      	mov	r5, r9
 80039aa:	42bd      	cmp	r5, r7
 80039ac:	d028      	beq.n	8003a00 <_scanf_i+0x1d0>
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	f012 0210 	ands.w	r2, r2, #16
 80039b4:	d113      	bne.n	80039de <_scanf_i+0x1ae>
 80039b6:	702a      	strb	r2, [r5, #0]
 80039b8:	4639      	mov	r1, r7
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	4650      	mov	r0, sl
 80039be:	9e01      	ldr	r6, [sp, #4]
 80039c0:	47b0      	blx	r6
 80039c2:	f8d8 3000 	ldr.w	r3, [r8]
 80039c6:	6821      	ldr	r1, [r4, #0]
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	f8c8 2000 	str.w	r2, [r8]
 80039ce:	f011 0f20 	tst.w	r1, #32
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	d00f      	beq.n	80039f6 <_scanf_i+0x1c6>
 80039d6:	6018      	str	r0, [r3, #0]
 80039d8:	68e3      	ldr	r3, [r4, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60e3      	str	r3, [r4, #12]
 80039de:	2000      	movs	r0, #0
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	1bed      	subs	r5, r5, r7
 80039e4:	445d      	add	r5, fp
 80039e6:	442b      	add	r3, r5
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	b007      	add	sp, #28
 80039ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f0:	f04f 0b00 	mov.w	fp, #0
 80039f4:	e7ca      	b.n	800398c <_scanf_i+0x15c>
 80039f6:	07ca      	lsls	r2, r1, #31
 80039f8:	bf4c      	ite	mi
 80039fa:	8018      	strhmi	r0, [r3, #0]
 80039fc:	6018      	strpl	r0, [r3, #0]
 80039fe:	e7eb      	b.n	80039d8 <_scanf_i+0x1a8>
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7f2      	b.n	80039ea <_scanf_i+0x1ba>
 8003a04:	08003dcc 	.word	0x08003dcc
 8003a08:	08003d95 	.word	0x08003d95
 8003a0c:	08003cad 	.word	0x08003cad
 8003a10:	08003e16 	.word	0x08003e16

08003a14 <__sccl>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	780b      	ldrb	r3, [r1, #0]
 8003a18:	4604      	mov	r4, r0
 8003a1a:	2b5e      	cmp	r3, #94	; 0x5e
 8003a1c:	bf0b      	itete	eq
 8003a1e:	784b      	ldrbeq	r3, [r1, #1]
 8003a20:	1c4a      	addne	r2, r1, #1
 8003a22:	1c8a      	addeq	r2, r1, #2
 8003a24:	2100      	movne	r1, #0
 8003a26:	bf08      	it	eq
 8003a28:	2101      	moveq	r1, #1
 8003a2a:	3801      	subs	r0, #1
 8003a2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003a30:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003a34:	42a8      	cmp	r0, r5
 8003a36:	d1fb      	bne.n	8003a30 <__sccl+0x1c>
 8003a38:	b90b      	cbnz	r3, 8003a3e <__sccl+0x2a>
 8003a3a:	1e50      	subs	r0, r2, #1
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
 8003a3e:	f081 0101 	eor.w	r1, r1, #1
 8003a42:	4610      	mov	r0, r2
 8003a44:	54e1      	strb	r1, [r4, r3]
 8003a46:	4602      	mov	r2, r0
 8003a48:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a4c:	2d2d      	cmp	r5, #45	; 0x2d
 8003a4e:	d005      	beq.n	8003a5c <__sccl+0x48>
 8003a50:	2d5d      	cmp	r5, #93	; 0x5d
 8003a52:	d016      	beq.n	8003a82 <__sccl+0x6e>
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	d0f1      	beq.n	8003a3c <__sccl+0x28>
 8003a58:	462b      	mov	r3, r5
 8003a5a:	e7f2      	b.n	8003a42 <__sccl+0x2e>
 8003a5c:	7846      	ldrb	r6, [r0, #1]
 8003a5e:	2e5d      	cmp	r6, #93	; 0x5d
 8003a60:	d0fa      	beq.n	8003a58 <__sccl+0x44>
 8003a62:	42b3      	cmp	r3, r6
 8003a64:	dcf8      	bgt.n	8003a58 <__sccl+0x44>
 8003a66:	461a      	mov	r2, r3
 8003a68:	3002      	adds	r0, #2
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	4296      	cmp	r6, r2
 8003a6e:	54a1      	strb	r1, [r4, r2]
 8003a70:	dcfb      	bgt.n	8003a6a <__sccl+0x56>
 8003a72:	1af2      	subs	r2, r6, r3
 8003a74:	3a01      	subs	r2, #1
 8003a76:	42b3      	cmp	r3, r6
 8003a78:	bfa8      	it	ge
 8003a7a:	2200      	movge	r2, #0
 8003a7c:	1c5d      	adds	r5, r3, #1
 8003a7e:	18ab      	adds	r3, r5, r2
 8003a80:	e7e1      	b.n	8003a46 <__sccl+0x32>
 8003a82:	4610      	mov	r0, r2
 8003a84:	e7da      	b.n	8003a3c <__sccl+0x28>

08003a86 <__submore>:
 8003a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a92:	4299      	cmp	r1, r3
 8003a94:	d11b      	bne.n	8003ace <__submore+0x48>
 8003a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a9a:	f7ff fc11 	bl	80032c0 <_malloc_r>
 8003a9e:	b918      	cbnz	r0, 8003aa8 <__submore+0x22>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aac:	63a3      	str	r3, [r4, #56]	; 0x38
 8003aae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ab4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003ab8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003abc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003ac0:	7043      	strb	r3, [r0, #1]
 8003ac2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003ac6:	7003      	strb	r3, [r0, #0]
 8003ac8:	6020      	str	r0, [r4, #0]
 8003aca:	2000      	movs	r0, #0
 8003acc:	e7ea      	b.n	8003aa4 <__submore+0x1e>
 8003ace:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003ad0:	0077      	lsls	r7, r6, #1
 8003ad2:	463a      	mov	r2, r7
 8003ad4:	f000 f83c 	bl	8003b50 <_realloc_r>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0e0      	beq.n	8003aa0 <__submore+0x1a>
 8003ade:	eb00 0806 	add.w	r8, r0, r6
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4632      	mov	r2, r6
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f000 f824 	bl	8003b34 <memcpy>
 8003aec:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003af0:	f8c4 8000 	str.w	r8, [r4]
 8003af4:	e7e9      	b.n	8003aca <__submore+0x44>
	...

08003af8 <_sbrk_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	2300      	movs	r3, #0
 8003afc:	4d05      	ldr	r5, [pc, #20]	; (8003b14 <_sbrk_r+0x1c>)
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	f7fd fa7e 	bl	8001004 <_sbrk>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_sbrk_r+0x1a>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_sbrk_r+0x1a>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	200002b8 	.word	0x200002b8

08003b18 <memchr>:
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	b2c9      	uxtb	r1, r1
 8003b1e:	4402      	add	r2, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	d101      	bne.n	8003b2a <memchr+0x12>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e003      	b.n	8003b32 <memchr+0x1a>
 8003b2a:	7804      	ldrb	r4, [r0, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	428c      	cmp	r4, r1
 8003b30:	d1f6      	bne.n	8003b20 <memchr+0x8>
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <memcpy>:
 8003b34:	440a      	add	r2, r1
 8003b36:	4291      	cmp	r1, r2
 8003b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b3c:	d100      	bne.n	8003b40 <memcpy+0xc>
 8003b3e:	4770      	bx	lr
 8003b40:	b510      	push	{r4, lr}
 8003b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b46:	4291      	cmp	r1, r2
 8003b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4c:	d1f9      	bne.n	8003b42 <memcpy+0xe>
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <_realloc_r>:
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	4680      	mov	r8, r0
 8003b56:	4614      	mov	r4, r2
 8003b58:	460e      	mov	r6, r1
 8003b5a:	b921      	cbnz	r1, 8003b66 <_realloc_r+0x16>
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b62:	f7ff bbad 	b.w	80032c0 <_malloc_r>
 8003b66:	b92a      	cbnz	r2, 8003b74 <_realloc_r+0x24>
 8003b68:	f7ff fb42 	bl	80031f0 <_free_r>
 8003b6c:	4625      	mov	r5, r4
 8003b6e:	4628      	mov	r0, r5
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b74:	f000 f910 	bl	8003d98 <_malloc_usable_size_r>
 8003b78:	4284      	cmp	r4, r0
 8003b7a:	4607      	mov	r7, r0
 8003b7c:	d802      	bhi.n	8003b84 <_realloc_r+0x34>
 8003b7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b82:	d812      	bhi.n	8003baa <_realloc_r+0x5a>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f7ff fb9a 	bl	80032c0 <_malloc_r>
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0ed      	beq.n	8003b6e <_realloc_r+0x1e>
 8003b92:	42bc      	cmp	r4, r7
 8003b94:	4622      	mov	r2, r4
 8003b96:	4631      	mov	r1, r6
 8003b98:	bf28      	it	cs
 8003b9a:	463a      	movcs	r2, r7
 8003b9c:	f7ff ffca 	bl	8003b34 <memcpy>
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f7ff fb24 	bl	80031f0 <_free_r>
 8003ba8:	e7e1      	b.n	8003b6e <_realloc_r+0x1e>
 8003baa:	4635      	mov	r5, r6
 8003bac:	e7df      	b.n	8003b6e <_realloc_r+0x1e>
	...

08003bb0 <_strtol_l.constprop.0>:
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb6:	4686      	mov	lr, r0
 8003bb8:	4690      	mov	r8, r2
 8003bba:	d001      	beq.n	8003bc0 <_strtol_l.constprop.0+0x10>
 8003bbc:	2b24      	cmp	r3, #36	; 0x24
 8003bbe:	d906      	bls.n	8003bce <_strtol_l.constprop.0+0x1e>
 8003bc0:	f7ff faea 	bl	8003198 <__errno>
 8003bc4:	2316      	movs	r3, #22
 8003bc6:	6003      	str	r3, [r0, #0]
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bce:	460d      	mov	r5, r1
 8003bd0:	4835      	ldr	r0, [pc, #212]	; (8003ca8 <_strtol_l.constprop.0+0xf8>)
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bd8:	5d06      	ldrb	r6, [r0, r4]
 8003bda:	f016 0608 	ands.w	r6, r6, #8
 8003bde:	d1f8      	bne.n	8003bd2 <_strtol_l.constprop.0+0x22>
 8003be0:	2c2d      	cmp	r4, #45	; 0x2d
 8003be2:	d12e      	bne.n	8003c42 <_strtol_l.constprop.0+0x92>
 8003be4:	2601      	movs	r6, #1
 8003be6:	782c      	ldrb	r4, [r5, #0]
 8003be8:	1c95      	adds	r5, r2, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d057      	beq.n	8003c9e <_strtol_l.constprop.0+0xee>
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d109      	bne.n	8003c06 <_strtol_l.constprop.0+0x56>
 8003bf2:	2c30      	cmp	r4, #48	; 0x30
 8003bf4:	d107      	bne.n	8003c06 <_strtol_l.constprop.0+0x56>
 8003bf6:	782a      	ldrb	r2, [r5, #0]
 8003bf8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003bfc:	2a58      	cmp	r2, #88	; 0x58
 8003bfe:	d149      	bne.n	8003c94 <_strtol_l.constprop.0+0xe4>
 8003c00:	2310      	movs	r3, #16
 8003c02:	786c      	ldrb	r4, [r5, #1]
 8003c04:	3502      	adds	r5, #2
 8003c06:	2200      	movs	r2, #0
 8003c08:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003c0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c10:	fbbc f9f3 	udiv	r9, ip, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	fb03 ca19 	mls	sl, r3, r9, ip
 8003c1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003c1e:	2f09      	cmp	r7, #9
 8003c20:	d814      	bhi.n	8003c4c <_strtol_l.constprop.0+0x9c>
 8003c22:	463c      	mov	r4, r7
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	dd20      	ble.n	8003c6a <_strtol_l.constprop.0+0xba>
 8003c28:	1c57      	adds	r7, r2, #1
 8003c2a:	d007      	beq.n	8003c3c <_strtol_l.constprop.0+0x8c>
 8003c2c:	4581      	cmp	r9, r0
 8003c2e:	d319      	bcc.n	8003c64 <_strtol_l.constprop.0+0xb4>
 8003c30:	d101      	bne.n	8003c36 <_strtol_l.constprop.0+0x86>
 8003c32:	45a2      	cmp	sl, r4
 8003c34:	db16      	blt.n	8003c64 <_strtol_l.constprop.0+0xb4>
 8003c36:	2201      	movs	r2, #1
 8003c38:	fb00 4003 	mla	r0, r0, r3, r4
 8003c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c40:	e7eb      	b.n	8003c1a <_strtol_l.constprop.0+0x6a>
 8003c42:	2c2b      	cmp	r4, #43	; 0x2b
 8003c44:	bf04      	itt	eq
 8003c46:	782c      	ldrbeq	r4, [r5, #0]
 8003c48:	1c95      	addeq	r5, r2, #2
 8003c4a:	e7ce      	b.n	8003bea <_strtol_l.constprop.0+0x3a>
 8003c4c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003c50:	2f19      	cmp	r7, #25
 8003c52:	d801      	bhi.n	8003c58 <_strtol_l.constprop.0+0xa8>
 8003c54:	3c37      	subs	r4, #55	; 0x37
 8003c56:	e7e5      	b.n	8003c24 <_strtol_l.constprop.0+0x74>
 8003c58:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003c5c:	2f19      	cmp	r7, #25
 8003c5e:	d804      	bhi.n	8003c6a <_strtol_l.constprop.0+0xba>
 8003c60:	3c57      	subs	r4, #87	; 0x57
 8003c62:	e7df      	b.n	8003c24 <_strtol_l.constprop.0+0x74>
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	e7e8      	b.n	8003c3c <_strtol_l.constprop.0+0x8c>
 8003c6a:	1c53      	adds	r3, r2, #1
 8003c6c:	d108      	bne.n	8003c80 <_strtol_l.constprop.0+0xd0>
 8003c6e:	2322      	movs	r3, #34	; 0x22
 8003c70:	4660      	mov	r0, ip
 8003c72:	f8ce 3000 	str.w	r3, [lr]
 8003c76:	f1b8 0f00 	cmp.w	r8, #0
 8003c7a:	d0a6      	beq.n	8003bca <_strtol_l.constprop.0+0x1a>
 8003c7c:	1e69      	subs	r1, r5, #1
 8003c7e:	e006      	b.n	8003c8e <_strtol_l.constprop.0+0xde>
 8003c80:	b106      	cbz	r6, 8003c84 <_strtol_l.constprop.0+0xd4>
 8003c82:	4240      	negs	r0, r0
 8003c84:	f1b8 0f00 	cmp.w	r8, #0
 8003c88:	d09f      	beq.n	8003bca <_strtol_l.constprop.0+0x1a>
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d1f6      	bne.n	8003c7c <_strtol_l.constprop.0+0xcc>
 8003c8e:	f8c8 1000 	str.w	r1, [r8]
 8003c92:	e79a      	b.n	8003bca <_strtol_l.constprop.0+0x1a>
 8003c94:	2430      	movs	r4, #48	; 0x30
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1b5      	bne.n	8003c06 <_strtol_l.constprop.0+0x56>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	e7b3      	b.n	8003c06 <_strtol_l.constprop.0+0x56>
 8003c9e:	2c30      	cmp	r4, #48	; 0x30
 8003ca0:	d0a9      	beq.n	8003bf6 <_strtol_l.constprop.0+0x46>
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	e7af      	b.n	8003c06 <_strtol_l.constprop.0+0x56>
 8003ca6:	bf00      	nop
 8003ca8:	08003e22 	.word	0x08003e22

08003cac <_strtol_r>:
 8003cac:	f7ff bf80 	b.w	8003bb0 <_strtol_l.constprop.0>

08003cb0 <_strtoul_l.constprop.0>:
 8003cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	4686      	mov	lr, r0
 8003cb6:	460d      	mov	r5, r1
 8003cb8:	4f35      	ldr	r7, [pc, #212]	; (8003d90 <_strtoul_l.constprop.0+0xe0>)
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cc0:	5d3e      	ldrb	r6, [r7, r4]
 8003cc2:	f016 0608 	ands.w	r6, r6, #8
 8003cc6:	d1f8      	bne.n	8003cba <_strtoul_l.constprop.0+0xa>
 8003cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8003cca:	d130      	bne.n	8003d2e <_strtoul_l.constprop.0+0x7e>
 8003ccc:	2601      	movs	r6, #1
 8003cce:	782c      	ldrb	r4, [r5, #0]
 8003cd0:	1c85      	adds	r5, r0, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d057      	beq.n	8003d86 <_strtoul_l.constprop.0+0xd6>
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d109      	bne.n	8003cee <_strtoul_l.constprop.0+0x3e>
 8003cda:	2c30      	cmp	r4, #48	; 0x30
 8003cdc:	d107      	bne.n	8003cee <_strtoul_l.constprop.0+0x3e>
 8003cde:	7828      	ldrb	r0, [r5, #0]
 8003ce0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003ce4:	2858      	cmp	r0, #88	; 0x58
 8003ce6:	d149      	bne.n	8003d7c <_strtoul_l.constprop.0+0xcc>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	786c      	ldrb	r4, [r5, #1]
 8003cec:	3502      	adds	r5, #2
 8003cee:	f04f 38ff 	mov.w	r8, #4294967295
 8003cf2:	fbb8 f8f3 	udiv	r8, r8, r3
 8003cf6:	2700      	movs	r7, #0
 8003cf8:	fb03 f908 	mul.w	r9, r3, r8
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	ea6f 0909 	mvn.w	r9, r9
 8003d02:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003d06:	f1bc 0f09 	cmp.w	ip, #9
 8003d0a:	d815      	bhi.n	8003d38 <_strtoul_l.constprop.0+0x88>
 8003d0c:	4664      	mov	r4, ip
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	dd23      	ble.n	8003d5a <_strtoul_l.constprop.0+0xaa>
 8003d12:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003d16:	d007      	beq.n	8003d28 <_strtoul_l.constprop.0+0x78>
 8003d18:	4580      	cmp	r8, r0
 8003d1a:	d31b      	bcc.n	8003d54 <_strtoul_l.constprop.0+0xa4>
 8003d1c:	d101      	bne.n	8003d22 <_strtoul_l.constprop.0+0x72>
 8003d1e:	45a1      	cmp	r9, r4
 8003d20:	db18      	blt.n	8003d54 <_strtoul_l.constprop.0+0xa4>
 8003d22:	2701      	movs	r7, #1
 8003d24:	fb00 4003 	mla	r0, r0, r3, r4
 8003d28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d2c:	e7e9      	b.n	8003d02 <_strtoul_l.constprop.0+0x52>
 8003d2e:	2c2b      	cmp	r4, #43	; 0x2b
 8003d30:	bf04      	itt	eq
 8003d32:	782c      	ldrbeq	r4, [r5, #0]
 8003d34:	1c85      	addeq	r5, r0, #2
 8003d36:	e7cc      	b.n	8003cd2 <_strtoul_l.constprop.0+0x22>
 8003d38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003d3c:	f1bc 0f19 	cmp.w	ip, #25
 8003d40:	d801      	bhi.n	8003d46 <_strtoul_l.constprop.0+0x96>
 8003d42:	3c37      	subs	r4, #55	; 0x37
 8003d44:	e7e3      	b.n	8003d0e <_strtoul_l.constprop.0+0x5e>
 8003d46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003d4a:	f1bc 0f19 	cmp.w	ip, #25
 8003d4e:	d804      	bhi.n	8003d5a <_strtoul_l.constprop.0+0xaa>
 8003d50:	3c57      	subs	r4, #87	; 0x57
 8003d52:	e7dc      	b.n	8003d0e <_strtoul_l.constprop.0+0x5e>
 8003d54:	f04f 37ff 	mov.w	r7, #4294967295
 8003d58:	e7e6      	b.n	8003d28 <_strtoul_l.constprop.0+0x78>
 8003d5a:	1c7b      	adds	r3, r7, #1
 8003d5c:	d106      	bne.n	8003d6c <_strtoul_l.constprop.0+0xbc>
 8003d5e:	2322      	movs	r3, #34	; 0x22
 8003d60:	4638      	mov	r0, r7
 8003d62:	f8ce 3000 	str.w	r3, [lr]
 8003d66:	b932      	cbnz	r2, 8003d76 <_strtoul_l.constprop.0+0xc6>
 8003d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6c:	b106      	cbz	r6, 8003d70 <_strtoul_l.constprop.0+0xc0>
 8003d6e:	4240      	negs	r0, r0
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	d0f9      	beq.n	8003d68 <_strtoul_l.constprop.0+0xb8>
 8003d74:	b107      	cbz	r7, 8003d78 <_strtoul_l.constprop.0+0xc8>
 8003d76:	1e69      	subs	r1, r5, #1
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	e7f5      	b.n	8003d68 <_strtoul_l.constprop.0+0xb8>
 8003d7c:	2430      	movs	r4, #48	; 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1b5      	bne.n	8003cee <_strtoul_l.constprop.0+0x3e>
 8003d82:	2308      	movs	r3, #8
 8003d84:	e7b3      	b.n	8003cee <_strtoul_l.constprop.0+0x3e>
 8003d86:	2c30      	cmp	r4, #48	; 0x30
 8003d88:	d0a9      	beq.n	8003cde <_strtoul_l.constprop.0+0x2e>
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	e7af      	b.n	8003cee <_strtoul_l.constprop.0+0x3e>
 8003d8e:	bf00      	nop
 8003d90:	08003e22 	.word	0x08003e22

08003d94 <_strtoul_r>:
 8003d94:	f7ff bf8c 	b.w	8003cb0 <_strtoul_l.constprop.0>

08003d98 <_malloc_usable_size_r>:
 8003d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9c:	1f18      	subs	r0, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfbc      	itt	lt
 8003da2:	580b      	ldrlt	r3, [r1, r0]
 8003da4:	18c0      	addlt	r0, r0, r3
 8003da6:	4770      	bx	lr

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr

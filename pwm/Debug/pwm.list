
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004780  08004780  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004780  08004780  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000005c  080047e4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080047e4  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca7b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214c  00000000  00000000  0002cb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002ec90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f3  00000000  00000000  0002f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017657  00000000  00000000  00030353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5cb  00000000  00000000  000479aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000888db  00000000  00000000  00056f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b0c  00000000  00000000  000df850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000e335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800460c 	.word	0x0800460c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800460c 	.word	0x0800460c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200c      	movs	r0, #12
 8000180:	f000 feff 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000184:	200c      	movs	r0, #12
 8000186:	f000 ff18 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	200d      	movs	r0, #13
 8000190:	f000 fef7 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000194:	200d      	movs	r0, #13
 8000196:	f000 ff10 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ae:	4b14      	ldr	r3, [pc, #80]	; (8000200 <MX_GPIO_Init+0x58>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a13      	ldr	r2, [pc, #76]	; (8000200 <MX_GPIO_Init+0x58>)
 80001b4:	f043 0320 	orr.w	r3, r3, #32
 80001b8:	6193      	str	r3, [r2, #24]
 80001ba:	4b11      	ldr	r3, [pc, #68]	; (8000200 <MX_GPIO_Init+0x58>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	f003 0320 	and.w	r3, r3, #32
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <MX_GPIO_Init+0x58>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <MX_GPIO_Init+0x58>)
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	6193      	str	r3, [r2, #24]
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <MX_GPIO_Init+0x58>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	f003 0304 	and.w	r3, r3, #4
 80001da:	60bb      	str	r3, [r7, #8]
 80001dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <MX_GPIO_Init+0x58>)
 80001e0:	699b      	ldr	r3, [r3, #24]
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <MX_GPIO_Init+0x58>)
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	6193      	str	r3, [r2, #24]
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <MX_GPIO_Init+0x58>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	f003 0308 	and.w	r3, r3, #8
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]

}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	40021000 	.word	0x40021000

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fd82 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f838 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f7ff ffca 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000214:	f7ff ffa2 	bl	800015c <MX_DMA_Init>
  MX_TIM1_Init();
 8000218:	f000 fa9c 	bl	8000754 <MX_TIM1_Init>
  MX_TIM2_Init();
 800021c:	f000 fb5e 	bl	80008dc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000220:	f000 fc7c 	bl	8000b1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000224:	2100      	movs	r1, #0
 8000226:	4812      	ldr	r0, [pc, #72]	; (8000270 <main+0x6c>)
 8000228:	f001 ff32 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800022c:	2104      	movs	r1, #4
 800022e:	4810      	ldr	r0, [pc, #64]	; (8000270 <main+0x6c>)
 8000230:	f001 ff2e 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000234:	2108      	movs	r1, #8
 8000236:	480e      	ldr	r0, [pc, #56]	; (8000270 <main+0x6c>)
 8000238:	f001 ff2a 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800023c:	210c      	movs	r1, #12
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <main+0x6c>)
 8000240:	f001 ff26 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000244:	2100      	movs	r1, #0
 8000246:	480b      	ldr	r0, [pc, #44]	; (8000274 <main+0x70>)
 8000248:	f001 ff22 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800024c:	2104      	movs	r1, #4
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <main+0x70>)
 8000250:	f001 ff1e 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000254:	2108      	movs	r1, #8
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0x70>)
 8000258:	f001 ff1a 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800025c:	210c      	movs	r1, #12
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <main+0x70>)
 8000260:	f001 ff16 	bl	8002090 <HAL_TIM_PWM_Start>
HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData, 10);
 8000264:	220a      	movs	r2, #10
 8000266:	4904      	ldr	r1, [pc, #16]	; (8000278 <main+0x74>)
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <main+0x78>)
 800026a:	f002 fe26 	bl	8002eba <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x6a>
 8000270:	20000088 	.word	0x20000088
 8000274:	200000d0 	.word	0x200000d0
 8000278:	20000078 	.word	0x20000078
 800027c:	20000118 	.word	0x20000118

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fbac 	bl	80039ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fa29 	bl	8001720 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 f97a 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fc96 	bl	8001c24 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fe:	f000 f965 	bl	80005cc <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	807b      	strh	r3, [r7, #2]
	if(huart == &huart3)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <HAL_UARTEx_RxEventCallback+0x8c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d127      	bne.n	8000370 <HAL_UARTEx_RxEventCallback+0x64>
	{	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData, 10);
 8000320:	220a      	movs	r2, #10
 8000322:	491e      	ldr	r1, [pc, #120]	; (800039c <HAL_UARTEx_RxEventCallback+0x90>)
 8000324:	481c      	ldr	r0, [pc, #112]	; (8000398 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000326:	f002 fdc8 	bl	8002eba <HAL_UARTEx_ReceiveToIdle_IT>
		sscanf(RxData,"%d",&vaule);
 800032a:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 800032c:	491d      	ldr	r1, [pc, #116]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x98>)
 800032e:	481b      	ldr	r0, [pc, #108]	; (800039c <HAL_UARTEx_RxEventCallback+0x90>)
 8000330:	f003 fb30 	bl	8003994 <siscanf>
		if(vaule == 0)set_stop();
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d101      	bne.n	8000340 <HAL_UARTEx_RxEventCallback+0x34>
 800033c:	f000 f91c 	bl	8000578 <set_stop>
		if(vaule == 1)set_forward();
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <HAL_UARTEx_RxEventCallback+0x40>
 8000348:	f000 f8e6 	bl	8000518 <set_forward>
		if(vaule == 2)set_backward();
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b02      	cmp	r3, #2
 8000352:	d101      	bne.n	8000358 <HAL_UARTEx_RxEventCallback+0x4c>
 8000354:	f000 f8f8 	bl	8000548 <set_backward>
		if(vaule == 3)set_left();
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b03      	cmp	r3, #3
 800035e:	d101      	bne.n	8000364 <HAL_UARTEx_RxEventCallback+0x58>
 8000360:	f000 f8aa 	bl	80004b8 <set_left>
		if(vaule == 4)set_right();
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d101      	bne.n	8000370 <HAL_UARTEx_RxEventCallback+0x64>
 800036c:	f000 f8bc 	bl	80004e8 <set_right>

	}
	for(int i=0;i<10;i++)
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	e007      	b.n	8000386 <HAL_UARTEx_RxEventCallback+0x7a>
					{
							RxData[i]=0;
 8000376:	4a09      	ldr	r2, [pc, #36]	; (800039c <HAL_UARTEx_RxEventCallback+0x90>)
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	4413      	add	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<10;i++)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b09      	cmp	r3, #9
 800038a:	ddf4      	ble.n	8000376 <HAL_UARTEx_RxEventCallback+0x6a>
					}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000118 	.word	0x20000118
 800039c:	20000078 	.word	0x20000078
 80003a0:	20000082 	.word	0x20000082
 80003a4:	08004624 	.word	0x08004624

080003a8 <set_pwm_direction_speed_4>:

void set_pwm_direction_speed_4(int dir,uint32_t speed)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	if(dir == 0)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d107      	bne.n	80003c8 <set_pwm_direction_speed_4+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <set_pwm_direction_speed_4+0x40>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	635a      	str	r2, [r3, #52]	; 0x34


		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <set_pwm_direction_speed_4+0x40>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2200      	movs	r2, #0
 80003c6:	639a      	str	r2, [r3, #56]	; 0x38

	}
	if(dir == 1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d107      	bne.n	80003de <set_pwm_direction_speed_4+0x36>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <set_pwm_direction_speed_4+0x40>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <set_pwm_direction_speed_4+0x40>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2200      	movs	r2, #0
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34

	}
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20000088 	.word	0x20000088

080003ec <set_pwm_direction_speed_2>:
void set_pwm_direction_speed_2(int dir,uint32_t speed)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
	if(dir == 0)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d107      	bne.n	800040c <set_pwm_direction_speed_2+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <set_pwm_direction_speed_2+0x40>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <set_pwm_direction_speed_2+0x40>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2200      	movs	r2, #0
 800040a:	641a      	str	r2, [r3, #64]	; 0x40

	}
	if(dir == 1)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d107      	bne.n	8000422 <set_pwm_direction_speed_2+0x36>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,speed);
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <set_pwm_direction_speed_2+0x40>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <set_pwm_direction_speed_2+0x40>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2200      	movs	r2, #0
 8000420:	63da      	str	r2, [r3, #60]	; 0x3c

	}
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000088 	.word	0x20000088

08000430 <set_pwm_direction_speed_1>:
void set_pwm_direction_speed_1(int dir,uint32_t speed)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
	if(dir == 0)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d107      	bne.n	8000450 <set_pwm_direction_speed_1+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,speed);
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <set_pwm_direction_speed_1+0x40>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <set_pwm_direction_speed_1+0x40>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2200      	movs	r2, #0
 800044e:	639a      	str	r2, [r3, #56]	; 0x38

	}
	if(dir == 1)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d107      	bne.n	8000466 <set_pwm_direction_speed_1+0x36>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,speed);
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <set_pwm_direction_speed_1+0x40>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <set_pwm_direction_speed_1+0x40>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34

	}
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	200000d0 	.word	0x200000d0

08000474 <set_pwm_direction_speed_3>:
void set_pwm_direction_speed_3(int dir,uint32_t speed)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	if(dir == 0)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d107      	bne.n	8000494 <set_pwm_direction_speed_3+0x20>
	{
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,speed);
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <set_pwm_direction_speed_3+0x40>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <set_pwm_direction_speed_3+0x40>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2200      	movs	r2, #0
 8000492:	641a      	str	r2, [r3, #64]	; 0x40

	}
	if(dir == 1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d107      	bne.n	80004aa <set_pwm_direction_speed_3+0x36>
	{
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,speed);
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <set_pwm_direction_speed_3+0x40>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <set_pwm_direction_speed_3+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2200      	movs	r2, #0
 80004a8:	63da      	str	r2, [r3, #60]	; 0x3c

		}
	}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	200000d0 	.word	0x200000d0

080004b8 <set_left>:
void set_left()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	 set_pwm_direction_speed_1(1, 10000);
 80004bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffb5 	bl	8000430 <set_pwm_direction_speed_1>
		  set_pwm_direction_speed_2(0, 10000);
 80004c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ff8e 	bl	80003ec <set_pwm_direction_speed_2>
		  set_pwm_direction_speed_3(0, 10000);
 80004d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ffcd 	bl	8000474 <set_pwm_direction_speed_3>
		  set_pwm_direction_speed_4(1, 10000);
 80004da:	f242 7110 	movw	r1, #10000	; 0x2710
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff ff62 	bl	80003a8 <set_pwm_direction_speed_4>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <set_right>:
void set_right()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	set_pwm_direction_speed_1(0, 10000);
 80004ec:	f242 7110 	movw	r1, #10000	; 0x2710
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff9d 	bl	8000430 <set_pwm_direction_speed_1>
		  set_pwm_direction_speed_2(1, 10000);
 80004f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff ff76 	bl	80003ec <set_pwm_direction_speed_2>
		  set_pwm_direction_speed_3(1, 10000);
 8000500:	f242 7110 	movw	r1, #10000	; 0x2710
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff ffb5 	bl	8000474 <set_pwm_direction_speed_3>
		  set_pwm_direction_speed_4(0, 10000);
 800050a:	f242 7110 	movw	r1, #10000	; 0x2710
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ff4a 	bl	80003a8 <set_pwm_direction_speed_4>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <set_forward>:
		  set_pwm_direction_speed_2(0, 10000);
		  set_pwm_direction_speed_3(1, 10000);
		  set_pwm_direction_speed_4(0, 10000);
}
void set_forward()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	 set_pwm_direction_speed_1(0, 10000);
 800051c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff ff85 	bl	8000430 <set_pwm_direction_speed_1>
		  set_pwm_direction_speed_2(0, 10000);
 8000526:	f242 7110 	movw	r1, #10000	; 0x2710
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ff5e 	bl	80003ec <set_pwm_direction_speed_2>
		  set_pwm_direction_speed_3(0, 10000);
 8000530:	f242 7110 	movw	r1, #10000	; 0x2710
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ff9d 	bl	8000474 <set_pwm_direction_speed_3>
		  set_pwm_direction_speed_4(0, 10000);
 800053a:	f242 7110 	movw	r1, #10000	; 0x2710
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff ff32 	bl	80003a8 <set_pwm_direction_speed_4>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <set_backward>:
void set_backward()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	 set_pwm_direction_speed_1(1, 10000);
 800054c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff ff6d 	bl	8000430 <set_pwm_direction_speed_1>
		  set_pwm_direction_speed_2(1, 10000);
 8000556:	f242 7110 	movw	r1, #10000	; 0x2710
 800055a:	2001      	movs	r0, #1
 800055c:	f7ff ff46 	bl	80003ec <set_pwm_direction_speed_2>
		  set_pwm_direction_speed_3(1, 10000);
 8000560:	f242 7110 	movw	r1, #10000	; 0x2710
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ff85 	bl	8000474 <set_pwm_direction_speed_3>
		  set_pwm_direction_speed_4(1, 10000);
 800056a:	f242 7110 	movw	r1, #10000	; 0x2710
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff ff1a 	bl	80003a8 <set_pwm_direction_speed_4>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <set_stop>:
void set_stop()
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <set_stop+0x4c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2200      	movs	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <set_stop+0x4c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <set_stop+0x4c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <set_stop+0x4c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <set_stop+0x50>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <set_stop+0x50>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <set_stop+0x50>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <set_stop+0x50>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	641a      	str	r2, [r3, #64]	; 0x40

}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000088 	.word	0x20000088
 80005c8:	200000d0 	.word	0x200000d0

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_MspInit+0x5c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_MspInit+0x5c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x5c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x5c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_MspInit+0x60>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_MspInit+0x60>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	40010000 	.word	0x40010000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 fb8b 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <DMA1_Channel2_IRQHandler+0x10>)
 8000692:	f000 fdbb 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001a4 	.word	0x200001a4

080006a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <DMA1_Channel3_IRQHandler+0x10>)
 80006a6:	f000 fdb1 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000160 	.word	0x20000160

080006b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <TIM2_IRQHandler+0x10>)
 80006ba:	f001 fd8b 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000d0 	.word	0x200000d0

080006c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USART3_IRQHandler+0x10>)
 80006ce:	f002 fc51 	bl	8002f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000118 	.word	0x20000118

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f003 f976 	bl	80039fc <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20005000 	.word	0x20005000
 800073c:	00000400 	.word	0x00000400
 8000740:	20000084 	.word	0x20000084
 8000744:	20000338 	.word	0x20000338

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f003 f92d 	bl	80039ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000792:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <MX_TIM1_Init+0x180>)
 8000794:	4a50      	ldr	r2, [pc, #320]	; (80008d8 <MX_TIM1_Init+0x184>)
 8000796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000798:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <MX_TIM1_Init+0x180>)
 800079a:	2247      	movs	r2, #71	; 0x47
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b4d      	ldr	r3, [pc, #308]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b48      	ldr	r3, [pc, #288]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007be:	4845      	ldr	r0, [pc, #276]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007c0:	f001 fbbe 	bl	8001f40 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007ca:	f7ff feff 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	4619      	mov	r1, r3
 80007da:	483e      	ldr	r0, [pc, #248]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007dc:	f001 fec4 	bl	8002568 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007e6:	f7ff fef1 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ea:	483a      	ldr	r0, [pc, #232]	; (80008d4 <MX_TIM1_Init+0x180>)
 80007ec:	f001 fbf7 	bl	8001fde <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007f6:	f7ff fee9 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000806:	4619      	mov	r1, r3
 8000808:	4832      	ldr	r0, [pc, #200]	; (80008d4 <MX_TIM1_Init+0x180>)
 800080a:	f002 fa45 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000814:	f7ff feda 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MX_TIM1_Init+0x180>)
 800083e:	f001 fdd1 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000848:	f7ff fec0 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	2204      	movs	r2, #4
 8000852:	4619      	mov	r1, r3
 8000854:	481f      	ldr	r0, [pc, #124]	; (80008d4 <MX_TIM1_Init+0x180>)
 8000856:	f001 fdc5 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000860:	f7ff feb4 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2208      	movs	r2, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <MX_TIM1_Init+0x180>)
 800086e:	f001 fdb9 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000878:	f7ff fea8 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	220c      	movs	r2, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_TIM1_Init+0x180>)
 8000886:	f001 fdad 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000890:	f7ff fe9c 	bl	80005cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MX_TIM1_Init+0x180>)
 80008b8:	f002 fa4c 	bl	8002d54 <HAL_TIMEx_ConfigBreakDeadTime>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008c2:	f7ff fe83 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <MX_TIM1_Init+0x180>)
 80008c8:	f000 f8d6 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 80008cc:	bf00      	nop
 80008ce:	3758      	adds	r7, #88	; 0x58
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000088 	.word	0x20000088
 80008d8:	40012c00 	.word	0x40012c00

080008dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_TIM2_Init+0x128>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000916:	2247      	movs	r2, #71	; 0x47
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_TIM2_Init+0x128>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000922:	f242 720f 	movw	r2, #9999	; 0x270f
 8000926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <MX_TIM2_Init+0x128>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000934:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000936:	f001 fb03 	bl	8001f40 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000940:	f7ff fe44 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	4619      	mov	r1, r3
 8000950:	482c      	ldr	r0, [pc, #176]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000952:	f001 fe09 	bl	8002568 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800095c:	f7ff fe36 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000960:	4828      	ldr	r0, [pc, #160]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000962:	f001 fb3c 	bl	8001fde <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800096c:	f7ff fe2e 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4619      	mov	r1, r3
 800097e:	4821      	ldr	r0, [pc, #132]	; (8000a04 <MX_TIM2_Init+0x128>)
 8000980:	f002 f98a 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800098a:	f7ff fe1f 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <MX_TIM2_Init+0x128>)
 80009a6:	f001 fd1d 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009b0:	f7ff fe0c 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2204      	movs	r2, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MX_TIM2_Init+0x128>)
 80009bc:	f001 fd12 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009c6:	f7ff fe01 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2208      	movs	r2, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM2_Init+0x128>)
 80009d2:	f001 fd07 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80009dc:	f7ff fdf6 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	220c      	movs	r2, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM2_Init+0x128>)
 80009e8:	f001 fcfc 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80009f2:	f7ff fdeb 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM2_Init+0x128>)
 80009f8:	f000 f83e 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3738      	adds	r7, #56	; 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000d0 	.word	0x200000d0

08000a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_TIM_Base_MspInit+0x68>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10c      	bne.n	8000a34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a32:	e018      	b.n	8000a66 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d113      	bne.n	8000a66 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_TIM_Base_MspInit+0x6c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 fa91 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a60:	201c      	movs	r0, #28
 8000a62:	f000 faaa 	bl	8000fba <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_TIM_MspPostInit+0x98>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d119      	bne.n	8000acc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000ab0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <HAL_TIM_MspPostInit+0xa0>)
 8000ac6:	f000 fca7 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aca:	e01c      	b.n	8000b06 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad4:	d117      	bne.n	8000b06 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_TIM_MspPostInit+0x9c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	230f      	movs	r3, #15
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_TIM_MspPostInit+0xa0>)
 8000b02:	f000 fc89 	bl	8001418 <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800

08000b1c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART3_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f002 f961 	bl	8002e1a <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f7ff fd35 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000118 	.word	0x20000118
 8000b6c:	40004800 	.word	0x40004800

08000b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <HAL_UART_MspInit+0x138>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	f040 8086 	bne.w	8000c9e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a45      	ldr	r2, [pc, #276]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b43      	ldr	r3, [pc, #268]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_UART_MspInit+0x13c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4836      	ldr	r0, [pc, #216]	; (8000cb0 <HAL_UART_MspInit+0x140>)
 8000bd8:	f000 fc1e 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	482f      	ldr	r0, [pc, #188]	; (8000cb0 <HAL_UART_MspInit+0x140>)
 8000bf2:	f000 fc11 	bl	8001418 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000bf8:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <HAL_UART_MspInit+0x148>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c26:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c28:	f000 f9e2 	bl	8000ff0 <HAL_DMA_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000c32:	f7ff fccb 	bl	80005cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <HAL_UART_MspInit+0x144>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_UART_MspInit+0x150>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c74:	f000 f9bc 	bl	8000ff0 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000c7e:	f7ff fca5 	bl	80005cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_UART_MspInit+0x14c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2027      	movs	r0, #39	; 0x27
 8000c94:	f000 f975 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c98:	2027      	movs	r0, #39	; 0x27
 8000c9a:	f000 f98e 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	20000160 	.word	0x20000160
 8000cb8:	40020030 	.word	0x40020030
 8000cbc:	200001a4 	.word	0x200001a4
 8000cc0:	4002001c 	.word	0x4002001c

08000cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc4:	f7ff fd40 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cca:	490c      	ldr	r1, [pc, #48]	; (8000cfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce0:	4c09      	ldr	r4, [pc, #36]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fe8b 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fa87 	bl	8000204 <main>
  bx lr
 8000cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d00:	08004788 	.word	0x08004788
  ldr r2, =_sbss
 8000d04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d08:	20000334 	.word	0x20000334

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x28>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x28>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f923 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fc54 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f93b 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f903 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_IncTick+0x20>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	200001e8 	.word	0x200001e8

08000dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	200001e8 	.word	0x200001e8

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4906      	ldr	r1, [pc, #24]	; (8000e6c <__NVIC_EnableIRQ+0x34>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff90 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff2d 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff42 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff90 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5f 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff35 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e043      	b.n	800108e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_DMA_Init+0xa8>)
 800100e:	4413      	add	r3, r2
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <HAL_DMA_Init+0xac>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	009a      	lsls	r2, r3, #2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_DMA_Init+0xb0>)
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800103a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800103e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	bffdfff8 	.word	0xbffdfff8
 800109c:	cccccccd 	.word	0xcccccccd
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d008      	beq.n	80010ce <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e020      	b.n	8001110 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d005      	beq.n	8001140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e051      	b.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_DMA_Abort_IT+0xd4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d029      	beq.n	80011be <HAL_DMA_Abort_IT+0xa2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_DMA_Abort_IT+0xd8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d022      	beq.n	80011ba <HAL_DMA_Abort_IT+0x9e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_DMA_Abort_IT+0xdc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01a      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x98>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_DMA_Abort_IT+0xe0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d012      	beq.n	80011ae <HAL_DMA_Abort_IT+0x92>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_DMA_Abort_IT+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00a      	beq.n	80011a8 <HAL_DMA_Abort_IT+0x8c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_DMA_Abort_IT+0xe8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d102      	bne.n	80011a2 <HAL_DMA_Abort_IT+0x86>
 800119c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011a0:	e00e      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a6:	e00b      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	e008      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	e005      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	e002      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ba:	2310      	movs	r3, #16
 80011bc:	e000      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011be:	2301      	movs	r3, #1
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_DMA_Abort_IT+0xec>)
 80011c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    } 
  }
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020008 	.word	0x40020008
 80011f4:	4002001c 	.word	0x4002001c
 80011f8:	40020030 	.word	0x40020030
 80011fc:	40020044 	.word	0x40020044
 8001200:	40020058 	.word	0x40020058
 8001204:	4002006c 	.word	0x4002006c
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	2204      	movs	r2, #4
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d04f      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xc8>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d04a      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d107      	bne.n	800125c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a66      	ldr	r2, [pc, #408]	; (80013fc <HAL_DMA_IRQHandler+0x1f0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d029      	beq.n	80012ba <HAL_DMA_IRQHandler+0xae>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a65      	ldr	r2, [pc, #404]	; (8001400 <HAL_DMA_IRQHandler+0x1f4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d022      	beq.n	80012b6 <HAL_DMA_IRQHandler+0xaa>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_DMA_IRQHandler+0x1f8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xa4>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a62      	ldr	r2, [pc, #392]	; (8001408 <HAL_DMA_IRQHandler+0x1fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d012      	beq.n	80012aa <HAL_DMA_IRQHandler+0x9e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_DMA_IRQHandler+0x200>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x98>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_DMA_IRQHandler+0x204>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <HAL_DMA_IRQHandler+0x92>
 8001298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129c:	e00e      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 800129e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012a2:	e00b      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a8:	e008      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ae:	e005      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b4:	e002      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	e000      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012ba:	2304      	movs	r3, #4
 80012bc:	4a55      	ldr	r2, [pc, #340]	; (8001414 <HAL_DMA_IRQHandler+0x208>)
 80012be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8094 	beq.w	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012d2:	e08e      	b.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	2202      	movs	r2, #2
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d056      	beq.n	8001392 <HAL_DMA_IRQHandler+0x186>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d051      	beq.n	8001392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020a 	bic.w	r2, r2, #10
 800130a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a38      	ldr	r2, [pc, #224]	; (80013fc <HAL_DMA_IRQHandler+0x1f0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d029      	beq.n	8001372 <HAL_DMA_IRQHandler+0x166>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a37      	ldr	r2, [pc, #220]	; (8001400 <HAL_DMA_IRQHandler+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <HAL_DMA_IRQHandler+0x162>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_DMA_IRQHandler+0x1f8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01a      	beq.n	8001368 <HAL_DMA_IRQHandler+0x15c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_DMA_IRQHandler+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0x156>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a32      	ldr	r2, [pc, #200]	; (800140c <HAL_DMA_IRQHandler+0x200>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00a      	beq.n	800135c <HAL_DMA_IRQHandler+0x150>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a31      	ldr	r2, [pc, #196]	; (8001410 <HAL_DMA_IRQHandler+0x204>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d102      	bne.n	8001356 <HAL_DMA_IRQHandler+0x14a>
 8001350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001354:	e00e      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800135a:	e00b      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 800135c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001360:	e008      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	e005      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136c:	e002      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 800136e:	2320      	movs	r3, #32
 8001370:	e000      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001372:	2302      	movs	r3, #2
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_DMA_IRQHandler+0x208>)
 8001376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d034      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001390:	e02f      	b.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	2208      	movs	r2, #8
 8001398:	409a      	lsls	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d028      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 020e 	bic.w	r2, r2, #14
 80013ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
    }
  }
  return;
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
}
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020008 	.word	0x40020008
 8001400:	4002001c 	.word	0x4002001c
 8001404:	40020030 	.word	0x40020030
 8001408:	40020044 	.word	0x40020044
 800140c:	40020058 	.word	0x40020058
 8001410:	4002006c 	.word	0x4002006c
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b08b      	sub	sp, #44	; 0x2c
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e169      	b.n	8001700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800142c:	2201      	movs	r2, #1
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8158 	bne.w	80016fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d05e      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001454:	4a98      	ldr	r2, [pc, #608]	; (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d875      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800145a:	4a98      	ldr	r2, [pc, #608]	; (80016bc <HAL_GPIO_Init+0x2a4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d058      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001460:	4a96      	ldr	r2, [pc, #600]	; (80016bc <HAL_GPIO_Init+0x2a4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d86f      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001466:	4a96      	ldr	r2, [pc, #600]	; (80016c0 <HAL_GPIO_Init+0x2a8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d052      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 800146c:	4a94      	ldr	r2, [pc, #592]	; (80016c0 <HAL_GPIO_Init+0x2a8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d869      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001472:	4a94      	ldr	r2, [pc, #592]	; (80016c4 <HAL_GPIO_Init+0x2ac>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04c      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001478:	4a92      	ldr	r2, [pc, #584]	; (80016c4 <HAL_GPIO_Init+0x2ac>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d863      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800147e:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d046      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001484:	4a90      	ldr	r2, [pc, #576]	; (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d85d      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800148a:	2b12      	cmp	r3, #18
 800148c:	d82a      	bhi.n	80014e4 <HAL_GPIO_Init+0xcc>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d859      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <HAL_GPIO_Init+0x80>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	08001513 	.word	0x08001513
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001541 	.word	0x08001541
 80014a8:	08001547 	.word	0x08001547
 80014ac:	08001547 	.word	0x08001547
 80014b0:	08001547 	.word	0x08001547
 80014b4:	08001547 	.word	0x08001547
 80014b8:	08001547 	.word	0x08001547
 80014bc:	08001547 	.word	0x08001547
 80014c0:	08001547 	.word	0x08001547
 80014c4:	08001547 	.word	0x08001547
 80014c8:	08001547 	.word	0x08001547
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001547 	.word	0x08001547
 80014d4:	08001547 	.word	0x08001547
 80014d8:	08001547 	.word	0x08001547
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	08001509 	.word	0x08001509
 80014e4:	4a79      	ldr	r2, [pc, #484]	; (80016cc <HAL_GPIO_Init+0x2b4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e02c      	b.n	8001546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e029      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	3304      	adds	r3, #4
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e024      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	3308      	adds	r3, #8
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e01f      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	330c      	adds	r3, #12
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e01a      	b.n	8001548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151a:	2304      	movs	r3, #4
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e013      	b.n	8001548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	611a      	str	r2, [r3, #16]
          break;
 8001532:	e009      	b.n	8001548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	615a      	str	r2, [r3, #20]
          break;
 800153e:	e003      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x130>
          break;
 8001546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	; 0xff
 800154c:	d801      	bhi.n	8001552 <HAL_GPIO_Init+0x13a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_Init+0x13e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d802      	bhi.n	8001564 <HAL_GPIO_Init+0x14c>
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x152>
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3b08      	subs	r3, #8
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	210f      	movs	r1, #15
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	431a      	orrs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80b1 	beq.w	80016fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <HAL_GPIO_Init+0x2c0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_Init+0x1ec>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3f      	ldr	r2, [pc, #252]	; (80016dc <HAL_GPIO_Init+0x2c4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1e8>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <HAL_GPIO_Init+0x2c8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1e4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <HAL_GPIO_Init+0x2cc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1e0>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001604:	2300      	movs	r3, #0
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001616:	492f      	ldr	r1, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	492c      	ldr	r1, [pc, #176]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	43db      	mvns	r3, r3
 8001646:	4928      	ldr	r1, [pc, #160]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001648:	4013      	ands	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	4922      	ldr	r1, [pc, #136]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	491e      	ldr	r1, [pc, #120]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4918      	ldr	r1, [pc, #96]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4914      	ldr	r1, [pc, #80]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e021      	b.n	80016fa <HAL_GPIO_Init+0x2e2>
 80016b6:	bf00      	nop
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10220000 	.word	0x10220000
 80016c4:	10210000 	.word	0x10210000
 80016c8:	10120000 	.word	0x10120000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4909      	ldr	r1, [pc, #36]	; (800171c <HAL_GPIO_Init+0x304>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f ae8e 	bne.w	800142c <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	372c      	adds	r7, #44	; 0x2c
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e272      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8087 	beq.w	800184e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b04      	cmp	r3, #4
 800174a:	d00c      	beq.n	8001766 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800174c:	4b8f      	ldr	r3, [pc, #572]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d112      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
 8001758:	4b8c      	ldr	r3, [pc, #560]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d10b      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4b89      	ldr	r3, [pc, #548]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d06c      	beq.n	800184c <HAL_RCC_OscConfig+0x12c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d168      	bne.n	800184c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e24c      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x76>
 8001788:	4b80      	ldr	r3, [pc, #512]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a7f      	ldr	r2, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e02e      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b78      	ldr	r3, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a77      	ldr	r2, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0xbc>
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a71      	ldr	r2, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017dc:	4b6b      	ldr	r3, [pc, #428]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a67      	ldr	r2, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fae0 	bl	8000dc0 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fadc 	bl	8000dc0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e200      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xe4>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff facc 	bl	8000dc0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fac8 	bl	8000dc0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1ec      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x10c>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
 8001872:	4b46      	ldr	r3, [pc, #280]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4939      	ldr	r1, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa81 	bl	8000dc0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa7d 	bl	8000dc0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4927      	ldr	r1, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa60 	bl	8000dc0 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fa5c 	bl	8000dc0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e180      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03a      	beq.n	80019a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_RCC_OscConfig+0x274>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fa40 	bl	8000dc0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fa3c 	bl	8000dc0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e160      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_RCC_OscConfig+0x26c>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f000 face 	bl	8001f04 <RCC_Delay>
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_RCC_OscConfig+0x274>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fa26 	bl	8000dc0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001976:	e00f      	b.n	8001998 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fa22 	bl	8000dc0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d908      	bls.n	8001998 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e146      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	42420000 	.word	0x42420000
 8001994:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e9      	bne.n	8001978 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a6 	beq.w	8001afe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10d      	bne.n	80019de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7e      	ldr	r2, [pc, #504]	; (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f9e3 	bl	8000dc0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff f9df 	bl	8000dc0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	; 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e103      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x312>
 8001a24:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a6e      	ldr	r2, [pc, #440]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e02d      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x334>
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a69      	ldr	r2, [pc, #420]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a66      	ldr	r2, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	e01c      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x356>
 8001a5c:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a60      	ldr	r2, [pc, #384]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a76:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6213      	str	r3, [r2, #32]
 8001a82:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d015      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f993 	bl	8000dc0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff f98f 	bl	8000dc0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0b1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ee      	beq.n	8001a9e <HAL_RCC_OscConfig+0x37e>
 8001ac0:	e014      	b.n	8001aec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f97d 	bl	8000dc0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f979 	bl	8000dc0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e09b      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d061      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d146      	bne.n	8001baa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f94d 	bl	8000dc0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f949 	bl	8000dc0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e06d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d108      	bne.n	8001b64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4921      	ldr	r1, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a19      	ldr	r1, [r3, #32]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	430b      	orrs	r3, r1
 8001b76:	491b      	ldr	r1, [pc, #108]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff f91d 	bl	8000dc0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff f919 	bl	8000dc0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e03d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46a>
 8001ba8:	e035      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f906 	bl	8000dc0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f902 	bl	8000dc0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e026      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x498>
 8001bd6:	e01e      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e019      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x500>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d0      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4965      	ldr	r1, [pc, #404]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d040      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e073      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4936      	ldr	r1, [pc, #216]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f854 	bl	8000dc0 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f850 	bl	8000dc0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e053      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d210      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4922      	ldr	r1, [pc, #136]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ffb2 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08004634 	.word	0x08004634
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x30>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x36>
 8001e26:	e027      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0c5b      	lsrs	r3, r3, #17
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	613b      	str	r3, [r7, #16]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7a:	613b      	str	r3, [r7, #16]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	693b      	ldr	r3, [r7, #16]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	0800464c 	.word	0x0800464c
 8001e98:	0800465c 	.word	0x0800465c
 8001e9c:	003d0900 	.word	0x003d0900

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff2 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004644 	.word	0x08004644

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004644 	.word	0x08004644

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e041      	b.n	8001fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fd4e 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f000 fbe6 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e041      	b.n	8002074 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f839 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f000 fb97 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_TIM_PWM_Start+0x24>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e022      	b.n	80020fa <HAL_TIM_PWM_Start+0x6a>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d109      	bne.n	80020ce <HAL_TIM_PWM_Start+0x3e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e015      	b.n	80020fa <HAL_TIM_PWM_Start+0x6a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d109      	bne.n	80020e8 <HAL_TIM_PWM_Start+0x58>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e008      	b.n	80020fa <HAL_TIM_PWM_Start+0x6a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e05e      	b.n	80021c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <HAL_TIM_PWM_Start+0x82>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	e013      	b.n	800213a <HAL_TIM_PWM_Start+0xaa>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d104      	bne.n	8002122 <HAL_TIM_PWM_Start+0x92>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002120:	e00b      	b.n	800213a <HAL_TIM_PWM_Start+0xaa>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d104      	bne.n	8002132 <HAL_TIM_PWM_Start+0xa2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002130:	e003      	b.n	800213a <HAL_TIM_PWM_Start+0xaa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fd84 	bl	8002c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_TIM_PWM_Start+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d107      	bne.n	8002162 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_TIM_PWM_Start+0x138>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_TIM_PWM_Start+0xfa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d009      	beq.n	800218a <HAL_TIM_PWM_Start+0xfa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_TIM_PWM_Start+0x13c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_TIM_PWM_Start+0xfa>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_TIM_PWM_Start+0x140>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d111      	bne.n	80021ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d010      	beq.n	80021be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	e007      	b.n	80021be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d122      	bne.n	8002230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d11b      	bne.n	8002230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0202 	mvn.w	r2, #2
 8002200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa7f 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa72 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa81 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d122      	bne.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b04      	cmp	r3, #4
 800224a:	d11b      	bne.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa55 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa48 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa57 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d122      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d11b      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0208 	mvn.w	r2, #8
 80022a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2204      	movs	r2, #4
 80022ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa2b 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa1e 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fa2d 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0210 	mvn.w	r2, #16
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2208      	movs	r2, #8
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa01 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9f4 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fa03 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0201 	mvn.w	r2, #1
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9cf 	bl	80026f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d10e      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d107      	bne.n	8002384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fd42 	bl	8002e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d107      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9c7 	bl	800273e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d107      	bne.n	80023dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0220 	mvn.w	r2, #32
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fd0d 	bl	8002df6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e0ae      	b.n	8002560 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	f200 809f 	bhi.w	8002550 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	0800244d 	.word	0x0800244d
 800241c:	08002551 	.word	0x08002551
 8002420:	08002551 	.word	0x08002551
 8002424:	08002551 	.word	0x08002551
 8002428:	0800248d 	.word	0x0800248d
 800242c:	08002551 	.word	0x08002551
 8002430:	08002551 	.word	0x08002551
 8002434:	08002551 	.word	0x08002551
 8002438:	080024cf 	.word	0x080024cf
 800243c:	08002551 	.word	0x08002551
 8002440:	08002551 	.word	0x08002551
 8002444:	08002551 	.word	0x08002551
 8002448:	0800250f 	.word	0x0800250f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f9de 	bl	8002814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6999      	ldr	r1, [r3, #24]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	619a      	str	r2, [r3, #24]
      break;
 800248a:	e064      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fa24 	bl	80028e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6999      	ldr	r1, [r3, #24]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	021a      	lsls	r2, r3, #8
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
      break;
 80024cc:	e043      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fa6d 	bl	80029b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0208 	orr.w	r2, r2, #8
 80024e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0204 	bic.w	r2, r2, #4
 80024f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69d9      	ldr	r1, [r3, #28]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	61da      	str	r2, [r3, #28]
      break;
 800250c:	e023      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fab7 	bl	8002a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69d9      	ldr	r1, [r3, #28]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	021a      	lsls	r2, r3, #8
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	61da      	str	r2, [r3, #28]
      break;
 800254e:	e002      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
      break;
 8002554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIM_ConfigClockSource+0x1c>
 8002580:	2302      	movs	r3, #2
 8002582:	e0b4      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	d03e      	beq.n	800263c <HAL_TIM_ConfigClockSource+0xd4>
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	f200 8087 	bhi.w	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ca:	f000 8086 	beq.w	80026da <HAL_TIM_ConfigClockSource+0x172>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	d87f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d01a      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xa6>
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d87b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b60      	cmp	r3, #96	; 0x60
 80025de:	d050      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x11a>
 80025e0:	2b60      	cmp	r3, #96	; 0x60
 80025e2:	d877      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b50      	cmp	r3, #80	; 0x50
 80025e6:	d03c      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0xfa>
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d873      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d058      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x13a>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d86f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b30      	cmp	r3, #48	; 0x30
 80025f6:	d064      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	2b30      	cmp	r3, #48	; 0x30
 80025fa:	d86b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d060      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d867      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	2b10      	cmp	r3, #16
 800260a:	d05a      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	e062      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	f000 faf8 	bl	8002c12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	609a      	str	r2, [r3, #8]
      break;
 800263a:	e04f      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	f000 fae1 	bl	8002c12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800265e:	609a      	str	r2, [r3, #8]
      break;
 8002660:	e03c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	461a      	mov	r2, r3
 8002670:	f000 fa58 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2150      	movs	r1, #80	; 0x50
 800267a:	4618      	mov	r0, r3
 800267c:	f000 faaf 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 8002680:	e02c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	461a      	mov	r2, r3
 8002690:	f000 fa76 	bl	8002b80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2160      	movs	r1, #96	; 0x60
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa9f 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 80026a0:	e01c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 fa38 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fa8f 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 80026c0:	e00c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f000 fa86 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 80026d2:	e003      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e000      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a29      	ldr	r2, [pc, #164]	; (8002808 <TIM_Base_SetConfig+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_Base_SetConfig+0x30>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d007      	beq.n	8002780 <TIM_Base_SetConfig+0x30>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <TIM_Base_SetConfig+0xbc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_Base_SetConfig+0x30>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <TIM_Base_SetConfig+0xc0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d108      	bne.n	8002792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <TIM_Base_SetConfig+0xb8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d007      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a19      	ldr	r2, [pc, #100]	; (800280c <TIM_Base_SetConfig+0xbc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <TIM_Base_SetConfig+0xc0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <TIM_Base_SetConfig+0xb8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d103      	bne.n	80027f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	615a      	str	r2, [r3, #20]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800

08002814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f023 0201 	bic.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 0302 	bic.w	r3, r3, #2
 800285c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <TIM_OC1_SetConfig+0xc8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10c      	bne.n	800288a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0308 	bic.w	r3, r3, #8
 8002876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <TIM_OC1_SetConfig+0xc8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	621a      	str	r2, [r3, #32]
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f023 0210 	bic.w	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0320 	bic.w	r3, r3, #32
 800292a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <TIM_OC2_SetConfig+0xd0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d10d      	bne.n	800295c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <TIM_OC2_SetConfig+0xd0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d113      	bne.n	800298c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800296a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <TIM_OC3_SetConfig+0xd0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10d      	bne.n	8002a2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <TIM_OC3_SetConfig+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d113      	bne.n	8002a5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	621a      	str	r2, [r3, #32]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00

08002a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	031b      	lsls	r3, r3, #12
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <TIM_OC4_SetConfig+0x98>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d109      	bne.n	8002afc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40012c00 	.word	0x40012c00

08002b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0201 	bic.w	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 030a 	bic.w	r3, r3, #10
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0210 	bic.w	r2, r3, #16
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f043 0307 	orr.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e046      	b.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10c      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e03d      	b.n	8002dec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e042      	b.n	8002eb2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fd fe95 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	; 0x24
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fd0a 	bl	8003878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08c      	sub	sp, #48	; 0x30
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d14a      	bne.n	8002f6a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e043      	b.n	8002f6c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fae9 	bl	80034ce <UART_Start_Receive_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d12c      	bne.n	8002f64 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d125      	bne.n	8002f5e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	617b      	str	r3, [r7, #20]
   return(result);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f48:	627a      	str	r2, [r7, #36]	; 0x24
 8002f4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002f5c:	e002      	b.n	8002f64 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f68:	e000      	b.n	8002f6c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0ba      	sub	sp, #232	; 0xe8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fb91 	bl	80036fa <UART_Receive_IT>
      return;
 8002fd8:	e25b      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80de 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
 8002fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80d1 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 81f2 	beq.w	8003488 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb1c 	bl	80036fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_UART_IRQHandler+0x17a>
 80030e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04f      	beq.n	800318e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa26 	bl	8003540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d041      	beq.n	8003186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800311c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1d9      	bne.n	8003102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_UART_IRQHandler+0x3e0>)
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd ffda 	bl	800111c <HAL_DMA_Abort_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003178:	4610      	mov	r0, r2
 800317a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e00e      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f99c 	bl	80034bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00a      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f998 	bl	80034bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e006      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f994 	bl	80034bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800319a:	e175      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	bf00      	nop
    return;
 800319e:	e173      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 814f 	bne.w	8003448 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8148 	beq.w	8003448 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8141 	beq.w	8003448 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80b6 	beq.w	8003358 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8145 	beq.w	800348c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800320a:	429a      	cmp	r2, r3
 800320c:	f080 813e 	bcs.w	800348c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b20      	cmp	r3, #32
 8003220:	f000 8088 	beq.w	8003334 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800323a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003250:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800325c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1d9      	bne.n	8003224 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003294:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003298:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800329c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e1      	bne.n	8003270 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003316:	65ba      	str	r2, [r7, #88]	; 0x58
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800331c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e3      	bne.n	80032f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd feb8 	bl	80010a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fc ffde 	bl	800030c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003350:	e09c      	b.n	800348c <HAL_UART_IRQHandler+0x518>
 8003352:	bf00      	nop
 8003354:	08003605 	.word	0x08003605
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 808e 	beq.w	8003490 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8089 	beq.w	8003490 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033a2:	647a      	str	r2, [r7, #68]	; 0x44
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	623b      	str	r3, [r7, #32]
   return(result);
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033da:	633a      	str	r2, [r7, #48]	; 0x30
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e3      	bne.n	80033b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	60fb      	str	r3, [r7, #12]
   return(result);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003420:	61fa      	str	r2, [r7, #28]
 8003422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	617b      	str	r3, [r7, #20]
   return(result);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e3      	bne.n	80033fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800343a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fc ff63 	bl	800030c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003446:	e023      	b.n	8003490 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <HAL_UART_IRQHandler+0x4f4>
 8003454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8e3 	bl	800362c <UART_Transmit_IT>
    return;
 8003466:	e014      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_UART_IRQHandler+0x51e>
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f922 	bl	80036ca <UART_EndTransmit_IT>
    return;
 8003486:	e004      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
    return;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
      return;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
      return;
 8003490:	bf00      	nop
  }
}
 8003492:	37e8      	adds	r7, #232	; 0xe8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2222      	movs	r2, #34	; 0x22
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b095      	sub	sp, #84	; 0x54
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	330c      	adds	r3, #12
 8003566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003568:	643a      	str	r2, [r7, #64]	; 0x40
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800356e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e5      	bne.n	8003548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	61fb      	str	r3, [r7, #28]
   return(result);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3314      	adds	r3, #20
 800359a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800359c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d119      	bne.n	80035ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f023 0310 	bic.w	r3, r3, #16
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d8:	61ba      	str	r2, [r7, #24]
 80035da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6979      	ldr	r1, [r7, #20]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	613b      	str	r3, [r7, #16]
   return(result);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035fa:	bf00      	nop
 80035fc:	3754      	adds	r7, #84	; 0x54
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff4c 	bl	80034bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b21      	cmp	r3, #33	; 0x21
 800363e:	d13e      	bne.n	80036be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003648:	d114      	bne.n	8003674 <UART_Transmit_IT+0x48>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d110      	bne.n	8003674 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003666:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	621a      	str	r2, [r3, #32]
 8003672:	e008      	b.n	8003686 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6211      	str	r1, [r2, #32]
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29b      	uxth	r3, r3
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4619      	mov	r1, r3
 8003694:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fed4 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08c      	sub	sp, #48	; 0x30
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	f040 80ae 	bne.w	800386c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d117      	bne.n	800374a <UART_Receive_IT+0x50>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d113      	bne.n	800374a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003738:	b29a      	uxth	r2, r3
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
 8003748:	e026      	b.n	8003798 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	d007      	beq.n	800376e <UART_Receive_IT+0x74>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <UART_Receive_IT+0x82>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e008      	b.n	800378e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4619      	mov	r1, r3
 80037a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d15d      	bne.n	8003868 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0220 	bic.w	r2, r2, #32
 80037ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d135      	bne.n	800385e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	623a      	str	r2, [r7, #32]
 800381a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	61bb      	str	r3, [r7, #24]
   return(result);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d10a      	bne.n	8003850 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fc fd58 	bl	800030c <HAL_UARTEx_RxEventCallback>
 800385c:	e002      	b.n	8003864 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe23 	bl	80034aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e002      	b.n	800386e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3730      	adds	r7, #48	; 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038b2:	f023 030c 	bic.w	r3, r3, #12
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	430b      	orrs	r3, r1
 80038be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <UART_SetConfig+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d103      	bne.n	80038e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7fe fafc 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	e002      	b.n	80038ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7fe fae4 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80038ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009a      	lsls	r2, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <UART_SetConfig+0x118>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	0119      	lsls	r1, r3, #4
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <UART_SetConfig+0x118>)
 8003926:	fba3 0302 	umull	r0, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2064      	movs	r0, #100	; 0x64
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	3332      	adds	r3, #50	; 0x32
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <UART_SetConfig+0x118>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003944:	4419      	add	r1, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <UART_SetConfig+0x118>)
 800395e:	fba3 0302 	umull	r0, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <UART_SetConfig+0x118>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f003 020f 	and.w	r2, r3, #15
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	440a      	add	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40013800 	.word	0x40013800
 8003990:	51eb851f 	.word	0x51eb851f

08003994 <siscanf>:
 8003994:	b40e      	push	{r1, r2, r3}
 8003996:	f44f 7201 	mov.w	r2, #516	; 0x204
 800399a:	b530      	push	{r4, r5, lr}
 800399c:	b09c      	sub	sp, #112	; 0x70
 800399e:	ac1f      	add	r4, sp, #124	; 0x7c
 80039a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80039a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80039a8:	9002      	str	r0, [sp, #8]
 80039aa:	9006      	str	r0, [sp, #24]
 80039ac:	f7fc fbce 	bl	800014c <strlen>
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <siscanf+0x4c>)
 80039b2:	9003      	str	r0, [sp, #12]
 80039b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80039b6:	2300      	movs	r3, #0
 80039b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80039ba:	9314      	str	r3, [sp, #80]	; 0x50
 80039bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039c0:	9007      	str	r0, [sp, #28]
 80039c2:	4808      	ldr	r0, [pc, #32]	; (80039e4 <siscanf+0x50>)
 80039c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039c8:	462a      	mov	r2, r5
 80039ca:	4623      	mov	r3, r4
 80039cc:	a902      	add	r1, sp, #8
 80039ce:	6800      	ldr	r0, [r0, #0]
 80039d0:	9401      	str	r4, [sp, #4]
 80039d2:	f000 f98d 	bl	8003cf0 <__ssvfiscanf_r>
 80039d6:	b01c      	add	sp, #112	; 0x70
 80039d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039dc:	b003      	add	sp, #12
 80039de:	4770      	bx	lr
 80039e0:	080039e9 	.word	0x080039e9
 80039e4:	20000058 	.word	0x20000058

080039e8 <__seofread>:
 80039e8:	2000      	movs	r0, #0
 80039ea:	4770      	bx	lr

080039ec <memset>:
 80039ec:	4603      	mov	r3, r0
 80039ee:	4402      	add	r2, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000058 	.word	0x20000058

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	4d0c      	ldr	r5, [pc, #48]	; (8003a40 <__libc_init_array+0x38>)
 8003a0e:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	f000 fdf8 	bl	800460c <_init>
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	4d0a      	ldr	r5, [pc, #40]	; (8003a48 <__libc_init_array+0x40>)
 8003a20:	4c0a      	ldr	r4, [pc, #40]	; (8003a4c <__libc_init_array+0x44>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08004780 	.word	0x08004780
 8003a44:	08004780 	.word	0x08004780
 8003a48:	08004780 	.word	0x08004780
 8003a4c:	08004784 	.word	0x08004784

08003a50 <__retarget_lock_acquire_recursive>:
 8003a50:	4770      	bx	lr

08003a52 <__retarget_lock_release_recursive>:
 8003a52:	4770      	bx	lr

08003a54 <_free_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4605      	mov	r5, r0
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d040      	beq.n	8003ade <_free_r+0x8a>
 8003a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a60:	1f0c      	subs	r4, r1, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfb8      	it	lt
 8003a66:	18e4      	addlt	r4, r4, r3
 8003a68:	f000 f8dc 	bl	8003c24 <__malloc_lock>
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <_free_r+0x8c>)
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	b933      	cbnz	r3, 8003a80 <_free_r+0x2c>
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	6014      	str	r4, [r2, #0]
 8003a76:	4628      	mov	r0, r5
 8003a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a7c:	f000 b8d8 	b.w	8003c30 <__malloc_unlock>
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	d908      	bls.n	8003a96 <_free_r+0x42>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	1821      	adds	r1, r4, r0
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf01      	itttt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	1809      	addeq	r1, r1, r0
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	e7ed      	b.n	8003a72 <_free_r+0x1e>
 8003a96:	461a      	mov	r2, r3
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b10b      	cbz	r3, 8003aa0 <_free_r+0x4c>
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	d9fa      	bls.n	8003a96 <_free_r+0x42>
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	1850      	adds	r0, r2, r1
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d10b      	bne.n	8003ac0 <_free_r+0x6c>
 8003aa8:	6820      	ldr	r0, [r4, #0]
 8003aaa:	4401      	add	r1, r0
 8003aac:	1850      	adds	r0, r2, r1
 8003aae:	4283      	cmp	r3, r0
 8003ab0:	6011      	str	r1, [r2, #0]
 8003ab2:	d1e0      	bne.n	8003a76 <_free_r+0x22>
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4408      	add	r0, r1
 8003aba:	6010      	str	r0, [r2, #0]
 8003abc:	6053      	str	r3, [r2, #4]
 8003abe:	e7da      	b.n	8003a76 <_free_r+0x22>
 8003ac0:	d902      	bls.n	8003ac8 <_free_r+0x74>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	e7d6      	b.n	8003a76 <_free_r+0x22>
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	1821      	adds	r1, r4, r0
 8003acc:	428b      	cmp	r3, r1
 8003ace:	bf01      	itttt	eq
 8003ad0:	6819      	ldreq	r1, [r3, #0]
 8003ad2:	685b      	ldreq	r3, [r3, #4]
 8003ad4:	1809      	addeq	r1, r1, r0
 8003ad6:	6021      	streq	r1, [r4, #0]
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6054      	str	r4, [r2, #4]
 8003adc:	e7cb      	b.n	8003a76 <_free_r+0x22>
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	2000032c 	.word	0x2000032c

08003ae4 <sbrk_aligned>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4e0e      	ldr	r6, [pc, #56]	; (8003b20 <sbrk_aligned+0x3c>)
 8003ae8:	460c      	mov	r4, r1
 8003aea:	6831      	ldr	r1, [r6, #0]
 8003aec:	4605      	mov	r5, r0
 8003aee:	b911      	cbnz	r1, 8003af6 <sbrk_aligned+0x12>
 8003af0:	f000 fc34 	bl	800435c <_sbrk_r>
 8003af4:	6030      	str	r0, [r6, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	f000 fc2f 	bl	800435c <_sbrk_r>
 8003afe:	1c43      	adds	r3, r0, #1
 8003b00:	d00a      	beq.n	8003b18 <sbrk_aligned+0x34>
 8003b02:	1cc4      	adds	r4, r0, #3
 8003b04:	f024 0403 	bic.w	r4, r4, #3
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d007      	beq.n	8003b1c <sbrk_aligned+0x38>
 8003b0c:	1a21      	subs	r1, r4, r0
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 fc24 	bl	800435c <_sbrk_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d101      	bne.n	8003b1c <sbrk_aligned+0x38>
 8003b18:	f04f 34ff 	mov.w	r4, #4294967295
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	20000330 	.word	0x20000330

08003b24 <_malloc_r>:
 8003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b28:	1ccd      	adds	r5, r1, #3
 8003b2a:	f025 0503 	bic.w	r5, r5, #3
 8003b2e:	3508      	adds	r5, #8
 8003b30:	2d0c      	cmp	r5, #12
 8003b32:	bf38      	it	cc
 8003b34:	250c      	movcc	r5, #12
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	4607      	mov	r7, r0
 8003b3a:	db01      	blt.n	8003b40 <_malloc_r+0x1c>
 8003b3c:	42a9      	cmp	r1, r5
 8003b3e:	d905      	bls.n	8003b4c <_malloc_r+0x28>
 8003b40:	230c      	movs	r3, #12
 8003b42:	2600      	movs	r6, #0
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4630      	mov	r0, r6
 8003b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c20 <_malloc_r+0xfc>
 8003b50:	f000 f868 	bl	8003c24 <__malloc_lock>
 8003b54:	f8d8 3000 	ldr.w	r3, [r8]
 8003b58:	461c      	mov	r4, r3
 8003b5a:	bb5c      	cbnz	r4, 8003bb4 <_malloc_r+0x90>
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f7ff ffc0 	bl	8003ae4 <sbrk_aligned>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	4604      	mov	r4, r0
 8003b68:	d155      	bne.n	8003c16 <_malloc_r+0xf2>
 8003b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8003b6e:	4626      	mov	r6, r4
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	d145      	bne.n	8003c00 <_malloc_r+0xdc>
 8003b74:	2c00      	cmp	r4, #0
 8003b76:	d048      	beq.n	8003c0a <_malloc_r+0xe6>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	eb04 0903 	add.w	r9, r4, r3
 8003b82:	f000 fbeb 	bl	800435c <_sbrk_r>
 8003b86:	4581      	cmp	r9, r0
 8003b88:	d13f      	bne.n	8003c0a <_malloc_r+0xe6>
 8003b8a:	6821      	ldr	r1, [r4, #0]
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	1a6d      	subs	r5, r5, r1
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7ff ffa7 	bl	8003ae4 <sbrk_aligned>
 8003b96:	3001      	adds	r0, #1
 8003b98:	d037      	beq.n	8003c0a <_malloc_r+0xe6>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	442b      	add	r3, r5
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d038      	beq.n	8003c1a <_malloc_r+0xf6>
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	42a2      	cmp	r2, r4
 8003bac:	d12b      	bne.n	8003c06 <_malloc_r+0xe2>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e00f      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	1b52      	subs	r2, r2, r5
 8003bb8:	d41f      	bmi.n	8003bfa <_malloc_r+0xd6>
 8003bba:	2a0b      	cmp	r2, #11
 8003bbc:	d917      	bls.n	8003bee <_malloc_r+0xca>
 8003bbe:	1961      	adds	r1, r4, r5
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	6025      	str	r5, [r4, #0]
 8003bc4:	bf18      	it	ne
 8003bc6:	6059      	strne	r1, [r3, #4]
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	bf08      	it	eq
 8003bcc:	f8c8 1000 	streq.w	r1, [r8]
 8003bd0:	5162      	str	r2, [r4, r5]
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f104 060b 	add.w	r6, r4, #11
 8003bda:	f000 f829 	bl	8003c30 <__malloc_unlock>
 8003bde:	f026 0607 	bic.w	r6, r6, #7
 8003be2:	1d23      	adds	r3, r4, #4
 8003be4:	1af2      	subs	r2, r6, r3
 8003be6:	d0ae      	beq.n	8003b46 <_malloc_r+0x22>
 8003be8:	1b9b      	subs	r3, r3, r6
 8003bea:	50a3      	str	r3, [r4, r2]
 8003bec:	e7ab      	b.n	8003b46 <_malloc_r+0x22>
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	6862      	ldr	r2, [r4, #4]
 8003bf2:	d1dd      	bne.n	8003bb0 <_malloc_r+0x8c>
 8003bf4:	f8c8 2000 	str.w	r2, [r8]
 8003bf8:	e7ec      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	6864      	ldr	r4, [r4, #4]
 8003bfe:	e7ac      	b.n	8003b5a <_malloc_r+0x36>
 8003c00:	4634      	mov	r4, r6
 8003c02:	6876      	ldr	r6, [r6, #4]
 8003c04:	e7b4      	b.n	8003b70 <_malloc_r+0x4c>
 8003c06:	4613      	mov	r3, r2
 8003c08:	e7cc      	b.n	8003ba4 <_malloc_r+0x80>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	f000 f80e 	bl	8003c30 <__malloc_unlock>
 8003c14:	e797      	b.n	8003b46 <_malloc_r+0x22>
 8003c16:	6025      	str	r5, [r4, #0]
 8003c18:	e7dc      	b.n	8003bd4 <_malloc_r+0xb0>
 8003c1a:	605b      	str	r3, [r3, #4]
 8003c1c:	deff      	udf	#255	; 0xff
 8003c1e:	bf00      	nop
 8003c20:	2000032c 	.word	0x2000032c

08003c24 <__malloc_lock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_lock+0x8>)
 8003c26:	f7ff bf13 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	20000328 	.word	0x20000328

08003c30 <__malloc_unlock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_unlock+0x8>)
 8003c32:	f7ff bf0e 	b.w	8003a52 <__retarget_lock_release_recursive>
 8003c36:	bf00      	nop
 8003c38:	20000328 	.word	0x20000328

08003c3c <_sungetc_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	1c4b      	adds	r3, r1, #1
 8003c40:	4614      	mov	r4, r2
 8003c42:	d103      	bne.n	8003c4c <_sungetc_r+0x10>
 8003c44:	f04f 35ff 	mov.w	r5, #4294967295
 8003c48:	4628      	mov	r0, r5
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	8993      	ldrh	r3, [r2, #12]
 8003c4e:	b2cd      	uxtb	r5, r1
 8003c50:	f023 0320 	bic.w	r3, r3, #32
 8003c54:	8193      	strh	r3, [r2, #12]
 8003c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c58:	6852      	ldr	r2, [r2, #4]
 8003c5a:	b18b      	cbz	r3, 8003c80 <_sungetc_r+0x44>
 8003c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	dd08      	ble.n	8003c74 <_sungetc_r+0x38>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	6063      	str	r3, [r4, #4]
 8003c72:	e7e9      	b.n	8003c48 <_sungetc_r+0xc>
 8003c74:	4621      	mov	r1, r4
 8003c76:	f000 fb38 	bl	80042ea <__submore>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d0f1      	beq.n	8003c62 <_sungetc_r+0x26>
 8003c7e:	e7e1      	b.n	8003c44 <_sungetc_r+0x8>
 8003c80:	6921      	ldr	r1, [r4, #16]
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	b151      	cbz	r1, 8003c9c <_sungetc_r+0x60>
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d208      	bcs.n	8003c9c <_sungetc_r+0x60>
 8003c8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003c8e:	42a9      	cmp	r1, r5
 8003c90:	d104      	bne.n	8003c9c <_sungetc_r+0x60>
 8003c92:	3b01      	subs	r3, #1
 8003c94:	3201      	adds	r2, #1
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	6062      	str	r2, [r4, #4]
 8003c9a:	e7d5      	b.n	8003c48 <_sungetc_r+0xc>
 8003c9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	63a3      	str	r3, [r4, #56]	; 0x38
 8003caa:	4623      	mov	r3, r4
 8003cac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e7dc      	b.n	8003c70 <_sungetc_r+0x34>

08003cb6 <__ssrefill_r>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003cbc:	b169      	cbz	r1, 8003cda <__ssrefill_r+0x24>
 8003cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d001      	beq.n	8003cca <__ssrefill_r+0x14>
 8003cc6:	f7ff fec5 	bl	8003a54 <_free_r>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cce:	6360      	str	r0, [r4, #52]	; 0x34
 8003cd0:	6063      	str	r3, [r4, #4]
 8003cd2:	b113      	cbz	r3, 8003cda <__ssrefill_r+0x24>
 8003cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	6923      	ldr	r3, [r4, #16]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	81a3      	strh	r3, [r4, #12]
 8003cee:	e7f3      	b.n	8003cd8 <__ssrefill_r+0x22>

08003cf0 <__ssvfiscanf_r>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cfe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003d02:	49a6      	ldr	r1, [pc, #664]	; (8003f9c <__ssvfiscanf_r+0x2ac>)
 8003d04:	f10d 0804 	add.w	r8, sp, #4
 8003d08:	91a0      	str	r1, [sp, #640]	; 0x280
 8003d0a:	49a5      	ldr	r1, [pc, #660]	; (8003fa0 <__ssvfiscanf_r+0x2b0>)
 8003d0c:	4fa5      	ldr	r7, [pc, #660]	; (8003fa4 <__ssvfiscanf_r+0x2b4>)
 8003d0e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003fa8 <__ssvfiscanf_r+0x2b8>
 8003d12:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003d16:	91a1      	str	r1, [sp, #644]	; 0x284
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	7813      	ldrb	r3, [r2, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 815a 	beq.w	8003fd6 <__ssvfiscanf_r+0x2e6>
 8003d22:	5cf9      	ldrb	r1, [r7, r3]
 8003d24:	1c55      	adds	r5, r2, #1
 8003d26:	f011 0108 	ands.w	r1, r1, #8
 8003d2a:	d019      	beq.n	8003d60 <__ssvfiscanf_r+0x70>
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	dd0f      	ble.n	8003d52 <__ssvfiscanf_r+0x62>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	5cba      	ldrb	r2, [r7, r2]
 8003d38:	0712      	lsls	r2, r2, #28
 8003d3a:	d401      	bmi.n	8003d40 <__ssvfiscanf_r+0x50>
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	e7ec      	b.n	8003d1a <__ssvfiscanf_r+0x2a>
 8003d40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d42:	3301      	adds	r3, #1
 8003d44:	3201      	adds	r2, #1
 8003d46:	9245      	str	r2, [sp, #276]	; 0x114
 8003d48:	6862      	ldr	r2, [r4, #4]
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	6062      	str	r2, [r4, #4]
 8003d50:	e7ec      	b.n	8003d2c <__ssvfiscanf_r+0x3c>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d58:	4798      	blx	r3
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d0e9      	beq.n	8003d32 <__ssvfiscanf_r+0x42>
 8003d5e:	e7ed      	b.n	8003d3c <__ssvfiscanf_r+0x4c>
 8003d60:	2b25      	cmp	r3, #37	; 0x25
 8003d62:	d012      	beq.n	8003d8a <__ssvfiscanf_r+0x9a>
 8003d64:	469a      	mov	sl, r3
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f340 8092 	ble.w	8003e92 <__ssvfiscanf_r+0x1a2>
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	7813      	ldrb	r3, [r2, #0]
 8003d72:	4553      	cmp	r3, sl
 8003d74:	f040 812f 	bne.w	8003fd6 <__ssvfiscanf_r+0x2e6>
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	3201      	adds	r2, #1
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	9345      	str	r3, [sp, #276]	; 0x114
 8003d88:	e7d8      	b.n	8003d3c <__ssvfiscanf_r+0x4c>
 8003d8a:	9141      	str	r1, [sp, #260]	; 0x104
 8003d8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d8e:	7853      	ldrb	r3, [r2, #1]
 8003d90:	2b2a      	cmp	r3, #42	; 0x2a
 8003d92:	bf04      	itt	eq
 8003d94:	2310      	moveq	r3, #16
 8003d96:	1c95      	addeq	r5, r2, #2
 8003d98:	f04f 020a 	mov.w	r2, #10
 8003d9c:	bf08      	it	eq
 8003d9e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003da0:	46aa      	mov	sl, r5
 8003da2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003da6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d91c      	bls.n	8003de8 <__ssvfiscanf_r+0xf8>
 8003dae:	2203      	movs	r2, #3
 8003db0:	487d      	ldr	r0, [pc, #500]	; (8003fa8 <__ssvfiscanf_r+0x2b8>)
 8003db2:	f000 fae3 	bl	800437c <memchr>
 8003db6:	b138      	cbz	r0, 8003dc8 <__ssvfiscanf_r+0xd8>
 8003db8:	2301      	movs	r3, #1
 8003dba:	4655      	mov	r5, sl
 8003dbc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003dbe:	eba0 0009 	sub.w	r0, r0, r9
 8003dc2:	4083      	lsls	r3, r0
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	9341      	str	r3, [sp, #260]	; 0x104
 8003dc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003dcc:	2b78      	cmp	r3, #120	; 0x78
 8003dce:	d806      	bhi.n	8003dde <__ssvfiscanf_r+0xee>
 8003dd0:	2b57      	cmp	r3, #87	; 0x57
 8003dd2:	d810      	bhi.n	8003df6 <__ssvfiscanf_r+0x106>
 8003dd4:	2b25      	cmp	r3, #37	; 0x25
 8003dd6:	d0c5      	beq.n	8003d64 <__ssvfiscanf_r+0x74>
 8003dd8:	d856      	bhi.n	8003e88 <__ssvfiscanf_r+0x198>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d064      	beq.n	8003ea8 <__ssvfiscanf_r+0x1b8>
 8003dde:	2303      	movs	r3, #3
 8003de0:	9347      	str	r3, [sp, #284]	; 0x11c
 8003de2:	230a      	movs	r3, #10
 8003de4:	9342      	str	r3, [sp, #264]	; 0x108
 8003de6:	e075      	b.n	8003ed4 <__ssvfiscanf_r+0x1e4>
 8003de8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003dea:	4655      	mov	r5, sl
 8003dec:	fb02 1103 	mla	r1, r2, r3, r1
 8003df0:	3930      	subs	r1, #48	; 0x30
 8003df2:	9143      	str	r1, [sp, #268]	; 0x10c
 8003df4:	e7d4      	b.n	8003da0 <__ssvfiscanf_r+0xb0>
 8003df6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003dfa:	2a20      	cmp	r2, #32
 8003dfc:	d8ef      	bhi.n	8003dde <__ssvfiscanf_r+0xee>
 8003dfe:	a101      	add	r1, pc, #4	; (adr r1, 8003e04 <__ssvfiscanf_r+0x114>)
 8003e00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003e04:	08003eb7 	.word	0x08003eb7
 8003e08:	08003ddf 	.word	0x08003ddf
 8003e0c:	08003ddf 	.word	0x08003ddf
 8003e10:	08003f15 	.word	0x08003f15
 8003e14:	08003ddf 	.word	0x08003ddf
 8003e18:	08003ddf 	.word	0x08003ddf
 8003e1c:	08003ddf 	.word	0x08003ddf
 8003e20:	08003ddf 	.word	0x08003ddf
 8003e24:	08003ddf 	.word	0x08003ddf
 8003e28:	08003ddf 	.word	0x08003ddf
 8003e2c:	08003ddf 	.word	0x08003ddf
 8003e30:	08003f2b 	.word	0x08003f2b
 8003e34:	08003f11 	.word	0x08003f11
 8003e38:	08003e8f 	.word	0x08003e8f
 8003e3c:	08003e8f 	.word	0x08003e8f
 8003e40:	08003e8f 	.word	0x08003e8f
 8003e44:	08003ddf 	.word	0x08003ddf
 8003e48:	08003ecd 	.word	0x08003ecd
 8003e4c:	08003ddf 	.word	0x08003ddf
 8003e50:	08003ddf 	.word	0x08003ddf
 8003e54:	08003ddf 	.word	0x08003ddf
 8003e58:	08003ddf 	.word	0x08003ddf
 8003e5c:	08003f3b 	.word	0x08003f3b
 8003e60:	08003f09 	.word	0x08003f09
 8003e64:	08003eaf 	.word	0x08003eaf
 8003e68:	08003ddf 	.word	0x08003ddf
 8003e6c:	08003ddf 	.word	0x08003ddf
 8003e70:	08003f37 	.word	0x08003f37
 8003e74:	08003ddf 	.word	0x08003ddf
 8003e78:	08003f11 	.word	0x08003f11
 8003e7c:	08003ddf 	.word	0x08003ddf
 8003e80:	08003ddf 	.word	0x08003ddf
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	3b45      	subs	r3, #69	; 0x45
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d8a7      	bhi.n	8003dde <__ssvfiscanf_r+0xee>
 8003e8e:	2305      	movs	r3, #5
 8003e90:	e01f      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4630      	mov	r0, r6
 8003e96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e98:	4798      	blx	r3
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f43f af67 	beq.w	8003d6e <__ssvfiscanf_r+0x7e>
 8003ea0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	f040 808d 	bne.w	8003fc2 <__ssvfiscanf_r+0x2d2>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	e08f      	b.n	8003fce <__ssvfiscanf_r+0x2de>
 8003eae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003eb0:	f042 0220 	orr.w	r2, r2, #32
 8003eb4:	9241      	str	r2, [sp, #260]	; 0x104
 8003eb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebc:	9241      	str	r2, [sp, #260]	; 0x104
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	2b6f      	cmp	r3, #111	; 0x6f
 8003ec2:	bf34      	ite	cc
 8003ec4:	2303      	movcc	r3, #3
 8003ec6:	2304      	movcs	r3, #4
 8003ec8:	9242      	str	r2, [sp, #264]	; 0x108
 8003eca:	e002      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9342      	str	r3, [sp, #264]	; 0x108
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	dd3d      	ble.n	8003f56 <__ssvfiscanf_r+0x266>
 8003eda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003edc:	0659      	lsls	r1, r3, #25
 8003ede:	d404      	bmi.n	8003eea <__ssvfiscanf_r+0x1fa>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	5cba      	ldrb	r2, [r7, r2]
 8003ee6:	0712      	lsls	r2, r2, #28
 8003ee8:	d43c      	bmi.n	8003f64 <__ssvfiscanf_r+0x274>
 8003eea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	dc4b      	bgt.n	8003f88 <__ssvfiscanf_r+0x298>
 8003ef0:	466b      	mov	r3, sp
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	a941      	add	r1, sp, #260	; 0x104
 8003ef8:	f000 f872 	bl	8003fe0 <_scanf_chars>
 8003efc:	2801      	cmp	r0, #1
 8003efe:	d06a      	beq.n	8003fd6 <__ssvfiscanf_r+0x2e6>
 8003f00:	2802      	cmp	r0, #2
 8003f02:	f47f af1b 	bne.w	8003d3c <__ssvfiscanf_r+0x4c>
 8003f06:	e7cb      	b.n	8003ea0 <__ssvfiscanf_r+0x1b0>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	9342      	str	r3, [sp, #264]	; 0x108
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e7e0      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003f10:	220a      	movs	r2, #10
 8003f12:	e7d5      	b.n	8003ec0 <__ssvfiscanf_r+0x1d0>
 8003f14:	4629      	mov	r1, r5
 8003f16:	4640      	mov	r0, r8
 8003f18:	f000 f9ae 	bl	8004278 <__sccl>
 8003f1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f1e:	4605      	mov	r5, r0
 8003f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f24:	9341      	str	r3, [sp, #260]	; 0x104
 8003f26:	2301      	movs	r3, #1
 8003f28:	e7d3      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003f2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f30:	9341      	str	r3, [sp, #260]	; 0x104
 8003f32:	2300      	movs	r3, #0
 8003f34:	e7cd      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e7cb      	b.n	8003ed2 <__ssvfiscanf_r+0x1e2>
 8003f3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003f3c:	06c3      	lsls	r3, r0, #27
 8003f3e:	f53f aefd 	bmi.w	8003d3c <__ssvfiscanf_r+0x4c>
 8003f42:	9b00      	ldr	r3, [sp, #0]
 8003f44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f46:	1d19      	adds	r1, r3, #4
 8003f48:	9100      	str	r1, [sp, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	07c0      	lsls	r0, r0, #31
 8003f4e:	bf4c      	ite	mi
 8003f50:	801a      	strhmi	r2, [r3, #0]
 8003f52:	601a      	strpl	r2, [r3, #0]
 8003f54:	e6f2      	b.n	8003d3c <__ssvfiscanf_r+0x4c>
 8003f56:	4621      	mov	r1, r4
 8003f58:	4630      	mov	r0, r6
 8003f5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f5c:	4798      	blx	r3
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0bb      	beq.n	8003eda <__ssvfiscanf_r+0x1ea>
 8003f62:	e79d      	b.n	8003ea0 <__ssvfiscanf_r+0x1b0>
 8003f64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f66:	3201      	adds	r2, #1
 8003f68:	9245      	str	r2, [sp, #276]	; 0x114
 8003f6a:	6862      	ldr	r2, [r4, #4]
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	6062      	str	r2, [r4, #4]
 8003f72:	dd02      	ble.n	8003f7a <__ssvfiscanf_r+0x28a>
 8003f74:	3301      	adds	r3, #1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e7b2      	b.n	8003ee0 <__ssvfiscanf_r+0x1f0>
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f80:	4798      	blx	r3
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d0ac      	beq.n	8003ee0 <__ssvfiscanf_r+0x1f0>
 8003f86:	e78b      	b.n	8003ea0 <__ssvfiscanf_r+0x1b0>
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	dc0f      	bgt.n	8003fac <__ssvfiscanf_r+0x2bc>
 8003f8c:	466b      	mov	r3, sp
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	a941      	add	r1, sp, #260	; 0x104
 8003f94:	f000 f87e 	bl	8004094 <_scanf_i>
 8003f98:	e7b0      	b.n	8003efc <__ssvfiscanf_r+0x20c>
 8003f9a:	bf00      	nop
 8003f9c:	08003c3d 	.word	0x08003c3d
 8003fa0:	08003cb7 	.word	0x08003cb7
 8003fa4:	0800467e 	.word	0x0800467e
 8003fa8:	0800465e 	.word	0x0800465e
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <__ssvfiscanf_r+0x2ec>)
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f43f aec4 	beq.w	8003d3c <__ssvfiscanf_r+0x4c>
 8003fb4:	466b      	mov	r3, sp
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4630      	mov	r0, r6
 8003fba:	a941      	add	r1, sp, #260	; 0x104
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	e79c      	b.n	8003efc <__ssvfiscanf_r+0x20c>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fc8:	bf18      	it	ne
 8003fca:	f04f 30ff 	movne.w	r0, #4294967295
 8003fce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003fd8:	e7f9      	b.n	8003fce <__ssvfiscanf_r+0x2de>
 8003fda:	bf00      	nop
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <_scanf_chars>:
 8003fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	688a      	ldr	r2, [r1, #8]
 8003fe8:	4680      	mov	r8, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	b932      	cbnz	r2, 8003ffc <_scanf_chars+0x1c>
 8003fee:	698a      	ldr	r2, [r1, #24]
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2201      	moveq	r2, #1
 8003ff6:	f04f 32ff 	movne.w	r2, #4294967295
 8003ffa:	608a      	str	r2, [r1, #8]
 8003ffc:	2700      	movs	r7, #0
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004090 <_scanf_chars+0xb0>
 8004004:	06d1      	lsls	r1, r2, #27
 8004006:	bf5f      	itttt	pl
 8004008:	681a      	ldrpl	r2, [r3, #0]
 800400a:	1d11      	addpl	r1, r2, #4
 800400c:	6019      	strpl	r1, [r3, #0]
 800400e:	6816      	ldrpl	r6, [r2, #0]
 8004010:	69a0      	ldr	r0, [r4, #24]
 8004012:	b188      	cbz	r0, 8004038 <_scanf_chars+0x58>
 8004014:	2801      	cmp	r0, #1
 8004016:	d107      	bne.n	8004028 <_scanf_chars+0x48>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	6963      	ldr	r3, [r4, #20]
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	b953      	cbnz	r3, 8004038 <_scanf_chars+0x58>
 8004022:	2f00      	cmp	r7, #0
 8004024:	d031      	beq.n	800408a <_scanf_chars+0xaa>
 8004026:	e022      	b.n	800406e <_scanf_chars+0x8e>
 8004028:	2802      	cmp	r0, #2
 800402a:	d120      	bne.n	800406e <_scanf_chars+0x8e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	d41a      	bmi.n	800406e <_scanf_chars+0x8e>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	3701      	adds	r7, #1
 800403c:	06da      	lsls	r2, r3, #27
 800403e:	bf5e      	ittt	pl
 8004040:	682b      	ldrpl	r3, [r5, #0]
 8004042:	781b      	ldrbpl	r3, [r3, #0]
 8004044:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004048:	682a      	ldr	r2, [r5, #0]
 800404a:	686b      	ldr	r3, [r5, #4]
 800404c:	3201      	adds	r2, #1
 800404e:	602a      	str	r2, [r5, #0]
 8004050:	68a2      	ldr	r2, [r4, #8]
 8004052:	3b01      	subs	r3, #1
 8004054:	3a01      	subs	r2, #1
 8004056:	606b      	str	r3, [r5, #4]
 8004058:	60a2      	str	r2, [r4, #8]
 800405a:	b142      	cbz	r2, 800406e <_scanf_chars+0x8e>
 800405c:	2b00      	cmp	r3, #0
 800405e:	dcd7      	bgt.n	8004010 <_scanf_chars+0x30>
 8004060:	4629      	mov	r1, r5
 8004062:	4640      	mov	r0, r8
 8004064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004068:	4798      	blx	r3
 800406a:	2800      	cmp	r0, #0
 800406c:	d0d0      	beq.n	8004010 <_scanf_chars+0x30>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	f013 0310 	ands.w	r3, r3, #16
 8004074:	d105      	bne.n	8004082 <_scanf_chars+0xa2>
 8004076:	68e2      	ldr	r2, [r4, #12]
 8004078:	3201      	adds	r2, #1
 800407a:	60e2      	str	r2, [r4, #12]
 800407c:	69a2      	ldr	r2, [r4, #24]
 800407e:	b102      	cbz	r2, 8004082 <_scanf_chars+0xa2>
 8004080:	7033      	strb	r3, [r6, #0]
 8004082:	2000      	movs	r0, #0
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	443b      	add	r3, r7
 8004088:	6123      	str	r3, [r4, #16]
 800408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408e:	bf00      	nop
 8004090:	0800467e 	.word	0x0800467e

08004094 <_scanf_i>:
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	460c      	mov	r4, r1
 800409a:	4698      	mov	r8, r3
 800409c:	4b72      	ldr	r3, [pc, #456]	; (8004268 <_scanf_i+0x1d4>)
 800409e:	b087      	sub	sp, #28
 80040a0:	4682      	mov	sl, r0
 80040a2:	4616      	mov	r6, r2
 80040a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040a8:	ab03      	add	r3, sp, #12
 80040aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040ae:	4b6f      	ldr	r3, [pc, #444]	; (800426c <_scanf_i+0x1d8>)
 80040b0:	69a1      	ldr	r1, [r4, #24]
 80040b2:	4a6f      	ldr	r2, [pc, #444]	; (8004270 <_scanf_i+0x1dc>)
 80040b4:	4627      	mov	r7, r4
 80040b6:	2903      	cmp	r1, #3
 80040b8:	bf18      	it	ne
 80040ba:	461a      	movne	r2, r3
 80040bc:	68a3      	ldr	r3, [r4, #8]
 80040be:	9201      	str	r2, [sp, #4]
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040c6:	bf81      	itttt	hi
 80040c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040cc:	eb03 0905 	addhi.w	r9, r3, r5
 80040d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040d4:	60a3      	strhi	r3, [r4, #8]
 80040d6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80040da:	bf98      	it	ls
 80040dc:	f04f 0900 	movls.w	r9, #0
 80040e0:	463d      	mov	r5, r7
 80040e2:	f04f 0b00 	mov.w	fp, #0
 80040e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80040ea:	6023      	str	r3, [r4, #0]
 80040ec:	6831      	ldr	r1, [r6, #0]
 80040ee:	ab03      	add	r3, sp, #12
 80040f0:	2202      	movs	r2, #2
 80040f2:	7809      	ldrb	r1, [r1, #0]
 80040f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80040f8:	f000 f940 	bl	800437c <memchr>
 80040fc:	b328      	cbz	r0, 800414a <_scanf_i+0xb6>
 80040fe:	f1bb 0f01 	cmp.w	fp, #1
 8004102:	d159      	bne.n	80041b8 <_scanf_i+0x124>
 8004104:	6862      	ldr	r2, [r4, #4]
 8004106:	b92a      	cbnz	r2, 8004114 <_scanf_i+0x80>
 8004108:	2308      	movs	r3, #8
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	6063      	str	r3, [r4, #4]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	6022      	str	r2, [r4, #0]
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	68a2      	ldr	r2, [r4, #8]
 800411e:	1e51      	subs	r1, r2, #1
 8004120:	60a1      	str	r1, [r4, #8]
 8004122:	b192      	cbz	r2, 800414a <_scanf_i+0xb6>
 8004124:	6832      	ldr	r2, [r6, #0]
 8004126:	1c51      	adds	r1, r2, #1
 8004128:	6031      	str	r1, [r6, #0]
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	f805 2b01 	strb.w	r2, [r5], #1
 8004130:	6872      	ldr	r2, [r6, #4]
 8004132:	3a01      	subs	r2, #1
 8004134:	2a00      	cmp	r2, #0
 8004136:	6072      	str	r2, [r6, #4]
 8004138:	dc07      	bgt.n	800414a <_scanf_i+0xb6>
 800413a:	4631      	mov	r1, r6
 800413c:	4650      	mov	r0, sl
 800413e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004142:	4790      	blx	r2
 8004144:	2800      	cmp	r0, #0
 8004146:	f040 8085 	bne.w	8004254 <_scanf_i+0x1c0>
 800414a:	f10b 0b01 	add.w	fp, fp, #1
 800414e:	f1bb 0f03 	cmp.w	fp, #3
 8004152:	d1cb      	bne.n	80040ec <_scanf_i+0x58>
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	b90b      	cbnz	r3, 800415c <_scanf_i+0xc8>
 8004158:	230a      	movs	r3, #10
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	4945      	ldr	r1, [pc, #276]	; (8004274 <_scanf_i+0x1e0>)
 8004160:	6960      	ldr	r0, [r4, #20]
 8004162:	1ac9      	subs	r1, r1, r3
 8004164:	f000 f888 	bl	8004278 <__sccl>
 8004168:	f04f 0b00 	mov.w	fp, #0
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d03d      	beq.n	80041f0 <_scanf_i+0x15c>
 8004174:	6831      	ldr	r1, [r6, #0]
 8004176:	6960      	ldr	r0, [r4, #20]
 8004178:	f891 c000 	ldrb.w	ip, [r1]
 800417c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004180:	2800      	cmp	r0, #0
 8004182:	d035      	beq.n	80041f0 <_scanf_i+0x15c>
 8004184:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004188:	d124      	bne.n	80041d4 <_scanf_i+0x140>
 800418a:	0510      	lsls	r0, r2, #20
 800418c:	d522      	bpl.n	80041d4 <_scanf_i+0x140>
 800418e:	f10b 0b01 	add.w	fp, fp, #1
 8004192:	f1b9 0f00 	cmp.w	r9, #0
 8004196:	d003      	beq.n	80041a0 <_scanf_i+0x10c>
 8004198:	3301      	adds	r3, #1
 800419a:	f109 39ff 	add.w	r9, r9, #4294967295
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	6873      	ldr	r3, [r6, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	6073      	str	r3, [r6, #4]
 80041a8:	dd1b      	ble.n	80041e2 <_scanf_i+0x14e>
 80041aa:	6833      	ldr	r3, [r6, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	68a3      	ldr	r3, [r4, #8]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60a3      	str	r3, [r4, #8]
 80041b6:	e7d9      	b.n	800416c <_scanf_i+0xd8>
 80041b8:	f1bb 0f02 	cmp.w	fp, #2
 80041bc:	d1ae      	bne.n	800411c <_scanf_i+0x88>
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80041c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80041c8:	d1bf      	bne.n	800414a <_scanf_i+0xb6>
 80041ca:	2310      	movs	r3, #16
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	e7a2      	b.n	800411a <_scanf_i+0x86>
 80041d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	780b      	ldrb	r3, [r1, #0]
 80041dc:	f805 3b01 	strb.w	r3, [r5], #1
 80041e0:	e7de      	b.n	80041a0 <_scanf_i+0x10c>
 80041e2:	4631      	mov	r1, r6
 80041e4:	4650      	mov	r0, sl
 80041e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041ea:	4798      	blx	r3
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d0df      	beq.n	80041b0 <_scanf_i+0x11c>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	05d9      	lsls	r1, r3, #23
 80041f4:	d50d      	bpl.n	8004212 <_scanf_i+0x17e>
 80041f6:	42bd      	cmp	r5, r7
 80041f8:	d909      	bls.n	800420e <_scanf_i+0x17a>
 80041fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80041fe:	4632      	mov	r2, r6
 8004200:	4650      	mov	r0, sl
 8004202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004206:	f105 39ff 	add.w	r9, r5, #4294967295
 800420a:	4798      	blx	r3
 800420c:	464d      	mov	r5, r9
 800420e:	42bd      	cmp	r5, r7
 8004210:	d028      	beq.n	8004264 <_scanf_i+0x1d0>
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	f012 0210 	ands.w	r2, r2, #16
 8004218:	d113      	bne.n	8004242 <_scanf_i+0x1ae>
 800421a:	702a      	strb	r2, [r5, #0]
 800421c:	4639      	mov	r1, r7
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	4650      	mov	r0, sl
 8004222:	9e01      	ldr	r6, [sp, #4]
 8004224:	47b0      	blx	r6
 8004226:	f8d8 3000 	ldr.w	r3, [r8]
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	f8c8 2000 	str.w	r2, [r8]
 8004232:	f011 0f20 	tst.w	r1, #32
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	d00f      	beq.n	800425a <_scanf_i+0x1c6>
 800423a:	6018      	str	r0, [r3, #0]
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60e3      	str	r3, [r4, #12]
 8004242:	2000      	movs	r0, #0
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	1bed      	subs	r5, r5, r7
 8004248:	445d      	add	r5, fp
 800424a:	442b      	add	r3, r5
 800424c:	6123      	str	r3, [r4, #16]
 800424e:	b007      	add	sp, #28
 8004250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004254:	f04f 0b00 	mov.w	fp, #0
 8004258:	e7ca      	b.n	80041f0 <_scanf_i+0x15c>
 800425a:	07ca      	lsls	r2, r1, #31
 800425c:	bf4c      	ite	mi
 800425e:	8018      	strhmi	r0, [r3, #0]
 8004260:	6018      	strpl	r0, [r3, #0]
 8004262:	e7eb      	b.n	800423c <_scanf_i+0x1a8>
 8004264:	2001      	movs	r0, #1
 8004266:	e7f2      	b.n	800424e <_scanf_i+0x1ba>
 8004268:	08004628 	.word	0x08004628
 800426c:	080045f9 	.word	0x080045f9
 8004270:	08004511 	.word	0x08004511
 8004274:	08004672 	.word	0x08004672

08004278 <__sccl>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	780b      	ldrb	r3, [r1, #0]
 800427c:	4604      	mov	r4, r0
 800427e:	2b5e      	cmp	r3, #94	; 0x5e
 8004280:	bf0b      	itete	eq
 8004282:	784b      	ldrbeq	r3, [r1, #1]
 8004284:	1c4a      	addne	r2, r1, #1
 8004286:	1c8a      	addeq	r2, r1, #2
 8004288:	2100      	movne	r1, #0
 800428a:	bf08      	it	eq
 800428c:	2101      	moveq	r1, #1
 800428e:	3801      	subs	r0, #1
 8004290:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004294:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004298:	42a8      	cmp	r0, r5
 800429a:	d1fb      	bne.n	8004294 <__sccl+0x1c>
 800429c:	b90b      	cbnz	r3, 80042a2 <__sccl+0x2a>
 800429e:	1e50      	subs	r0, r2, #1
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	f081 0101 	eor.w	r1, r1, #1
 80042a6:	4610      	mov	r0, r2
 80042a8:	54e1      	strb	r1, [r4, r3]
 80042aa:	4602      	mov	r2, r0
 80042ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042b0:	2d2d      	cmp	r5, #45	; 0x2d
 80042b2:	d005      	beq.n	80042c0 <__sccl+0x48>
 80042b4:	2d5d      	cmp	r5, #93	; 0x5d
 80042b6:	d016      	beq.n	80042e6 <__sccl+0x6e>
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d0f1      	beq.n	80042a0 <__sccl+0x28>
 80042bc:	462b      	mov	r3, r5
 80042be:	e7f2      	b.n	80042a6 <__sccl+0x2e>
 80042c0:	7846      	ldrb	r6, [r0, #1]
 80042c2:	2e5d      	cmp	r6, #93	; 0x5d
 80042c4:	d0fa      	beq.n	80042bc <__sccl+0x44>
 80042c6:	42b3      	cmp	r3, r6
 80042c8:	dcf8      	bgt.n	80042bc <__sccl+0x44>
 80042ca:	461a      	mov	r2, r3
 80042cc:	3002      	adds	r0, #2
 80042ce:	3201      	adds	r2, #1
 80042d0:	4296      	cmp	r6, r2
 80042d2:	54a1      	strb	r1, [r4, r2]
 80042d4:	dcfb      	bgt.n	80042ce <__sccl+0x56>
 80042d6:	1af2      	subs	r2, r6, r3
 80042d8:	3a01      	subs	r2, #1
 80042da:	42b3      	cmp	r3, r6
 80042dc:	bfa8      	it	ge
 80042de:	2200      	movge	r2, #0
 80042e0:	1c5d      	adds	r5, r3, #1
 80042e2:	18ab      	adds	r3, r5, r2
 80042e4:	e7e1      	b.n	80042aa <__sccl+0x32>
 80042e6:	4610      	mov	r0, r2
 80042e8:	e7da      	b.n	80042a0 <__sccl+0x28>

080042ea <__submore>:
 80042ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ee:	460c      	mov	r4, r1
 80042f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80042f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f6:	4299      	cmp	r1, r3
 80042f8:	d11b      	bne.n	8004332 <__submore+0x48>
 80042fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042fe:	f7ff fc11 	bl	8003b24 <_malloc_r>
 8004302:	b918      	cbnz	r0, 800430c <__submore+0x22>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004310:	63a3      	str	r3, [r4, #56]	; 0x38
 8004312:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004316:	6360      	str	r0, [r4, #52]	; 0x34
 8004318:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800431c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004320:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004324:	7043      	strb	r3, [r0, #1]
 8004326:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800432a:	7003      	strb	r3, [r0, #0]
 800432c:	6020      	str	r0, [r4, #0]
 800432e:	2000      	movs	r0, #0
 8004330:	e7ea      	b.n	8004308 <__submore+0x1e>
 8004332:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004334:	0077      	lsls	r7, r6, #1
 8004336:	463a      	mov	r2, r7
 8004338:	f000 f83c 	bl	80043b4 <_realloc_r>
 800433c:	4605      	mov	r5, r0
 800433e:	2800      	cmp	r0, #0
 8004340:	d0e0      	beq.n	8004304 <__submore+0x1a>
 8004342:	eb00 0806 	add.w	r8, r0, r6
 8004346:	4601      	mov	r1, r0
 8004348:	4632      	mov	r2, r6
 800434a:	4640      	mov	r0, r8
 800434c:	f000 f824 	bl	8004398 <memcpy>
 8004350:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004354:	f8c4 8000 	str.w	r8, [r4]
 8004358:	e7e9      	b.n	800432e <__submore+0x44>
	...

0800435c <_sbrk_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	2300      	movs	r3, #0
 8004360:	4d05      	ldr	r5, [pc, #20]	; (8004378 <_sbrk_r+0x1c>)
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc f9b8 	bl	80006dc <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_sbrk_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_sbrk_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000324 	.word	0x20000324

0800437c <memchr>:
 800437c:	4603      	mov	r3, r0
 800437e:	b510      	push	{r4, lr}
 8004380:	b2c9      	uxtb	r1, r1
 8004382:	4402      	add	r2, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	4618      	mov	r0, r3
 8004388:	d101      	bne.n	800438e <memchr+0x12>
 800438a:	2000      	movs	r0, #0
 800438c:	e003      	b.n	8004396 <memchr+0x1a>
 800438e:	7804      	ldrb	r4, [r0, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	428c      	cmp	r4, r1
 8004394:	d1f6      	bne.n	8004384 <memchr+0x8>
 8004396:	bd10      	pop	{r4, pc}

08004398 <memcpy>:
 8004398:	440a      	add	r2, r1
 800439a:	4291      	cmp	r1, r2
 800439c:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a0:	d100      	bne.n	80043a4 <memcpy+0xc>
 80043a2:	4770      	bx	lr
 80043a4:	b510      	push	{r4, lr}
 80043a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043aa:	4291      	cmp	r1, r2
 80043ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b0:	d1f9      	bne.n	80043a6 <memcpy+0xe>
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <_realloc_r>:
 80043b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b8:	4680      	mov	r8, r0
 80043ba:	4614      	mov	r4, r2
 80043bc:	460e      	mov	r6, r1
 80043be:	b921      	cbnz	r1, 80043ca <_realloc_r+0x16>
 80043c0:	4611      	mov	r1, r2
 80043c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	f7ff bbad 	b.w	8003b24 <_malloc_r>
 80043ca:	b92a      	cbnz	r2, 80043d8 <_realloc_r+0x24>
 80043cc:	f7ff fb42 	bl	8003a54 <_free_r>
 80043d0:	4625      	mov	r5, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d8:	f000 f910 	bl	80045fc <_malloc_usable_size_r>
 80043dc:	4284      	cmp	r4, r0
 80043de:	4607      	mov	r7, r0
 80043e0:	d802      	bhi.n	80043e8 <_realloc_r+0x34>
 80043e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043e6:	d812      	bhi.n	800440e <_realloc_r+0x5a>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4640      	mov	r0, r8
 80043ec:	f7ff fb9a 	bl	8003b24 <_malloc_r>
 80043f0:	4605      	mov	r5, r0
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d0ed      	beq.n	80043d2 <_realloc_r+0x1e>
 80043f6:	42bc      	cmp	r4, r7
 80043f8:	4622      	mov	r2, r4
 80043fa:	4631      	mov	r1, r6
 80043fc:	bf28      	it	cs
 80043fe:	463a      	movcs	r2, r7
 8004400:	f7ff ffca 	bl	8004398 <memcpy>
 8004404:	4631      	mov	r1, r6
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fb24 	bl	8003a54 <_free_r>
 800440c:	e7e1      	b.n	80043d2 <_realloc_r+0x1e>
 800440e:	4635      	mov	r5, r6
 8004410:	e7df      	b.n	80043d2 <_realloc_r+0x1e>
	...

08004414 <_strtol_l.constprop.0>:
 8004414:	2b01      	cmp	r3, #1
 8004416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441a:	4686      	mov	lr, r0
 800441c:	4690      	mov	r8, r2
 800441e:	d001      	beq.n	8004424 <_strtol_l.constprop.0+0x10>
 8004420:	2b24      	cmp	r3, #36	; 0x24
 8004422:	d906      	bls.n	8004432 <_strtol_l.constprop.0+0x1e>
 8004424:	f7ff faea 	bl	80039fc <__errno>
 8004428:	2316      	movs	r3, #22
 800442a:	6003      	str	r3, [r0, #0]
 800442c:	2000      	movs	r0, #0
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004432:	460d      	mov	r5, r1
 8004434:	4835      	ldr	r0, [pc, #212]	; (800450c <_strtol_l.constprop.0+0xf8>)
 8004436:	462a      	mov	r2, r5
 8004438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800443c:	5d06      	ldrb	r6, [r0, r4]
 800443e:	f016 0608 	ands.w	r6, r6, #8
 8004442:	d1f8      	bne.n	8004436 <_strtol_l.constprop.0+0x22>
 8004444:	2c2d      	cmp	r4, #45	; 0x2d
 8004446:	d12e      	bne.n	80044a6 <_strtol_l.constprop.0+0x92>
 8004448:	2601      	movs	r6, #1
 800444a:	782c      	ldrb	r4, [r5, #0]
 800444c:	1c95      	adds	r5, r2, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d057      	beq.n	8004502 <_strtol_l.constprop.0+0xee>
 8004452:	2b10      	cmp	r3, #16
 8004454:	d109      	bne.n	800446a <_strtol_l.constprop.0+0x56>
 8004456:	2c30      	cmp	r4, #48	; 0x30
 8004458:	d107      	bne.n	800446a <_strtol_l.constprop.0+0x56>
 800445a:	782a      	ldrb	r2, [r5, #0]
 800445c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004460:	2a58      	cmp	r2, #88	; 0x58
 8004462:	d149      	bne.n	80044f8 <_strtol_l.constprop.0+0xe4>
 8004464:	2310      	movs	r3, #16
 8004466:	786c      	ldrb	r4, [r5, #1]
 8004468:	3502      	adds	r5, #2
 800446a:	2200      	movs	r2, #0
 800446c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004470:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004474:	fbbc f9f3 	udiv	r9, ip, r3
 8004478:	4610      	mov	r0, r2
 800447a:	fb03 ca19 	mls	sl, r3, r9, ip
 800447e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004482:	2f09      	cmp	r7, #9
 8004484:	d814      	bhi.n	80044b0 <_strtol_l.constprop.0+0x9c>
 8004486:	463c      	mov	r4, r7
 8004488:	42a3      	cmp	r3, r4
 800448a:	dd20      	ble.n	80044ce <_strtol_l.constprop.0+0xba>
 800448c:	1c57      	adds	r7, r2, #1
 800448e:	d007      	beq.n	80044a0 <_strtol_l.constprop.0+0x8c>
 8004490:	4581      	cmp	r9, r0
 8004492:	d319      	bcc.n	80044c8 <_strtol_l.constprop.0+0xb4>
 8004494:	d101      	bne.n	800449a <_strtol_l.constprop.0+0x86>
 8004496:	45a2      	cmp	sl, r4
 8004498:	db16      	blt.n	80044c8 <_strtol_l.constprop.0+0xb4>
 800449a:	2201      	movs	r2, #1
 800449c:	fb00 4003 	mla	r0, r0, r3, r4
 80044a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044a4:	e7eb      	b.n	800447e <_strtol_l.constprop.0+0x6a>
 80044a6:	2c2b      	cmp	r4, #43	; 0x2b
 80044a8:	bf04      	itt	eq
 80044aa:	782c      	ldrbeq	r4, [r5, #0]
 80044ac:	1c95      	addeq	r5, r2, #2
 80044ae:	e7ce      	b.n	800444e <_strtol_l.constprop.0+0x3a>
 80044b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80044b4:	2f19      	cmp	r7, #25
 80044b6:	d801      	bhi.n	80044bc <_strtol_l.constprop.0+0xa8>
 80044b8:	3c37      	subs	r4, #55	; 0x37
 80044ba:	e7e5      	b.n	8004488 <_strtol_l.constprop.0+0x74>
 80044bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80044c0:	2f19      	cmp	r7, #25
 80044c2:	d804      	bhi.n	80044ce <_strtol_l.constprop.0+0xba>
 80044c4:	3c57      	subs	r4, #87	; 0x57
 80044c6:	e7df      	b.n	8004488 <_strtol_l.constprop.0+0x74>
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295
 80044cc:	e7e8      	b.n	80044a0 <_strtol_l.constprop.0+0x8c>
 80044ce:	1c53      	adds	r3, r2, #1
 80044d0:	d108      	bne.n	80044e4 <_strtol_l.constprop.0+0xd0>
 80044d2:	2322      	movs	r3, #34	; 0x22
 80044d4:	4660      	mov	r0, ip
 80044d6:	f8ce 3000 	str.w	r3, [lr]
 80044da:	f1b8 0f00 	cmp.w	r8, #0
 80044de:	d0a6      	beq.n	800442e <_strtol_l.constprop.0+0x1a>
 80044e0:	1e69      	subs	r1, r5, #1
 80044e2:	e006      	b.n	80044f2 <_strtol_l.constprop.0+0xde>
 80044e4:	b106      	cbz	r6, 80044e8 <_strtol_l.constprop.0+0xd4>
 80044e6:	4240      	negs	r0, r0
 80044e8:	f1b8 0f00 	cmp.w	r8, #0
 80044ec:	d09f      	beq.n	800442e <_strtol_l.constprop.0+0x1a>
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	d1f6      	bne.n	80044e0 <_strtol_l.constprop.0+0xcc>
 80044f2:	f8c8 1000 	str.w	r1, [r8]
 80044f6:	e79a      	b.n	800442e <_strtol_l.constprop.0+0x1a>
 80044f8:	2430      	movs	r4, #48	; 0x30
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1b5      	bne.n	800446a <_strtol_l.constprop.0+0x56>
 80044fe:	2308      	movs	r3, #8
 8004500:	e7b3      	b.n	800446a <_strtol_l.constprop.0+0x56>
 8004502:	2c30      	cmp	r4, #48	; 0x30
 8004504:	d0a9      	beq.n	800445a <_strtol_l.constprop.0+0x46>
 8004506:	230a      	movs	r3, #10
 8004508:	e7af      	b.n	800446a <_strtol_l.constprop.0+0x56>
 800450a:	bf00      	nop
 800450c:	0800467e 	.word	0x0800467e

08004510 <_strtol_r>:
 8004510:	f7ff bf80 	b.w	8004414 <_strtol_l.constprop.0>

08004514 <_strtoul_l.constprop.0>:
 8004514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004518:	4686      	mov	lr, r0
 800451a:	460d      	mov	r5, r1
 800451c:	4f35      	ldr	r7, [pc, #212]	; (80045f4 <_strtoul_l.constprop.0+0xe0>)
 800451e:	4628      	mov	r0, r5
 8004520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004524:	5d3e      	ldrb	r6, [r7, r4]
 8004526:	f016 0608 	ands.w	r6, r6, #8
 800452a:	d1f8      	bne.n	800451e <_strtoul_l.constprop.0+0xa>
 800452c:	2c2d      	cmp	r4, #45	; 0x2d
 800452e:	d130      	bne.n	8004592 <_strtoul_l.constprop.0+0x7e>
 8004530:	2601      	movs	r6, #1
 8004532:	782c      	ldrb	r4, [r5, #0]
 8004534:	1c85      	adds	r5, r0, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d057      	beq.n	80045ea <_strtoul_l.constprop.0+0xd6>
 800453a:	2b10      	cmp	r3, #16
 800453c:	d109      	bne.n	8004552 <_strtoul_l.constprop.0+0x3e>
 800453e:	2c30      	cmp	r4, #48	; 0x30
 8004540:	d107      	bne.n	8004552 <_strtoul_l.constprop.0+0x3e>
 8004542:	7828      	ldrb	r0, [r5, #0]
 8004544:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004548:	2858      	cmp	r0, #88	; 0x58
 800454a:	d149      	bne.n	80045e0 <_strtoul_l.constprop.0+0xcc>
 800454c:	2310      	movs	r3, #16
 800454e:	786c      	ldrb	r4, [r5, #1]
 8004550:	3502      	adds	r5, #2
 8004552:	f04f 38ff 	mov.w	r8, #4294967295
 8004556:	fbb8 f8f3 	udiv	r8, r8, r3
 800455a:	2700      	movs	r7, #0
 800455c:	fb03 f908 	mul.w	r9, r3, r8
 8004560:	4638      	mov	r0, r7
 8004562:	ea6f 0909 	mvn.w	r9, r9
 8004566:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800456a:	f1bc 0f09 	cmp.w	ip, #9
 800456e:	d815      	bhi.n	800459c <_strtoul_l.constprop.0+0x88>
 8004570:	4664      	mov	r4, ip
 8004572:	42a3      	cmp	r3, r4
 8004574:	dd23      	ble.n	80045be <_strtoul_l.constprop.0+0xaa>
 8004576:	f1b7 3fff 	cmp.w	r7, #4294967295
 800457a:	d007      	beq.n	800458c <_strtoul_l.constprop.0+0x78>
 800457c:	4580      	cmp	r8, r0
 800457e:	d31b      	bcc.n	80045b8 <_strtoul_l.constprop.0+0xa4>
 8004580:	d101      	bne.n	8004586 <_strtoul_l.constprop.0+0x72>
 8004582:	45a1      	cmp	r9, r4
 8004584:	db18      	blt.n	80045b8 <_strtoul_l.constprop.0+0xa4>
 8004586:	2701      	movs	r7, #1
 8004588:	fb00 4003 	mla	r0, r0, r3, r4
 800458c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004590:	e7e9      	b.n	8004566 <_strtoul_l.constprop.0+0x52>
 8004592:	2c2b      	cmp	r4, #43	; 0x2b
 8004594:	bf04      	itt	eq
 8004596:	782c      	ldrbeq	r4, [r5, #0]
 8004598:	1c85      	addeq	r5, r0, #2
 800459a:	e7cc      	b.n	8004536 <_strtoul_l.constprop.0+0x22>
 800459c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80045a0:	f1bc 0f19 	cmp.w	ip, #25
 80045a4:	d801      	bhi.n	80045aa <_strtoul_l.constprop.0+0x96>
 80045a6:	3c37      	subs	r4, #55	; 0x37
 80045a8:	e7e3      	b.n	8004572 <_strtoul_l.constprop.0+0x5e>
 80045aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80045ae:	f1bc 0f19 	cmp.w	ip, #25
 80045b2:	d804      	bhi.n	80045be <_strtoul_l.constprop.0+0xaa>
 80045b4:	3c57      	subs	r4, #87	; 0x57
 80045b6:	e7dc      	b.n	8004572 <_strtoul_l.constprop.0+0x5e>
 80045b8:	f04f 37ff 	mov.w	r7, #4294967295
 80045bc:	e7e6      	b.n	800458c <_strtoul_l.constprop.0+0x78>
 80045be:	1c7b      	adds	r3, r7, #1
 80045c0:	d106      	bne.n	80045d0 <_strtoul_l.constprop.0+0xbc>
 80045c2:	2322      	movs	r3, #34	; 0x22
 80045c4:	4638      	mov	r0, r7
 80045c6:	f8ce 3000 	str.w	r3, [lr]
 80045ca:	b932      	cbnz	r2, 80045da <_strtoul_l.constprop.0+0xc6>
 80045cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045d0:	b106      	cbz	r6, 80045d4 <_strtoul_l.constprop.0+0xc0>
 80045d2:	4240      	negs	r0, r0
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	d0f9      	beq.n	80045cc <_strtoul_l.constprop.0+0xb8>
 80045d8:	b107      	cbz	r7, 80045dc <_strtoul_l.constprop.0+0xc8>
 80045da:	1e69      	subs	r1, r5, #1
 80045dc:	6011      	str	r1, [r2, #0]
 80045de:	e7f5      	b.n	80045cc <_strtoul_l.constprop.0+0xb8>
 80045e0:	2430      	movs	r4, #48	; 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1b5      	bne.n	8004552 <_strtoul_l.constprop.0+0x3e>
 80045e6:	2308      	movs	r3, #8
 80045e8:	e7b3      	b.n	8004552 <_strtoul_l.constprop.0+0x3e>
 80045ea:	2c30      	cmp	r4, #48	; 0x30
 80045ec:	d0a9      	beq.n	8004542 <_strtoul_l.constprop.0+0x2e>
 80045ee:	230a      	movs	r3, #10
 80045f0:	e7af      	b.n	8004552 <_strtoul_l.constprop.0+0x3e>
 80045f2:	bf00      	nop
 80045f4:	0800467e 	.word	0x0800467e

080045f8 <_strtoul_r>:
 80045f8:	f7ff bf8c 	b.w	8004514 <_strtoul_l.constprop.0>

080045fc <_malloc_usable_size_r>:
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f18      	subs	r0, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfbc      	itt	lt
 8004606:	580b      	ldrlt	r3, [r1, r0]
 8004608:	18c0      	addlt	r0, r0, r3
 800460a:	4770      	bx	lr

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr


TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b20  08002b20  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b20  08002b20  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b20  08002b20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  08002b38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b38  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b455  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec8  00000000  00000000  0002b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a28  00000000  00000000  0002e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171c9  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6b9  00000000  00000000  00045c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086a67  00000000  00000000  0005534a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003610  00000000  00000000  000dbdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000df3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d0 	.word	0x080024d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080024d0 	.word	0x080024d0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	; (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f000 fe01 	bl	8000dec <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f900 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	40005400 	.word	0x40005400
 8000200:	000186a0 	.word	0x000186a0

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b08a      	sub	sp, #40	; 0x28
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <HAL_I2C_MspInit+0x90>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d132      	bne.n	800028a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <HAL_I2C_MspInit+0x94>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800023c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000242:	2312      	movs	r3, #18
 8000244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000246:	2303      	movs	r3, #3
 8000248:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	4619      	mov	r1, r3
 8000250:	4812      	ldr	r0, [pc, #72]	; (800029c <HAL_I2C_MspInit+0x98>)
 8000252:	f000 fc2f 	bl	8000ab4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <HAL_I2C_MspInit+0x9c>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	627b      	str	r3, [r7, #36]	; 0x24
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	627b      	str	r3, [r7, #36]	; 0x24
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <HAL_I2C_MspInit+0x9c>)
 800026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000270:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800027c:	61d3      	str	r3, [r2, #28]
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000280:	69db      	ldr	r3, [r3, #28]
 8000282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800028a:	bf00      	nop
 800028c:	3728      	adds	r7, #40	; 0x28
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40005400 	.word	0x40005400
 8000298:	40021000 	.word	0x40021000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40010000 	.word	0x40010000

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fa70 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f844 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f7ff ff4c 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002b4:	f7ff ff78 	bl	80001a8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80002b8:	f000 f96a 	bl	8000590 <MX_TIM3_Init>
  MX_TIM2_Init();
 80002bc:	f000 f914 	bl	80004e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 80002c0:	2032      	movs	r0, #50	; 0x32
 80002c2:	f000 fac5 	bl	8000850 <HAL_Delay>
  OLED_Init();
 80002c6:	f002 f873 	bl	80023b0 <OLED_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 80002ca:	4816      	ldr	r0, [pc, #88]	; (8000324 <main+0x80>)
 80002cc:	f001 face 	bl	800186c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Init(&htim3, TIM_CHANNEL_ALL);
 80002d0:	213c      	movs	r1, #60	; 0x3c
 80002d2:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0x80>)
 80002d4:	f001 fb1c 	bl	8001910 <HAL_TIM_Encoder_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002d8:	213c      	movs	r1, #60	; 0x3c
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <main+0x80>)
 80002dc:	f001 fbba 	bl	8001a54 <HAL_TIM_Encoder_Start>
  OLED_ShowString(1, 5, "2023 11.29");
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <main+0x84>)
 80002e2:	2105      	movs	r1, #5
 80002e4:	2001      	movs	r0, #1
 80002e6:	f001 ffe7 	bl	80022b8 <OLED_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {OLED_ShowString(3, 1, "CNT:");
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <main+0x88>)
 80002ec:	2101      	movs	r1, #1
 80002ee:	2003      	movs	r0, #3
 80002f0:	f001 ffe2 	bl	80022b8 <OLED_ShowString>
	 OLED_ShowString(2, 1, "Num:");
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <main+0x8c>)
 80002f6:	2101      	movs	r1, #1
 80002f8:	2002      	movs	r0, #2
 80002fa:	f001 ffdd 	bl	80022b8 <OLED_ShowString>
	  OLED_ShowNum(2, 5, Num, 5);
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <main+0x90>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	2305      	movs	r3, #5
 8000306:	2105      	movs	r1, #5
 8000308:	2002      	movs	r0, #2
 800030a:	f002 f813 	bl	8002334 <OLED_ShowNum>
	  OLED_ShowNum(3, 5,Timer_GetCounter(), 5);
 800030e:	f000 fa0b 	bl	8000728 <Timer_GetCounter>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	2305      	movs	r3, #5
 8000318:	2105      	movs	r1, #5
 800031a:	2003      	movs	r0, #3
 800031c:	f002 f80a 	bl	8002334 <OLED_ShowNum>
  {OLED_ShowString(3, 1, "CNT:");
 8000320:	e7e3      	b.n	80002ea <main+0x46>
 8000322:	bf00      	nop
 8000324:	200000c8 	.word	0x200000c8
 8000328:	080024e8 	.word	0x080024e8
 800032c:	080024f4 	.word	0x080024f4
 8000330:	080024fc 	.word	0x080024fc
 8000334:	20000000 	.word	0x20000000

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 f896 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fe77 	bl	8001074 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f832 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f8e4 	bl	8001578 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f81d 	bl	80003f4 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a07      	ldr	r2, [pc, #28]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d105      	bne.n	80003e0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		Num++;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80003de:	801a      	strh	r2, [r3, #0]
	}


}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200000c8 	.word	0x200000c8
 80003f0:	20000000 	.word	0x20000000

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>
	...

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a14      	ldr	r2, [pc, #80]	; (800045c <HAL_MspInit+0x5c>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x5c>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_MspInit+0x60>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_MspInit+0x60>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f9b5 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <TIM2_IRQHandler+0x10>)
 80004ba:	f001 fb59 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000080 	.word	0x20000080

080004c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <TIM3_IRQHandler+0x10>)
 80004ce:	f001 fb4f 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000c8 	.word	0x200000c8

080004dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2224      	movs	r2, #36	; 0x24
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 ffbe 	bl	8002478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_TIM2_Init+0xa4>)
 8000506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_TIM2_Init+0xa4>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_TIM2_Init+0xa4>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_TIM2_Init+0xa4>)
 800051a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800051e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <MX_TIM2_Init+0xa4>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_TIM2_Init+0xa4>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800052c:	2303      	movs	r3, #3
 800052e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000534:	2301      	movs	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000544:	2301      	movs	r3, #1
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <MX_TIM2_Init+0xa4>)
 8000558:	f001 f9da 	bl	8001910 <HAL_TIM_Encoder_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000562:	f7ff ff47 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <MX_TIM2_Init+0xa4>)
 8000574:	f001 fcae 	bl	8001ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800057e:	f7ff ff39 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3730      	adds	r7, #48	; 0x30
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000080 	.word	0x20000080

08000590 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2224      	movs	r2, #36	; 0x24
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 ff6a 	bl	8002478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005ae:	4a21      	ldr	r2, [pc, #132]	; (8000634 <MX_TIM3_Init+0xa4>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005b4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80005b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005c2:	2209      	movs	r2, #9
 80005c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005ea:	2301      	movs	r3, #1
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <MX_TIM3_Init+0xa0>)
 80005fe:	f001 f987 	bl	8001910 <HAL_TIM_Encoder_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000608:	f7ff fef4 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_TIM3_Init+0xa0>)
 800061a:	f001 fc5b 	bl	8001ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000624:	f7ff fee6 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3730      	adds	r7, #48	; 0x30
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000c8 	.word	0x200000c8
 8000634:	40000400 	.word	0x40000400

08000638 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000656:	d12c      	bne.n	80006b2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	4a2f      	ldr	r2, [pc, #188]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	61d3      	str	r3, [r2, #28]
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000688:	2303      	movs	r3, #3
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4619      	mov	r1, r3
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <HAL_TIM_Encoder_MspInit+0xe8>)
 800069c:	f000 fa0a 	bl	8000ab4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	201c      	movs	r0, #28
 80006a6:	f000 f9ce 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006aa:	201c      	movs	r0, #28
 80006ac:	f000 f9e7 	bl	8000a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80006b0:	e030      	b.n	8000714 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(tim_encoderHandle->Instance==TIM3)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <HAL_TIM_Encoder_MspInit+0xec>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d12b      	bne.n	8000714 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ec:	23c0      	movs	r3, #192	; 0xc0
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4619      	mov	r1, r3
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000700:	f000 f9d8 	bl	8000ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	201d      	movs	r0, #29
 800070a:	f000 f99c 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800070e:	201d      	movs	r0, #29
 8000710:	f000 f9b5 	bl	8000a7e <HAL_NVIC_EnableIRQ>
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	40000400 	.word	0x40000400

08000728 <Timer_GetCounter>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t Timer_GetCounter(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	return __HAL_TIM_GET_COUNTER(&htim3);
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <Timer_GetCounter+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	b29b      	uxth	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	200000c8 	.word	0x200000c8

08000740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff fecc 	bl	80004dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000746:	490c      	ldr	r1, [pc, #48]	; (8000778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <LoopFillZerobss+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800075c:	4c09      	ldr	r4, [pc, #36]	; (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f001 fe8d 	bl	8002488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fd99 	bl	80002a4 <main>
  bx lr
 8000772:	4770      	bx	lr
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800077c:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 8000780:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000784:	20000114 	.word	0x20000114

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_Init+0x28>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_Init+0x28>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f947 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f808 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff fe2a 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f95f 	bl	8000a9a <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f927 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000004 	.word	0x20000004
 8000810:	2000000c 	.word	0x2000000c
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <HAL_IncTick+0x20>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000110 	.word	0x20000110

0800083c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000110 	.word	0x20000110

08000850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff fff0 	bl	800083c <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffe0 	bl	800083c <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000000c 	.word	0x2000000c

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff2d 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff42 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff35 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b08b      	sub	sp, #44	; 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e169      	b.n	8000d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f040 8158 	bne.w	8000d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	4a9a      	ldr	r2, [pc, #616]	; (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d05e      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000af0:	4a98      	ldr	r2, [pc, #608]	; (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d875      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000af6:	4a98      	ldr	r2, [pc, #608]	; (8000d58 <HAL_GPIO_Init+0x2a4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d058      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000afc:	4a96      	ldr	r2, [pc, #600]	; (8000d58 <HAL_GPIO_Init+0x2a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d86f      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b02:	4a96      	ldr	r2, [pc, #600]	; (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d052      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b08:	4a94      	ldr	r2, [pc, #592]	; (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d869      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b0e:	4a94      	ldr	r2, [pc, #592]	; (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d04c      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b14:	4a92      	ldr	r2, [pc, #584]	; (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d863      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a92      	ldr	r2, [pc, #584]	; (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d046      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b20:	4a90      	ldr	r2, [pc, #576]	; (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d85d      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d82a      	bhi.n	8000b80 <HAL_GPIO_Init+0xcc>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d859      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <HAL_GPIO_Init+0x80>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000b89 	.word	0x08000b89
 8000b3c:	08000b9b 	.word	0x08000b9b
 8000b40:	08000bdd 	.word	0x08000bdd
 8000b44:	08000be3 	.word	0x08000be3
 8000b48:	08000be3 	.word	0x08000be3
 8000b4c:	08000be3 	.word	0x08000be3
 8000b50:	08000be3 	.word	0x08000be3
 8000b54:	08000be3 	.word	0x08000be3
 8000b58:	08000be3 	.word	0x08000be3
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000be3 	.word	0x08000be3
 8000b64:	08000be3 	.word	0x08000be3
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000be3 	.word	0x08000be3
 8000b70:	08000be3 	.word	0x08000be3
 8000b74:	08000be3 	.word	0x08000be3
 8000b78:	08000b91 	.word	0x08000b91
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	4a79      	ldr	r2, [pc, #484]	; (8000d68 <HAL_GPIO_Init+0x2b4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b86:	e02c      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e029      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e024      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e01f      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	330c      	adds	r3, #12
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e01a      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e013      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	611a      	str	r2, [r3, #16]
          break;
 8000bce:	e009      	b.n	8000be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	615a      	str	r2, [r3, #20]
          break;
 8000bda:	e003      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          break;
 8000be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d801      	bhi.n	8000bee <HAL_GPIO_Init+0x13a>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	e001      	b.n	8000bf2 <HAL_GPIO_Init+0x13e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2bff      	cmp	r3, #255	; 0xff
 8000bf8:	d802      	bhi.n	8000c00 <HAL_GPIO_Init+0x14c>
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x152>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3b08      	subs	r3, #8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	6a39      	ldr	r1, [r7, #32]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80b1 	beq.w	8000d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c4c:	4a48      	ldr	r2, [pc, #288]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a40      	ldr	r2, [pc, #256]	; (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d013      	beq.n	8000ca0 <HAL_GPIO_Init+0x1ec>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3f      	ldr	r2, [pc, #252]	; (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d00d      	beq.n	8000c9c <HAL_GPIO_Init+0x1e8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d007      	beq.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <HAL_GPIO_Init+0x1e0>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c94:	2304      	movs	r3, #4
 8000c96:	e004      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_GPIO_Init+0x1ee>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb2:	492f      	ldr	r1, [pc, #188]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	492c      	ldr	r1, [pc, #176]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4928      	ldr	r1, [pc, #160]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4922      	ldr	r1, [pc, #136]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60cb      	str	r3, [r1, #12]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	491e      	ldr	r1, [pc, #120]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4918      	ldr	r1, [pc, #96]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4914      	ldr	r1, [pc, #80]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d021      	beq.n	8000d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	490e      	ldr	r1, [pc, #56]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e021      	b.n	8000d96 <HAL_GPIO_Init+0x2e2>
 8000d52:	bf00      	nop
 8000d54:	10320000 	.word	0x10320000
 8000d58:	10310000 	.word	0x10310000
 8000d5c:	10220000 	.word	0x10220000
 8000d60:	10210000 	.word	0x10210000
 8000d64:	10120000 	.word	0x10120000
 8000d68:	10110000 	.word	0x10110000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40010800 	.word	0x40010800
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40011400 	.word	0x40011400
 8000d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4909      	ldr	r1, [pc, #36]	; (8000db8 <HAL_GPIO_Init+0x304>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3301      	adds	r3, #1
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	fa22 f303 	lsr.w	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f47f ae8e 	bne.w	8000ac8 <HAL_GPIO_Init+0x14>
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	372c      	adds	r7, #44	; 0x2c
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dcc:	787b      	ldrb	r3, [r7, #1]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd8:	e003      	b.n	8000de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	041a      	lsls	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	611a      	str	r2, [r3, #16]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e12b      	b.n	8001056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff f9f6 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2224      	movs	r2, #36	; 0x24
 8000e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e50:	f000 fcda 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a81      	ldr	r2, [pc, #516]	; (8001060 <HAL_I2C_Init+0x274>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d807      	bhi.n	8000e70 <HAL_I2C_Init+0x84>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a80      	ldr	r2, [pc, #512]	; (8001064 <HAL_I2C_Init+0x278>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	bf94      	ite	ls
 8000e68:	2301      	movls	r3, #1
 8000e6a:	2300      	movhi	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	e006      	b.n	8000e7e <HAL_I2C_Init+0x92>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4a7d      	ldr	r2, [pc, #500]	; (8001068 <HAL_I2C_Init+0x27c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bf94      	ite	ls
 8000e78:	2301      	movls	r3, #1
 8000e7a:	2300      	movhi	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0e7      	b.n	8001056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4a78      	ldr	r2, [pc, #480]	; (800106c <HAL_I2C_Init+0x280>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
 8000e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a6a      	ldr	r2, [pc, #424]	; (8001060 <HAL_I2C_Init+0x274>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_I2C_Init+0xd4>
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	e009      	b.n	8000ed4 <HAL_I2C_Init+0xe8>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4a69      	ldr	r2, [pc, #420]	; (8001070 <HAL_I2C_Init+0x284>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	099b      	lsrs	r3, r3, #6
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	495c      	ldr	r1, [pc, #368]	; (8001060 <HAL_I2C_Init+0x274>)
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d819      	bhi.n	8000f28 <HAL_I2C_Init+0x13c>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e59      	subs	r1, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f02:	1c59      	adds	r1, r3, #1
 8000f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00a      	beq.n	8000f24 <HAL_I2C_Init+0x138>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1e59      	subs	r1, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f22:	e051      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e04f      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d111      	bne.n	8000f54 <HAL_I2C_Init+0x168>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1e58      	subs	r0, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	440b      	add	r3, r1
 8000f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	e012      	b.n	8000f7a <HAL_I2C_Init+0x18e>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	0099      	lsls	r1, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_I2C_Init+0x196>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e022      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10e      	bne.n	8000fa8 <HAL_I2C_Init+0x1bc>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1e58      	subs	r0, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6859      	ldr	r1, [r3, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	440b      	add	r3, r1
 8000f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa6:	e00f      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1e58      	subs	r0, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	0099      	lsls	r1, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	6809      	ldr	r1, [r1, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69da      	ldr	r2, [r3, #28]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6911      	ldr	r1, [r2, #16]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	4311      	orrs	r1, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	430b      	orrs	r3, r1
 800100a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2220      	movs	r2, #32
 8001042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	000186a0 	.word	0x000186a0
 8001064:	001e847f 	.word	0x001e847f
 8001068:	003d08ff 	.word	0x003d08ff
 800106c:	431bde83 	.word	0x431bde83
 8001070:	10624dd3 	.word	0x10624dd3

08001074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e272      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8087 	beq.w	80011a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001094:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b04      	cmp	r3, #4
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a0:	4b8f      	ldr	r3, [pc, #572]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
 80010ac:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d06c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x12c>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d168      	bne.n	80011a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e24c      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x76>
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a7f      	ldr	r2, [pc, #508]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e02e      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x98>
 80010f2:	4b7b      	ldr	r3, [pc, #492]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7a      	ldr	r2, [pc, #488]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b78      	ldr	r3, [pc, #480]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a77      	ldr	r2, [pc, #476]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0xbc>
 8001116:	4b72      	ldr	r3, [pc, #456]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a71      	ldr	r2, [pc, #452]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6e      	ldr	r2, [pc, #440]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 8001130:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a6a      	ldr	r2, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a67      	ldr	r2, [pc, #412]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb74 	bl	800083c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fb70 	bl	800083c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e200      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xe4>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb60 	bl	800083c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fb5c 	bl	800083c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1ec      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x10c>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ae:	4b4c      	ldr	r3, [pc, #304]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ba:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x18c>
 80011c6:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x176>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c0      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4939      	ldr	r1, [pc, #228]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x270>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb15 	bl	800083c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fb11 	bl	800083c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a1      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4927      	ldr	r1, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_RCC_OscConfig+0x270>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff faf4 	bl	800083c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff faf0 	bl	800083c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e180      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d03a      	beq.n	80012f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d019      	beq.n	80012be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_RCC_OscConfig+0x274>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fad4 	bl	800083c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fad0 	bl	800083c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e160      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 faba 	bl	8001830 <RCC_Delay>
 80012bc:	e01c      	b.n	80012f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_RCC_OscConfig+0x274>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff faba 	bl	800083c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ca:	e00f      	b.n	80012ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fab6 	bl	800083c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d908      	bls.n	80012ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e146      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	42420000 	.word	0x42420000
 80012e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e9      	bne.n	80012cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a6 	beq.w	8001452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b7f      	ldr	r3, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7e      	ldr	r2, [pc, #504]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fa77 	bl	800083c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fa73 	bl	800083c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e103      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b75      	ldr	r3, [pc, #468]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x312>
 8001378:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	e02d      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x334>
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a69      	ldr	r2, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6213      	str	r3, [r2, #32]
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	e01c      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x356>
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a60      	ldr	r2, [pc, #384]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a5a      	ldr	r2, [pc, #360]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d015      	beq.n	8001416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fa27 	bl	800083c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fa23 	bl	800083c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0b1      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ee      	beq.n	80013f2 <HAL_RCC_OscConfig+0x37e>
 8001414:	e014      	b.n	8001440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fa11 	bl	800083c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fa0d 	bl	800083c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e09b      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ee      	bne.n	800141e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b08      	cmp	r3, #8
 8001466:	d061      	beq.n	800152c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d146      	bne.n	80014fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff f9e1 	bl	800083c <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff f9dd 	bl	800083c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e06d      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4921      	ldr	r1, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a19      	ldr	r1, [r3, #32]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	430b      	orrs	r3, r1
 80014ca:	491b      	ldr	r1, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff f9b1 	bl	800083c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff f9ad 	bl	800083c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e03d      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x46a>
 80014fc:	e035      	b.n	800156a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff f99a 	bl	800083c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff f996 	bl	800083c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e026      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x498>
 800152a:	e01e      	b.n	800156a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e019      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x500>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	429a      	cmp	r2, r3
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0d0      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d910      	bls.n	80015bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4965      	ldr	r1, [pc, #404]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b8      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	494d      	ldr	r1, [pc, #308]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d040      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d115      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e073      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06b      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4936      	ldr	r1, [pc, #216]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff f8e8 	bl	800083c <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff f8e4 	bl	800083c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e053      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d210      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0207 	bic.w	r2, r3, #7
 80016ae:	4922      	ldr	r1, [pc, #136]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e032      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4916      	ldr	r1, [pc, #88]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001706:	f000 f821 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1cc>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f846 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	08002504 	.word	0x08002504
 8001744:	20000004 	.word	0x20000004
 8001748:	20000008 	.word	0x20000008

0800174c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d002      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x30>
 8001776:	2b08      	cmp	r3, #8
 8001778:	d003      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0x36>
 800177a:	e027      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800177e:	613b      	str	r3, [r7, #16]
      break;
 8001780:	e027      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	0c9b      	lsrs	r3, r3, #18
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0c5b      	lsrs	r3, r3, #17
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ae:	fb03 f202 	mul.w	r2, r3, r2
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e004      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	613b      	str	r3, [r7, #16]
      break;
 80017ca:	e002      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ce:	613b      	str	r3, [r7, #16]
      break;
 80017d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d2:	693b      	ldr	r3, [r7, #16]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	0800251c 	.word	0x0800251c
 80017ec:	0800252c 	.word	0x0800252c
 80017f0:	003d0900 	.word	0x003d0900

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800180c:	f7ff fff2 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	08002514 	.word	0x08002514

08001830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <RCC_Delay+0x34>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <RCC_Delay+0x38>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a5b      	lsrs	r3, r3, #9
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800184c:	bf00      	nop
  }
  while (Delay --);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	60fa      	str	r2, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <RCC_Delay+0x1c>
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000004 	.word	0x20000004
 8001868:	10624dd3 	.word	0x10624dd3

0800186c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e03a      	b.n	80018fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_TIM_Base_Start_IT+0x98>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00e      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ae:	d009      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_TIM_Base_Start_IT+0x9c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_TIM_Base_Start_IT+0xa0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d010      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	e007      	b.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e093      	b.n	8001a4c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fe7d 	bl	8000638 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f000 fa2f 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	4313      	orrs	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019b0:	f023 030c 	bic.w	r3, r3, #12
 80019b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	011a      	lsls	r2, r3, #4
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	031b      	lsls	r3, r3, #12
 80019e0:	4313      	orrs	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4313      	orrs	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d110      	bne.n	8001aa6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a8a:	7b7b      	ldrb	r3, [r7, #13]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e069      	b.n	8001b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa4:	e031      	b.n	8001b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d110      	bne.n	8001ace <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001aac:	7bbb      	ldrb	r3, [r7, #14]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ab2:	7b3b      	ldrb	r3, [r7, #12]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d001      	beq.n	8001abc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e055      	b.n	8001b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001acc:	e01d      	b.n	8001b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e03e      	b.n	8001b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_TIM_Encoder_Start+0xc4>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d008      	beq.n	8001b28 <HAL_TIM_Encoder_Start+0xd4>
 8001b16:	e00f      	b.n	8001b38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f9b3 	bl	8001e8c <TIM_CCxChannelCmd>
      break;
 8001b26:	e016      	b.n	8001b56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f9ab 	bl	8001e8c <TIM_CCxChannelCmd>
      break;
 8001b36:	e00e      	b.n	8001b56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 f9a3 	bl	8001e8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f99c 	bl	8001e8c <TIM_CCxChannelCmd>
      break;
 8001b54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8ed 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8e0 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8ef 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0204 	mvn.w	r2, #4
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8c3 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8b6 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8c5 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0208 	mvn.w	r2, #8
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f899 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f88c 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f89b 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f86f 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f862 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f871 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0201 	mvn.w	r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fb68 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f941 	bl	8001fa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d10e      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d107      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f835 	bl	8001db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d10e      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d107      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0220 	mvn.w	r2, #32
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f90c 	bl	8001f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00b      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d007      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <TIM_Base_SetConfig+0xbc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d003      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <TIM_Base_SetConfig+0xc0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d108      	bne.n	8001e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <TIM_Base_SetConfig+0xbc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <TIM_Base_SetConfig+0xc0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d103      	bne.n	8001e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	615a      	str	r2, [r3, #20]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800

08001e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	621a      	str	r2, [r3, #32]
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e046      	b.n	8001f7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00e      	beq.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d009      	beq.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d004      	beq.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10c      	bne.n	8001f68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800

08001f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <OLED_I2C_Init>:
#define OLED_W_SCL(x)		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, (GPIO_PinState)(x))
#define OLED_W_SDA(x)		HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <OLED_I2C_Init+0x7c>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <OLED_I2C_Init+0x7c>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <OLED_I2C_Init+0x7c>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
	
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_OD;
 8001fe0:	2311      	movs	r3, #17
 8001fe2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin=SCL_Pin;
 8001fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <OLED_I2C_Init+0x80>)
 8001ffa:	f7fe fd5b 	bl	8000ab4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin=SDA_Pin;
 8001ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002002:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	4619      	mov	r1, r3
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <OLED_I2C_Init+0x80>)
 800200c:	f7fe fd52 	bl	8000ab4 <HAL_GPIO_Init>
	
	OLED_W_SCL(1);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <OLED_I2C_Init+0x80>)
 8002018:	f7fe fed0 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <OLED_I2C_Init+0x80>)
 8002024:	f7fe feca 	bl	8000dbc <HAL_GPIO_WritePin>
}
 8002028:	bf00      	nop
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	40010c00 	.word	0x40010c00

08002038 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <OLED_I2C_Start+0x38>)
 8002044:	f7fe feba 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8002048:	2201      	movs	r2, #1
 800204a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204e:	4808      	ldr	r0, [pc, #32]	; (8002070 <OLED_I2C_Start+0x38>)
 8002050:	f7fe feb4 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <OLED_I2C_Start+0x38>)
 800205c:	f7fe feae 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002066:	4802      	ldr	r0, [pc, #8]	; (8002070 <OLED_I2C_Start+0x38>)
 8002068:	f7fe fea8 	bl	8000dbc <HAL_GPIO_WritePin>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010c00 	.word	0x40010c00

08002074 <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207e:	4808      	ldr	r0, [pc, #32]	; (80020a0 <OLED_I2C_Stop+0x2c>)
 8002080:	f7fe fe9c 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <OLED_I2C_Stop+0x2c>)
 800208c:	f7fe fe96 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002096:	4802      	ldr	r0, [pc, #8]	; (80020a0 <OLED_I2C_Stop+0x2c>)
 8002098:	f7fe fe90 	bl	8000dbc <HAL_GPIO_WritePin>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010c00 	.word	0x40010c00

080020a4 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e01e      	b.n	80020f2 <OLED_I2C_SendByte+0x4e>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	fa42 f303 	asr.w	r3, r2, r3
 80020bc:	b25a      	sxtb	r2, r3
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	4013      	ands	r3, r2
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ce:	4812      	ldr	r0, [pc, #72]	; (8002118 <OLED_I2C_SendByte+0x74>)
 80020d0:	f7fe fe74 	bl	8000dbc <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	480f      	ldr	r0, [pc, #60]	; (8002118 <OLED_I2C_SendByte+0x74>)
 80020dc:	f7fe fe6e 	bl	8000dbc <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <OLED_I2C_SendByte+0x74>)
 80020e8:	f7fe fe68 	bl	8000dbc <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	3301      	adds	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d9dd      	bls.n	80020b4 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <OLED_I2C_SendByte+0x74>)
 8002100:	f7fe fe5c 	bl	8000dbc <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <OLED_I2C_SendByte+0x74>)
 800210c:	f7fe fe56 	bl	8000dbc <HAL_GPIO_WritePin>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010c00 	.word	0x40010c00

0800211c <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8002126:	f7ff ff87 	bl	8002038 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f7ff ffba 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff ffb7 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffb3 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 800213e:	f7ff ff99 	bl	8002074 <OLED_I2C_Stop>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8002154:	f7ff ff70 	bl	8002038 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8002158:	2078      	movs	r0, #120	; 0x78
 800215a:	f7ff ffa3 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 800215e:	2040      	movs	r0, #64	; 0x40
 8002160:	f7ff ffa0 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff9c 	bl	80020a4 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 800216c:	f7ff ff82 	bl	8002074 <OLED_I2C_Stop>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	4613      	mov	r3, r2
 8002186:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffc3 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ffba 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ffb3 	bl	800211c <OLED_WriteCommand>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	71bb      	strb	r3, [r7, #6]
 80021c8:	e014      	b.n	80021f4 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ffd2 	bl	8002178 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	e005      	b.n	80021e6 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff ffb5 	bl	800214a <OLED_WriteData>
		for(i = 0; i < 128; i++)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	3301      	adds	r3, #1
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	daf5      	bge.n	80021da <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 80021ee:	79bb      	ldrb	r3, [r7, #6]
 80021f0:	3301      	adds	r3, #1
 80021f2:	71bb      	strb	r3, [r7, #6]
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2b07      	cmp	r3, #7
 80021f8:	d9e7      	bls.n	80021ca <OLED_Clear+0xc>
		}
	}
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	460b      	mov	r3, r1
 8002210:	71bb      	strb	r3, [r7, #6]
 8002212:	4613      	mov	r3, r2
 8002214:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	3b01      	subs	r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	3b01      	subs	r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	4610      	mov	r0, r2
 800222e:	f7ff ffa3 	bl	8002178 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e00e      	b.n	8002256 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 8002238:	797b      	ldrb	r3, [r7, #5]
 800223a:	f1a3 0220 	sub.w	r2, r3, #32
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	491c      	ldr	r1, [pc, #112]	; (80022b4 <OLED_ShowChar+0xb0>)
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	440a      	add	r2, r1
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff7d 	bl	800214a <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d9ed      	bls.n	8002238 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	3b01      	subs	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	3b01      	subs	r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f7ff ff7e 	bl	8002178 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e00f      	b.n	80022a2 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	f1a3 0220 	sub.w	r2, r3, #32
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3308      	adds	r3, #8
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <OLED_ShowChar+0xb0>)
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	440a      	add	r2, r1
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff57 	bl	800214a <OLED_WriteData>
	for (i = 0; i < 8; i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d9ec      	bls.n	8002282 <OLED_ShowChar+0x7e>
	}
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08002530 	.word	0x08002530

080022b8 <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	603a      	str	r2, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	460b      	mov	r3, r1
 80022c6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e00e      	b.n	80022ec <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 80022ce:	79ba      	ldrb	r2, [r7, #6]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2d9      	uxtb	r1, r3
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff8f 	bl	8002204 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ea      	bne.n	80022ce <OLED_ShowString+0x16>
	}
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8002310:	e004      	b.n	800231c <OLED_Pow+0x1a>
	{
		Result *= X;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
	while (Y--)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	603a      	str	r2, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f5      	bne.n	8002312 <OLED_Pow+0x10>
	}
	return Result;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
	...

08002334 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	603a      	str	r2, [r7, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	460b      	mov	r3, r1
 8002344:	71bb      	strb	r3, [r7, #6]
 8002346:	4613      	mov	r3, r2
 8002348:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e023      	b.n	8002398 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8002350:	79ba      	ldrb	r2, [r7, #6]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4413      	add	r3, r2
 8002356:	b2dc      	uxtb	r4, r3
 8002358:	797a      	ldrb	r2, [r7, #5]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	4619      	mov	r1, r3
 8002362:	200a      	movs	r0, #10
 8002364:	f7ff ffcd 	bl	8002302 <OLED_Pow>
 8002368:	4602      	mov	r2, r0
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <OLED_ShowNum+0x78>)
 8002372:	fba3 2301 	umull	r2, r3, r3, r1
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	1aca      	subs	r2, r1, r3
 8002382:	b2d3      	uxtb	r3, r2
 8002384:	3330      	adds	r3, #48	; 0x30
 8002386:	b2da      	uxtb	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4621      	mov	r1, r4
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff39 	bl	8002204 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	797b      	ldrb	r3, [r7, #5]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3d7      	bcc.n	8002350 <OLED_ShowNum+0x1c>
	}
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	cccccccd 	.word	0xcccccccd

080023b0 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e00c      	b.n	80023d6 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 80023bc:	2300      	movs	r3, #0
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	e002      	b.n	80023c8 <OLED_Init+0x18>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ce:	d3f8      	bcc.n	80023c2 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023dc:	d3ee      	bcc.n	80023bc <OLED_Init+0xc>
	}
	
	OLED_I2C_Init();			//端口初始化
 80023de:	f7ff fde9 	bl	8001fb4 <OLED_I2C_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80023e2:	20ae      	movs	r0, #174	; 0xae
 80023e4:	f7ff fe9a 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80023e8:	20d5      	movs	r0, #213	; 0xd5
 80023ea:	f7ff fe97 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80023ee:	2080      	movs	r0, #128	; 0x80
 80023f0:	f7ff fe94 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80023f4:	20a8      	movs	r0, #168	; 0xa8
 80023f6:	f7ff fe91 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80023fa:	203f      	movs	r0, #63	; 0x3f
 80023fc:	f7ff fe8e 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8002400:	20d3      	movs	r0, #211	; 0xd3
 8002402:	f7ff fe8b 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fe88 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 800240c:	2040      	movs	r0, #64	; 0x40
 800240e:	f7ff fe85 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 8002412:	20a1      	movs	r0, #161	; 0xa1
 8002414:	f7ff fe82 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8002418:	20c8      	movs	r0, #200	; 0xc8
 800241a:	f7ff fe7f 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 800241e:	20da      	movs	r0, #218	; 0xda
 8002420:	f7ff fe7c 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8002424:	2012      	movs	r0, #18
 8002426:	f7ff fe79 	bl	800211c <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 800242a:	2081      	movs	r0, #129	; 0x81
 800242c:	f7ff fe76 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8002430:	20cf      	movs	r0, #207	; 0xcf
 8002432:	f7ff fe73 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8002436:	20d9      	movs	r0, #217	; 0xd9
 8002438:	f7ff fe70 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800243c:	20f1      	movs	r0, #241	; 0xf1
 800243e:	f7ff fe6d 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8002442:	20db      	movs	r0, #219	; 0xdb
 8002444:	f7ff fe6a 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8002448:	2030      	movs	r0, #48	; 0x30
 800244a:	f7ff fe67 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 800244e:	20a4      	movs	r0, #164	; 0xa4
 8002450:	f7ff fe64 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8002454:	20a6      	movs	r0, #166	; 0xa6
 8002456:	f7ff fe61 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800245a:	208d      	movs	r0, #141	; 0x8d
 800245c:	f7ff fe5e 	bl	800211c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8002460:	2014      	movs	r0, #20
 8002462:	f7ff fe5b 	bl	800211c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8002466:	20af      	movs	r0, #175	; 0xaf
 8002468:	f7ff fe58 	bl	800211c <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 800246c:	f7ff fea7 	bl	80021be <OLED_Clear>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <memset>:
 8002478:	4603      	mov	r3, r0
 800247a:	4402      	add	r2, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <__libc_init_array>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	2600      	movs	r6, #0
 800248c:	4d0c      	ldr	r5, [pc, #48]	; (80024c0 <__libc_init_array+0x38>)
 800248e:	4c0d      	ldr	r4, [pc, #52]	; (80024c4 <__libc_init_array+0x3c>)
 8002490:	1b64      	subs	r4, r4, r5
 8002492:	10a4      	asrs	r4, r4, #2
 8002494:	42a6      	cmp	r6, r4
 8002496:	d109      	bne.n	80024ac <__libc_init_array+0x24>
 8002498:	f000 f81a 	bl	80024d0 <_init>
 800249c:	2600      	movs	r6, #0
 800249e:	4d0a      	ldr	r5, [pc, #40]	; (80024c8 <__libc_init_array+0x40>)
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <__libc_init_array+0x44>)
 80024a2:	1b64      	subs	r4, r4, r5
 80024a4:	10a4      	asrs	r4, r4, #2
 80024a6:	42a6      	cmp	r6, r4
 80024a8:	d105      	bne.n	80024b6 <__libc_init_array+0x2e>
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b0:	4798      	blx	r3
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7ee      	b.n	8002494 <__libc_init_array+0xc>
 80024b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ba:	4798      	blx	r3
 80024bc:	3601      	adds	r6, #1
 80024be:	e7f2      	b.n	80024a6 <__libc_init_array+0x1e>
 80024c0:	08002b20 	.word	0x08002b20
 80024c4:	08002b20 	.word	0x08002b20
 80024c8:	08002b20 	.word	0x08002b20
 80024cc:	08002b24 	.word	0x08002b24

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

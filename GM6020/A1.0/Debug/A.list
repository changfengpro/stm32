
A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004428  08004428  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004430  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000036c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be1b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002358  00000000  00000000  00011e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  000141b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000712  00000000  00000000  00014b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022874  00000000  00000000  0001522a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d38f  00000000  00000000  00037a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6eb  00000000  00000000  00044e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113518  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023f8  00000000  00000000  0011355c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000037  00000000  00000000  00115954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043e8 	.word	0x080043e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080043e8 	.word	0x080043e8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <can_user_init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void can_user_init(CAN_HandleTypeDef* hcan )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	@ 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  can_filter;

  can_filter.FilterBank = 0;                       // filter 0
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ec:	2301      	movs	r3, #1
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  can_filter.FilterIdHigh = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // enable can filter
 8000504:	2301      	movs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
  can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
 8000508:	230e      	movs	r3, #14
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   
  HAL_CAN_ConfigFilter(hcan, &can_filter);        // init can filter
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	4619      	mov	r1, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f000 ffb6 	bl	8001484 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);                          // start can1
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <can_user_init+0x54>)
 800051a:	f001 f893 	bl	8001644 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
 800051e:	2102      	movs	r1, #2
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <can_user_init+0x54>)
 8000522:	f001 fac5 	bl	8001ab0 <HAL_CAN_ActivateNotification>
}
 8000526:	bf00      	nop
 8000528:	3730      	adds	r7, #48	@ 0x30
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000a8 	.word	0x200000a8

08000534 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
//  CAN_RxHeaderTypeDef rx_header;
//  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a37      	ldr	r2, [pc, #220]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d105      	bne.n	8000552 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 8000546:	4b37      	ldr	r3, [pc, #220]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800054a:	2100      	movs	r1, #0
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f001 f98d 	bl	800186c <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= FEEDBACK_ID_BASE)
 8000552:	4b35      	ldr	r3, [pc, #212]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800055a:	d955      	bls.n	8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
   && (rx_header.StdId <  FEEDBACK_ID_BASE + MOTOR_MAX_NUM))                  // judge the can id
 800055c:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000564:	d250      	bcs.n	8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
  {
    can_cnt ++;
 8000566:	4b31      	ldr	r3, [pc, #196]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b2f      	ldr	r3, [pc, #188]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000570:	801a      	strh	r2, [r3, #0]
    uint8_t index = rx_header.StdId - FEEDBACK_ID_BASE;                  // get motor index by can_id
 8000572:	4b2d      	ldr	r3, [pc, #180]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	3b05      	subs	r3, #5
 800057a:	73fb      	strb	r3, [r7, #15]
    motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b21a      	sxth	r2, r3
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000586:	785b      	ldrb	r3, [r3, #1]
 8000588:	b21b      	sxth	r3, r3
 800058a:	4313      	orrs	r3, r2
 800058c:	b21b      	sxth	r3, r3
 800058e:	7bfa      	ldrb	r2, [r7, #15]
 8000590:	b298      	uxth	r0, r3
 8000592:	4927      	ldr	r1, [pc, #156]	@ (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	440b      	add	r3, r1
 800059e:	3304      	adds	r3, #4
 80005a0:	4602      	mov	r2, r0
 80005a2:	801a      	strh	r2, [r3, #0]
    motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b219      	sxth	r1, r3
 80005ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	7bfa      	ldrb	r2, [r7, #15]
 80005b4:	430b      	orrs	r3, r1
 80005b6:	b218      	sxth	r0, r3
 80005b8:	491d      	ldr	r1, [pc, #116]	@ (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3306      	adds	r3, #6
 80005c6:	4602      	mov	r2, r0
 80005c8:	801a      	strh	r2, [r3, #0]
    motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b219      	sxth	r1, r3
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	7bfa      	ldrb	r2, [r7, #15]
 80005da:	430b      	orrs	r3, r1
 80005dc:	b218      	sxth	r0, r3
 80005de:	4914      	ldr	r1, [pc, #80]	@ (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	3308      	adds	r3, #8
 80005ec:	4602      	mov	r2, r0
 80005ee:	801a      	strh	r2, [r3, #0]
    motor_info[index].temp           =   rx_data[6];
 80005f0:	7bfa      	ldrb	r2, [r7, #15]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80005f4:	7998      	ldrb	r0, [r3, #6]
 80005f6:	490e      	ldr	r1, [pc, #56]	@ (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	440b      	add	r3, r1
 8000602:	330a      	adds	r3, #10
 8000604:	4602      	mov	r2, r0
 8000606:	701a      	strb	r2, [r3, #0]
  }
  if (can_cnt == 500)
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000610:	d102      	bne.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
  {
    can_cnt = 0;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
//    LED_GREEN_TOGGLE(); // green led blink indicate can comunication successful
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40006400 	.word	0x40006400
 8000624:	20000080 	.word	0x20000080
 8000628:	20000088 	.word	0x20000088
 800062c:	2000007c 	.word	0x2000007c
 8000630:	20000028 	.word	0x20000028

08000634 <set_motor_voltage>:
  * @param  id_range to select can control id 0x1ff or 0x2ff
  * @param  motor voltage 1,2,3,4 or 5,6,7
  * @retval None
  */
void set_motor_voltage(uint8_t id_range, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08b      	sub	sp, #44	@ 0x2c
 8000638:	af00      	add	r7, sp, #0
 800063a:	4604      	mov	r4, r0
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	461a      	mov	r2, r3
 8000642:	4623      	mov	r3, r4
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	4603      	mov	r3, r0
 8000648:	80bb      	strh	r3, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	807b      	strh	r3, [r7, #2]
 800064e:	4613      	mov	r3, r2
 8000650:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];
    
  tx_header.StdId = (id_range == 0)?(0x1ff):(0x2ff);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <set_motor_voltage+0x2a>
 8000658:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800065c:	e001      	b.n	8000662 <set_motor_voltage+0x2e>
 800065e:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000662:	613b      	str	r3, [r7, #16]
  tx_header.IDE   = CAN_ID_STD;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 8000670:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000674:	121b      	asrs	r3, r3, #8
 8000676:	b21b      	sxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 800067c:	88bb      	ldrh	r3, [r7, #4]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8000682:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000686:	121b      	asrs	r3, r3, #8
 8000688:	b21b      	sxth	r3, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 8000694:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000698:	121b      	asrs	r3, r3, #8
 800069a:	b21b      	sxth	r3, r3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 80006a0:	883b      	ldrh	r3, [r7, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 80006a6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80006aa:	121b      	asrs	r3, r3, #8
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 80006b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0); 
 80006b8:	f107 0208 	add.w	r2, r7, #8
 80006bc:	f107 0110 	add.w	r1, r7, #16
 80006c0:	2301      	movs	r3, #1
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <set_motor_voltage+0x9c>)
 80006c4:	f001 f802 	bl	80016cc <HAL_CAN_AddTxMessage>
}
 80006c8:	bf00      	nop
 80006ca:	372c      	adds	r7, #44	@ 0x2c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	200000a8 	.word	0x200000a8

080006d4 <pid_init>:
              float kp,
              float ki,
              float kd,
              float i_max,
              float out_max)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6178      	str	r0, [r7, #20]
 80006dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80006e0:	edc7 0a03 	vstr	s1, [r7, #12]
 80006e4:	ed87 1a02 	vstr	s2, [r7, #8]
 80006e8:	edc7 1a01 	vstr	s3, [r7, #4]
 80006ec:	ed87 2a00 	vstr	s4, [r7]
  pid->kp      = kp;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	601a      	str	r2, [r3, #0]
  pid->ki      = ki;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	605a      	str	r2, [r3, #4]
  pid->kd      = kd;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	609a      	str	r2, [r3, #8]
  pid->i_max   = i_max;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
  pid->out_max = out_max;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	611a      	str	r2, [r3, #16]
}
 800070e:	bf00      	nop
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <pid_calc>:

float pid_calc(pid_struct_t *pid, float ref, float fdb)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	ed87 0a02 	vstr	s0, [r7, #8]
 8000728:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->ref = ref;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	615a      	str	r2, [r3, #20]
  pid->fdb = fdb;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	619a      	str	r2, [r3, #24]
  pid->err[1] = pid->err[0];
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	621a      	str	r2, [r3, #32]
  pid->err[0] = pid->ref - pid->fdb;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ed93 7a05 	vldr	s14, [r3, #20]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	edd3 7a06 	vldr	s15, [r3, #24]
 800074c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	edc3 7a07 	vstr	s15, [r3, #28]

  pid->p_out  = pid->kp * pid->err[0];
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	ed93 7a00 	vldr	s14, [r3]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  pid->i_out += pid->ki * pid->err[0];
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	edd3 6a01 	vldr	s13, [r3, #4]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	edd3 7a07 	vldr	s15, [r3, #28]
 800077e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  pid->d_out  = pid->kd * (pid->err[0] - pid->err[1]);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	edd3 6a07 	vldr	s13, [r3, #28]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	edd3 7a08 	vldr	s15, [r3, #32]
 800079e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80007b8:	eef1 7a67 	vneg.f32	s15, s15
 80007bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d805      	bhi.n	80007d2 <pid_calc+0xb6>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80007cc:	eef1 7a67 	vneg.f32	s15, s15
 80007d0:	e011      	b.n	80007f6 <pid_calc+0xda>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	edd3 7a03 	vldr	s15, [r3, #12]
 80007de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e6:	db03      	blt.n	80007f0 <pid_calc+0xd4>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80007ee:	e002      	b.n	80007f6 <pid_calc+0xda>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

  pid->output = pid->p_out + pid->i_out + pid->d_out;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	edd3 7a04 	vldr	s15, [r3, #16]
 8000828:	eef1 7a67 	vneg.f32	s15, s15
 800082c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	d805      	bhi.n	8000842 <pid_calc+0x126>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	edd3 7a04 	vldr	s15, [r3, #16]
 800083c:	eef1 7a67 	vneg.f32	s15, s15
 8000840:	e011      	b.n	8000866 <pid_calc+0x14a>
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	edd3 7a04 	vldr	s15, [r3, #16]
 800084e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000856:	db03      	blt.n	8000860 <pid_calc+0x144>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	edd3 7a04 	vldr	s15, [r3, #16]
 800085e:	e002      	b.n	8000866 <pid_calc+0x14a>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  out = pid->output;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000876:	edc7 7a00 	vstr	s15, [r7]
 800087a:	783b      	ldrb	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <pid_calc+0x17c>)
 8000880:	701a      	strb	r2, [r3, #0]
  return pid->output;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200000a4 	.word	0x200000a4

0800089c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <MX_CAN1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008a8:	2209      	movs	r2, #9
 80008aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_CAN1_Init+0x64>)
 80008ee:	f000 fccd 	bl	800128c <HAL_CAN_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 fa72 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000a8 	.word	0x200000a8
 8000904:	40006400 	.word	0x40006400

08000908 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_CAN2_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <MX_CAN2_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_CAN2_Init+0x64>)
 8000914:	2209      	movs	r2, #9
 8000916:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_CAN2_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_CAN2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_CAN2_Init+0x64>)
 8000926:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800092a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_CAN2_Init+0x64>)
 800092e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000932:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_CAN2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_CAN2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_CAN2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_CAN2_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_CAN2_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_CAN2_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_CAN2_Init+0x64>)
 800095a:	f000 fc97 	bl	800128c <HAL_CAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 fa3c 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d0 	.word	0x200000d0
 8000970:	40006800 	.word	0x40006800

08000974 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a52      	ldr	r2, [pc, #328]	@ (8000adc <HAL_CAN_MspInit+0x168>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d145      	bne.n	8000a22 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000996:	4b52      	ldr	r3, [pc, #328]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a50      	ldr	r2, [pc, #320]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 800099e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009a0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d10d      	bne.n	80009c4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	4b46      	ldr	r3, [pc, #280]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	4a45      	ldr	r2, [pc, #276]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d4:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009e0:	2303      	movs	r3, #3
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009f0:	2309      	movs	r3, #9
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	483b      	ldr	r0, [pc, #236]	@ (8000ae8 <HAL_CAN_MspInit+0x174>)
 80009fc:	f001 ff3c 	bl	8002878 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2014      	movs	r0, #20
 8000a06:	f001 fb84 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a0a:	2014      	movs	r0, #20
 8000a0c:	f001 fb9d 	bl	800214a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2015      	movs	r0, #21
 8000a16:	f001 fb7c 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a1a:	2015      	movs	r0, #21
 8000a1c:	f001 fb95 	bl	800214a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000a20:	e058      	b.n	8000ad4 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <HAL_CAN_MspInit+0x178>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d153      	bne.n	8000ad4 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a48:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 8000a50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <HAL_CAN_MspInit+0x16c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10d      	bne.n	8000a76 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_CAN_MspInit+0x170>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8000a92:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4810      	ldr	r0, [pc, #64]	@ (8000af0 <HAL_CAN_MspInit+0x17c>)
 8000ab0:	f001 fee2 	bl	8002878 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2040      	movs	r0, #64	@ 0x40
 8000aba:	f001 fb2a 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000abe:	2040      	movs	r0, #64	@ 0x40
 8000ac0:	f001 fb43 	bl	800214a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2041      	movs	r0, #65	@ 0x41
 8000aca:	f001 fb22 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ace:	2041      	movs	r0, #65	@ 0x41
 8000ad0:	f001 fb3b 	bl	800214a <HAL_NVIC_EnableIRQ>
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40006400 	.word	0x40006400
 8000ae0:	200000f8 	.word	0x200000f8
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40006800 	.word	0x40006800
 8000af0:	40020400 	.word	0x40020400

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_DMA_Init+0x4c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <MX_DMA_Init+0x4c>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <MX_DMA_Init+0x4c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f001 faf9 	bl	8002112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b20:	200c      	movs	r0, #12
 8000b22:	f001 fb12 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200e      	movs	r0, #14
 8000b2c:	f001 faf1 	bl	8002112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b30:	200e      	movs	r0, #14
 8000b32:	f001 fb0a 	bl	800214a <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a28      	ldr	r2, [pc, #160]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_GPIO_Init+0xf8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	213c      	movs	r1, #60	@ 0x3c
 8000bea:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <MX_GPIO_Init+0xfc>)
 8000bec:	f001 fff0 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <MX_GPIO_Init+0x100>)
 8000bf6:	f001 ffeb 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	233c      	movs	r3, #60	@ 0x3c
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <MX_GPIO_Init+0xfc>)
 8000c12:	f001 fe31 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_GPIO_Init+0x100>)
 8000c2e:	f001 fe23 	bl	8002878 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40021c00 	.word	0x40021c00
 8000c44:	40021800 	.word	0x40021800

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fa87 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f855 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f7ff ff75 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5a:	f7ff ff4b 	bl	8000af4 <MX_DMA_Init>
  MX_CAN1_Init();
 8000c5e:	f7ff fe1d 	bl	800089c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000c62:	f7ff fe51 	bl	8000908 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000c66:	f000 f971 	bl	8000f4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
can_user_init(&hcan1);
 8000c6a:	481d      	ldr	r0, [pc, #116]	@ (8000ce0 <main+0x98>)
 8000c6c:	f7ff fc36 	bl	80004dc <can_user_init>
can_user_init(&hcan2);
 8000c70:	481c      	ldr	r0, [pc, #112]	@ (8000ce4 <main+0x9c>)
 8000c72:	f7ff fc33 	bl	80004dc <can_user_init>
pid_init(&motor_pid[2], 40, 3, 0, 15000, 15000);
 8000c76:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8000ce8 <main+0xa0>
 8000c7a:	eddf 1a1b 	vldr	s3, [pc, #108]	@ 8000ce8 <main+0xa0>
 8000c7e:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8000cec <main+0xa4>
 8000c82:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8000c86:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000cf0 <main+0xa8>
 8000c8a:	481a      	ldr	r0, [pc, #104]	@ (8000cf4 <main+0xac>)
 8000c8c:	f7ff fd22 	bl	80006d4 <pid_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motor_info[2].set_voltage = pid_calc(&motor_pid[2],target_speed, motor_info[2].rotor_speed);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0xb0>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0xb4>)
 8000c98:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c9c:	ee07 3a10 	vmov	s14, r3
 8000ca0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ca4:	eef0 0a47 	vmov.f32	s1, s14
 8000ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cac:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <main+0xac>)
 8000cae:	f7ff fd35 	bl	800071c <pid_calc>
 8000cb2:	eef0 7a40 	vmov.f32	s15, s0
 8000cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cba:	ee17 3a90 	vmov	r3, s15
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <main+0xb4>)
 8000cc2:	835a      	strh	r2, [r3, #26]
//	  set_motor_voltage(0, 0, 0, motor_info[2].set_voltage, 0);
	  set_motor_voltage(0, 0, 0, 0, 0);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fcb0 	bl	8000634 <set_motor_voltage>
	  HAL_Delay(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f000 fab5 	bl	8001244 <HAL_Delay>
	  motor_info[2].set_voltage = pid_calc(&motor_pid[2],target_speed, motor_info[2].rotor_speed);
 8000cda:	bf00      	nop
 8000cdc:	e7d8      	b.n	8000c90 <main+0x48>
 8000cde:	bf00      	nop
 8000ce0:	200000a8 	.word	0x200000a8
 8000ce4:	200000d0 	.word	0x200000d0
 8000ce8:	466a6000 	.word	0x466a6000
 8000cec:	00000000 	.word	0x00000000
 8000cf0:	42200000 	.word	0x42200000
 8000cf4:	20000164 	.word	0x20000164
 8000cf8:	20000268 	.word	0x20000268
 8000cfc:	20000028 	.word	0x20000028

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	@ 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fb3e 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <SystemClock_Config+0xd8>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <SystemClock_Config+0xd8>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <SystemClock_Config+0xd8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <SystemClock_Config+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a24      	ldr	r2, [pc, #144]	@ (8000ddc <SystemClock_Config+0xdc>)
 8000d4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <SystemClock_Config+0xdc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000d70:	2306      	movs	r3, #6
 8000d72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d74:	23b4      	movs	r3, #180	@ 0xb4
 8000d76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 ff8d 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f826 	bl	8000de0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d94:	f001 ff36 	bl	8002c04 <HAL_PWREx_EnableOverDrive>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d9e:	f000 f81f 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000db2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f9e7 	bl	8003194 <HAL_RCC_ClockConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000dcc:	f000 f808 	bl	8000de0 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3750      	adds	r7, #80	@ 0x50
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <MemManage_Handler+0x4>

08000e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f000 f9b7 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <DMA1_Stream1_IRQHandler+0x10>)
 8000ea2:	f001 faad 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200002b4 	.word	0x200002b4

08000eb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <DMA1_Stream3_IRQHandler+0x10>)
 8000eb6:	f001 faa3 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000314 	.word	0x20000314

08000ec4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <CAN1_RX0_IRQHandler+0x10>)
 8000eca:	f000 fe17 	bl	8001afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000a8 	.word	0x200000a8

08000ed8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <CAN1_RX1_IRQHandler+0x10>)
 8000ede:	f000 fe0d 	bl	8001afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000a8 	.word	0x200000a8

08000eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <USART3_IRQHandler+0x10>)
 8000ef2:	f002 fb7f 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000026c 	.word	0x2000026c

08000f00 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <CAN2_RX0_IRQHandler+0x10>)
 8000f06:	f000 fdf9 	bl	8001afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000d0 	.word	0x200000d0

08000f14 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <CAN2_RX1_IRQHandler+0x10>)
 8000f1a:	f000 fdef 	bl	8001afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000d0 	.word	0x200000d0

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <MX_USART3_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f84:	f002 fae6 	bl	8003554 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f7ff ff27 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000026c 	.word	0x2000026c
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80010f0 <HAL_UART_MspInit+0x150>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 8091 	bne.w	80010e6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	4a49      	ldr	r2, [pc, #292]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd4:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	4a42      	ldr	r2, [pc, #264]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff0:	4b40      	ldr	r3, [pc, #256]	@ (80010f4 <HAL_UART_MspInit+0x154>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ffc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <HAL_UART_MspInit+0x158>)
 800101a:	f001 fc2d 	bl	8002878 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800101e:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001020:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <HAL_UART_MspInit+0x160>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001024:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001026:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800102a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800103a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001040:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800104c:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001052:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800105e:	4827      	ldr	r0, [pc, #156]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001060:	f001 f88e 	bl	8002180 <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800106a:	f7ff feb9 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <HAL_UART_MspInit+0x164>)
 800107c:	4a22      	ldr	r2, [pc, #136]	@ (8001108 <HAL_UART_MspInit+0x168>)
 800107e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001080:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_UART_MspInit+0x164>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001086:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_UART_MspInit+0x164>)
 800108a:	2240      	movs	r2, #64	@ 0x40
 800108c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_UART_MspInit+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_UART_MspInit+0x164>)
 8001096:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_UART_MspInit+0x164>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010ba:	4812      	ldr	r0, [pc, #72]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010bc:	f001 f860 	bl	8002180 <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80010c6:	f7ff fe8b 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80010d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <HAL_UART_MspInit+0x164>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2027      	movs	r0, #39	@ 0x27
 80010dc:	f001 f819 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010e0:	2027      	movs	r0, #39	@ 0x27
 80010e2:	f001 f832 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	200002b4 	.word	0x200002b4
 8001100:	40026028 	.word	0x40026028
 8001104:	20000314 	.word	0x20000314
 8001108:	40026058 	.word	0x40026058

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001110:	f7ff ff0a 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800113a:	f003 f931 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fd83 	bl	8000c48 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	20000378 	.word	0x20000378

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 ffb7 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe2a 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffcf 	bl	8002166 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 ff97 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000374 	.word	0x20000374

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000374 	.word	0x20000374

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0ed      	b.n	800147a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fb62 	bl	8000974 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c0:	f7ff ffb4 	bl	800122c <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012c6:	e012      	b.n	80012ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c8:	f7ff ffb0 	bl	800122c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d90b      	bls.n	80012ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0c5      	b.n	800147a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0e5      	beq.n	80012c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0202 	bic.w	r2, r2, #2
 800130a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff ff8e 	bl	800122c <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001312:	e012      	b.n	800133a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001314:	f7ff ff8a 	bl	800122c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b0a      	cmp	r3, #10
 8001320:	d90b      	bls.n	800133a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e09f      	b.n	800147a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e5      	bne.n	8001314 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e1b      	ldrb	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e007      	b.n	8001372 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e5b      	ldrb	r3, [r3, #25]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e007      	b.n	800139c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800139a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7e9b      	ldrb	r3, [r3, #26]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d108      	bne.n	80013b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e007      	b.n	80013c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0220 	bic.w	r2, r2, #32
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7edb      	ldrb	r3, [r3, #27]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0210 	bic.w	r2, r2, #16
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e007      	b.n	80013f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0210 	orr.w	r2, r2, #16
 80013ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7f1b      	ldrb	r3, [r3, #28]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d108      	bne.n	800140a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e007      	b.n	800141a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0208 	bic.w	r2, r2, #8
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7f5b      	ldrb	r3, [r3, #29]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e007      	b.n	8001444 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0204 	bic.w	r2, r2, #4
 8001442:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	ea42 0103 	orr.w	r1, r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <HAL_CAN_ConfigFilter+0x26>
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	f040 80be 	bne.w	8001626 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014aa:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <HAL_CAN_ConfigFilter+0x1bc>)
 80014ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2201      	movs	r2, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d123      	bne.n	8001554 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800152e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3248      	adds	r2, #72	@ 0x48
 8001534:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001548:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	3348      	adds	r3, #72	@ 0x48
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d122      	bne.n	80015a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3248      	adds	r2, #72	@ 0x48
 8001582:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001598:	6979      	ldr	r1, [r7, #20]
 800159a:	3348      	adds	r3, #72	@ 0x48
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	401a      	ands	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015bc:	e007      	b.n	80015ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015e8:	e007      	b.n	80015fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001618:	f023 0201 	bic.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e006      	b.n	8001634 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40006400 	.word	0x40006400

08001644 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d12e      	bne.n	80016b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fddc 	bl	800122c <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff fdd8 	bl	800122c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e012      	b.n	80016c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d003      	beq.n	80016f8 <HAL_CAN_AddTxMessage+0x2c>
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	f040 80ad 	bne.w	8001852 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8095 	beq.w	8001842 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0e1b      	lsrs	r3, r3, #24
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	6809      	ldr	r1, [r1, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3318      	adds	r3, #24
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	440b      	add	r3, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00f      	b.n	8001770 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800175a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001764:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3318      	adds	r3, #24
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	3304      	adds	r3, #4
 8001782:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	7d1b      	ldrb	r3, [r3, #20]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d111      	bne.n	80017b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3318      	adds	r3, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6811      	ldr	r1, [r2, #0]
 80017a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3318      	adds	r3, #24
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3307      	adds	r3, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	061a      	lsls	r2, r3, #24
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3306      	adds	r3, #6
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3305      	adds	r3, #5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4313      	orrs	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	3204      	adds	r2, #4
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	4610      	mov	r0, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	6811      	ldr	r1, [r2, #0]
 80017d8:	ea43 0200 	orr.w	r2, r3, r0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3303      	adds	r3, #3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	061a      	lsls	r2, r3, #24
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	4313      	orrs	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	4610      	mov	r0, r2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	6811      	ldr	r1, [r2, #0]
 800180e:	ea43 0200 	orr.w	r2, r3, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800181c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3318      	adds	r3, #24
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3318      	adds	r3, #24
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	440b      	add	r3, r1
 800183c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e00e      	b.n	8001860 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e006      	b.n	8001860 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3724      	adds	r7, #36	@ 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d003      	beq.n	8001890 <HAL_CAN_GetRxMessage+0x24>
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b02      	cmp	r3, #2
 800188c:	f040 8103 	bne.w	8001a96 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0f7      	b.n	8001aa4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0e8      	b.n	8001aa4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	331b      	adds	r3, #27
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	4413      	add	r3, r2
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0204 	and.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10c      	bne.n	800190a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	331b      	adds	r3, #27
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0d5b      	lsrs	r3, r3, #21
 8001900:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e00b      	b.n	8001922 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	331b      	adds	r3, #27
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	331b      	adds	r3, #27
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0202 	and.w	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	331b      	adds	r3, #27
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2208      	movs	r2, #8
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	e00b      	b.n	8001970 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	331b      	adds	r3, #27
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	3304      	adds	r3, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 020f 	and.w	r2, r3, #15
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	331b      	adds	r3, #27
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b2da      	uxtb	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0a1a      	lsrs	r2, r3, #8
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0c1a      	lsrs	r2, r3, #16
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3302      	adds	r3, #2
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0e1a      	lsrs	r2, r3, #24
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3303      	adds	r3, #3
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3304      	adds	r3, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0a1a      	lsrs	r2, r3, #8
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3305      	adds	r3, #5
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0c1a      	lsrs	r2, r3, #16
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3306      	adds	r3, #6
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0e1a      	lsrs	r2, r3, #24
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	3307      	adds	r3, #7
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d108      	bne.n	8001a82 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	e007      	b.n	8001a92 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0220 	orr.w	r2, r2, #32
 8001a90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e006      	b.n	8001aa4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <HAL_CAN_ActivateNotification+0x1e>
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d109      	bne.n	8001ae2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e006      	b.n	8001af0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d07c      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f983 	bl	8001e6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001b64:	e016      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b78:	e00c      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8c:	e002      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f989 	bl	8001ea6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d024      	beq.n	8001be8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f963 	bl	8001e7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001bb8:	e016      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e00c      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	e002      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f969 	bl	8001eba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f943 	bl	8001e92 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c0c:	e016      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c20:	e00c      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c34:	e002      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f949 	bl	8001ece <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f930 	bl	8001ee2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7fe fc4a 	bl	8000534 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f912 	bl	8001f0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8f9 	bl	8001ef6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8fc 	bl	8001f1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8f5 	bl	8001f32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d07b      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d072      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d043      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03e      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dca:	2b60      	cmp	r3, #96	@ 0x60
 8001dcc:	d02b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x32a>
 8001dce:	2b60      	cmp	r3, #96	@ 0x60
 8001dd0:	d82e      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dd2:	2b50      	cmp	r3, #80	@ 0x50
 8001dd4:	d022      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x320>
 8001dd6:	2b50      	cmp	r3, #80	@ 0x50
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dda:	2b40      	cmp	r3, #64	@ 0x40
 8001ddc:	d019      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x316>
 8001dde:	2b40      	cmp	r3, #64	@ 0x40
 8001de0:	d826      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001de2:	2b30      	cmp	r3, #48	@ 0x30
 8001de4:	d010      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x30c>
 8001de6:	2b30      	cmp	r3, #48	@ 0x30
 8001de8:	d822      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x2f8>
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d005      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001df2:	e01d      	b.n	8001e30 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfc:	e019      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e06:	e014      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e10:	e00f      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e1a:	e00a      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e24:	e005      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e2e:	e000      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2204      	movs	r2, #4
 8001e48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f872 	bl	8001f46 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	@ (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	@ (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	@ (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	@ 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	@ 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff29 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff3e 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff31 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffa2 	bl	80020b8 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff f84e 	bl	800122c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e099      	b.n	80022d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021bc:	e00f      	b.n	80021de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021be:	f7ff f835 	bl	800122c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d908      	bls.n	80021de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e078      	b.n	80022d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e8      	bne.n	80021be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4b38      	ldr	r3, [pc, #224]	@ (80022d8 <HAL_DMA_Init+0x158>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4313      	orrs	r3, r2
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	2b04      	cmp	r3, #4
 8002270:	d117      	bne.n	80022a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fa7b 	bl	8002780 <DMA_CheckFifoParam>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800229e:	2301      	movs	r3, #1
 80022a0:	e016      	b.n	80022d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa32 	bl	8002714 <DMA_CalcBaseAndBitshift>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	223f      	movs	r2, #63	@ 0x3f
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	f010803f 	.word	0xf010803f

080022dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022ea:	f7fe ff9f 	bl	800122c <HAL_GetTick>
 80022ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d008      	beq.n	800230e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2280      	movs	r2, #128	@ 0x80
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e052      	b.n	80023b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800232c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_Abort+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	e013      	b.n	8002388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002360:	f7fe ff64 	bl	800122c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b05      	cmp	r3, #5
 800236c:	d90c      	bls.n	8002388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2203      	movs	r2, #3
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e015      	b.n	80023b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e4      	bne.n	8002360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	223f      	movs	r2, #63	@ 0x3f
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d004      	beq.n	80023da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	@ 0x80
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00c      	b.n	80023f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2205      	movs	r2, #5
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800240c:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <HAL_DMA_IRQHandler+0x248>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a8e      	ldr	r2, [pc, #568]	@ (800264c <HAL_DMA_IRQHandler+0x24c>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2208      	movs	r2, #8
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	2208      	movs	r2, #8
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	2201      	movs	r2, #1
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	2204      	movs	r2, #4
 80024a8:	409a      	lsls	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	2204      	movs	r2, #4
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	2210      	movs	r2, #16
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d043      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03c      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2210      	movs	r2, #16
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d018      	beq.n	8002542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d024      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e01f      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e016      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	2220      	movs	r2, #32
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 808f 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8087 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002596:	2220      	movs	r2, #32
 8002598:	409a      	lsls	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d136      	bne.n	8002618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0216 	bic.w	r2, r2, #22
 80025b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_DMA_IRQHandler+0x1da>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	223f      	movs	r2, #63	@ 0x3f
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07e      	beq.n	800270c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
        }
        return;
 8002616:	e079      	b.n	800270c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	2b00      	cmp	r3, #0
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
 8002644:	e02c      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000
 800264c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e01e      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0210 	bic.w	r2, r2, #16
 800267e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2205      	movs	r2, #5
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d307      	bcc.n	80026e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f2      	bne.n	80026cc <HAL_DMA_IRQHandler+0x2cc>
 80026e6:	e000      	b.n	80026ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e000      	b.n	800270e <HAL_DMA_IRQHandler+0x30e>
        return;
 800270c:	bf00      	nop
    }
  }
}
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3b10      	subs	r3, #16
 8002724:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <DMA_CalcBaseAndBitshift+0x64>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800272e:	4a13      	ldr	r2, [pc, #76]	@ (800277c <DMA_CalcBaseAndBitshift+0x68>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d909      	bls.n	8002756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	@ 0x58
 8002754:	e007      	b.n	8002766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	aaaaaaab 	.word	0xaaaaaaab
 800277c:	08004418 	.word	0x08004418

08002780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d856      	bhi.n	800284e <DMA_CheckFifoParam+0xce>
 80027a0:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <DMA_CheckFifoParam+0x28>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027cb 	.word	0x080027cb
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	0800284f 	.word	0x0800284f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d046      	beq.n	8002852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e043      	b.n	8002852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d2:	d140      	bne.n	8002856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e03d      	b.n	8002856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e2:	d121      	bne.n	8002828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d837      	bhi.n	800285a <DMA_CheckFifoParam+0xda>
 80027ea:	a201      	add	r2, pc, #4	@ (adr r2, 80027f0 <DMA_CheckFifoParam+0x70>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002807 	.word	0x08002807
 80027f8:	08002801 	.word	0x08002801
 80027fc:	08002819 	.word	0x08002819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e030      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d025      	beq.n	800285e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e022      	b.n	800285e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002826:	e01c      	b.n	8002862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d903      	bls.n	8002836 <DMA_CheckFifoParam+0xb6>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d003      	beq.n	800283c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002834:	e018      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      break;
 800283a:	e015      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e00b      	b.n	8002866 <DMA_CheckFifoParam+0xe6>
      break;
 800284e:	bf00      	nop
 8002850:	e00a      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e008      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e006      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e004      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;   
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
    }
  } 
  
  return status; 
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e177      	b.n	8002b84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8166 	bne.w	8002b7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80c0 	beq.w	8002b7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b66      	ldr	r3, [pc, #408]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0e:	4b63      	ldr	r3, [pc, #396]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ba0 <HAL_GPIO_Init+0x328>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a58      	ldr	r2, [pc, #352]	@ (8002ba4 <HAL_GPIO_Init+0x32c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d037      	beq.n	8002ab6 <HAL_GPIO_Init+0x23e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a57      	ldr	r2, [pc, #348]	@ (8002ba8 <HAL_GPIO_Init+0x330>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d031      	beq.n	8002ab2 <HAL_GPIO_Init+0x23a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_GPIO_Init+0x334>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02b      	beq.n	8002aae <HAL_GPIO_Init+0x236>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a55      	ldr	r2, [pc, #340]	@ (8002bb0 <HAL_GPIO_Init+0x338>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d025      	beq.n	8002aaa <HAL_GPIO_Init+0x232>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a54      	ldr	r2, [pc, #336]	@ (8002bb4 <HAL_GPIO_Init+0x33c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <HAL_GPIO_Init+0x22e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a53      	ldr	r2, [pc, #332]	@ (8002bb8 <HAL_GPIO_Init+0x340>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_GPIO_Init+0x22a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	@ (8002bbc <HAL_GPIO_Init+0x344>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a51      	ldr	r2, [pc, #324]	@ (8002bc0 <HAL_GPIO_Init+0x348>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a50      	ldr	r2, [pc, #320]	@ (8002bc4 <HAL_GPIO_Init+0x34c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x21e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc8 <HAL_GPIO_Init+0x350>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a8e:	2309      	movs	r3, #9
 8002a90:	e012      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a92:	230a      	movs	r3, #10
 8002a94:	e010      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a96:	2308      	movs	r3, #8
 8002a98:	e00e      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e00c      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	e00a      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	@ (8002ba0 <HAL_GPIO_Init+0x328>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b32      	ldr	r3, [pc, #200]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a29      	ldr	r2, [pc, #164]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2a:	4b28      	ldr	r3, [pc, #160]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f ae84 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3724      	adds	r7, #36	@ 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800
 8002bc0:	40021c00 	.word	0x40021c00
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40022400 	.word	0x40022400
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c30:	f7fe fafc 	bl	800122c <HAL_GetTick>
 8002c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c36:	e009      	b.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c38:	f7fe faf8 	bl	800122c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c46:	d901      	bls.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e01f      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c58:	d1ee      	bne.n	8002c38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fae4 	bl	800122c <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fe fae0 	bl	800122c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e007      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	420e0040 	.word	0x420e0040
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	420e0044 	.word	0x420e0044

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e267      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b82      	ldr	r3, [pc, #520]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e242      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b70      	ldr	r3, [pc, #448]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6f      	ldr	r2, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6c      	ldr	r2, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b69      	ldr	r3, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a65      	ldr	r2, [pc, #404]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fa66 	bl	800122c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fa62 	bl	800122c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e207      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fa52 	bl	800122c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fa4e 	bl	800122c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f3      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c7      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fa07 	bl	800122c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fa03 	bl	800122c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a8      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f9e6 	bl	800122c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe f9e2 	bl	800122c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e187      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f9c6 	bl	800122c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe f9c2 	bl	800122c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e167      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe f9af 	bl	800122c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f9ab 	bl	800122c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e150      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b81      	ldr	r3, [pc, #516]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b77      	ldr	r3, [pc, #476]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b74      	ldr	r3, [pc, #464]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a73      	ldr	r2, [pc, #460]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe f96b 	bl	800122c <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe f967 	bl	800122c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e10c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2ea>
 8002f80:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a63      	ldr	r2, [pc, #396]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x30c>
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002fb0:	4b58      	ldr	r3, [pc, #352]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b55      	ldr	r3, [pc, #340]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a54      	ldr	r2, [pc, #336]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f92c 	bl	800122c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f928 	bl	800122c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0cb      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe f916 	bl	800122c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe f912 	bl	800122c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b5      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a1 	beq.w	8003184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d05c      	beq.n	8003108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d141      	bne.n	80030da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe f8e6 	bl	800122c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f8e2 	bl	800122c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e087      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	491b      	ldr	r1, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe f8bb 	bl	800122c <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe f8b7 	bl	800122c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e05c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x416>
 80030d8:	e054      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe f8a4 	bl	800122c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe f8a0 	bl	800122c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e045      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
 800311c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x4ec>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d028      	beq.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d121      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fd ffd2 	bl	800122c <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd ffce 	bl	800122c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd ff32 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	08004400 	.word	0x08004400
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b090      	sub	sp, #64	@ 0x40
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
 800336c:	2300      	movs	r3, #0
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003370:	2300      	movs	r3, #0
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80a1 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e09b      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003398:	e09b      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800339c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800339e:	e098      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c8:	2100      	movs	r1, #0
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033cc:	fb03 f201 	mul.w	r2, r3, r1
 80033d0:	2300      	movs	r3, #0
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033da:	fba0 1202 	umull	r1, r2, r0, r2
 80033de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e0:	460a      	mov	r2, r1
 80033e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e6:	4413      	add	r3, r2
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	2200      	movs	r2, #0
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	61fa      	str	r2, [r7, #28]
 80033f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033fa:	f7fc fef7 	bl	80001ec <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4613      	mov	r3, r2
 8003404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003406:	e053      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	617a      	str	r2, [r7, #20]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800341a:	f04f 0b00 	mov.w	fp, #0
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	ebb2 080a 	subs.w	r8, r2, sl
 800343a:	eb63 090b 	sbc.w	r9, r3, fp
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800344a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800344e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003452:	ebb2 0408 	subs.w	r4, r2, r8
 8003456:	eb63 0509 	sbc.w	r5, r3, r9
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	00eb      	lsls	r3, r5, #3
 8003464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	4614      	mov	r4, r2
 800346c:	461d      	mov	r5, r3
 800346e:	eb14 030a 	adds.w	r3, r4, sl
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	eb45 030b 	adc.w	r3, r5, fp
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003486:	4629      	mov	r1, r5
 8003488:	028b      	lsls	r3, r1, #10
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003490:	4621      	mov	r1, r4
 8003492:	028a      	lsls	r2, r1, #10
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	2200      	movs	r2, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	60fa      	str	r2, [r7, #12]
 80034a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a4:	f7fc fea2 	bl	80001ec <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3740      	adds	r7, #64	@ 0x40
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	00b71b00 	.word	0x00b71b00

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	08004410 	.word	0x08004410

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffdc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0b5b      	lsrs	r3, r3, #13
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	08004410 	.word	0x08004410

08003554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e042      	b.n	80035ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fd10 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fc85 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	@ 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
 8003646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb69 	bl	8003d2a <UART_Receive_IT>
      return;
 8003658:	e25b      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800365a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80de 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003674:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80d1 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
 80036ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
 80036d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0208 	orr.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 81f2 	beq.w	8003b08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 faf4 	bl	8003d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_UART_IRQHandler+0x17a>
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04f      	beq.n	800380e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9fc 	bl	8003b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d141      	bne.n	8003806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003798:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800379c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1d9      	bne.n	8003782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037da:	4a7e      	ldr	r2, [pc, #504]	@ (80039d4 <HAL_UART_IRQHandler+0x3e0>)
 80037dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fdea 	bl	80023bc <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00e      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f99e 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00a      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f99a 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e006      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f996 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800381a:	e175      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e173      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 814f 	bne.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8148 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8141 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	f040 80b6 	bne.w	80039d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8145 	beq.w	8003b0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388a:	429a      	cmp	r2, r3
 800388c:	f080 813e 	bcs.w	8003b0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003896:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a2:	f000 8088 	beq.w	80039b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1d9      	bne.n	80038a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003916:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800391a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800391e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e1      	bne.n	80038f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3314      	adds	r3, #20
 8003934:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800393e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003958:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003986:	f023 0310 	bic.w	r3, r3, #16
 800398a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003998:	65ba      	str	r2, [r7, #88]	@ 0x58
 800399a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800399e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e3      	bne.n	8003974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fc93 	bl	80022dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8c1 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d2:	e09b      	b.n	8003b0c <HAL_UART_IRQHandler+0x518>
 80039d4:	08003c33 	.word	0x08003c33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 808e 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8089 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e3      	bne.n	80039fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	623b      	str	r3, [r7, #32]
   return(result);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	617b      	str	r3, [r7, #20]
   return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f847 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ac6:	e023      	b.n	8003b10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8ba 	bl	8003c5a <UART_Transmit_IT>
    return;
 8003ae6:	e014      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8fa 	bl	8003cfa <UART_EndTransmit_IT>
    return;
 8003b06:	e004      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b10:	bf00      	nop
  }
}
 8003b12:	37e8      	adds	r7, #232	@ 0xe8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b095      	sub	sp, #84	@ 0x54
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b94:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d119      	bne.n	8003c18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f023 0310 	bic.w	r3, r3, #16
 8003bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c04:	61ba      	str	r2, [r7, #24]
 8003c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6979      	ldr	r1, [r7, #20]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	613b      	str	r3, [r7, #16]
   return(result);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c26:	bf00      	nop
 8003c28:	3754      	adds	r7, #84	@ 0x54
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff ff77 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b21      	cmp	r3, #33	@ 0x21
 8003c6c:	d13e      	bne.n	8003cec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c76:	d114      	bne.n	8003ca2 <UART_Transmit_IT+0x48>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d110      	bne.n	8003ca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]
 8003ca0:	e008      	b.n	8003cb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6211      	str	r1, [r2, #32]
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10f      	bne.n	8003ce8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ce6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fefc 	bl	8003b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08c      	sub	sp, #48	@ 0x30
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b22      	cmp	r3, #34	@ 0x22
 8003d3c:	f040 80ae 	bne.w	8003e9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d117      	bne.n	8003d7a <UART_Receive_IT+0x50>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d113      	bne.n	8003d7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d78:	e026      	b.n	8003dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	d007      	beq.n	8003d9e <UART_Receive_IT+0x74>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <UART_Receive_IT+0x82>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e008      	b.n	8003dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d15d      	bne.n	8003e98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0220 	bic.w	r2, r2, #32
 8003dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d135      	bne.n	8003e8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	613b      	str	r3, [r7, #16]
   return(result);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	623a      	str	r2, [r7, #32]
 8003e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69f9      	ldr	r1, [r7, #28]
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d10a      	bne.n	8003e80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff fe64 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
 8003e8c:	e002      	b.n	8003e94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fe4c 	bl	8003b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e002      	b.n	8003e9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3730      	adds	r7, #48	@ 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b0c0      	sub	sp, #256	@ 0x100
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	ea40 0301 	orr.w	r3, r0, r1
 8003ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f00:	f021 010c 	bic.w	r1, r1, #12
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	ea40 0301 	orr.w	r3, r0, r1
 8003f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8f      	ldr	r3, [pc, #572]	@ (8004174 <UART_SetConfig+0x2cc>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d005      	beq.n	8003f48 <UART_SetConfig+0xa0>
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8d      	ldr	r3, [pc, #564]	@ (8004178 <UART_SetConfig+0x2d0>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d104      	bne.n	8003f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7ff faf0 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8003f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f50:	e003      	b.n	8003f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7ff fad7 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8003f56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f64:	f040 810c 	bne.w	8004180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f82:	415b      	adcs	r3, r3
 8003f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	eb12 0801 	adds.w	r8, r2, r1
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb43 0901 	adc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	462b      	mov	r3, r5
 8003fba:	eb49 0303 	adc.w	r3, r9, r3
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	18db      	adds	r3, r3, r3
 8003fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fdc:	4613      	mov	r3, r2
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fec:	f7fc f8fe 	bl	80001ec <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b61      	ldr	r3, [pc, #388]	@ (800417c <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004008:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800400c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004018:	415b      	adcs	r3, r3
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004020:	4641      	mov	r1, r8
 8004022:	eb12 0a01 	adds.w	sl, r2, r1
 8004026:	4649      	mov	r1, r9
 8004028:	eb43 0b01 	adc.w	fp, r3, r1
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	4692      	mov	sl, r2
 8004042:	469b      	mov	fp, r3
 8004044:	4643      	mov	r3, r8
 8004046:	eb1a 0303 	adds.w	r3, sl, r3
 800404a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800404e:	464b      	mov	r3, r9
 8004050:	eb4b 0303 	adc.w	r3, fp, r3
 8004054:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004064:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800406c:	460b      	mov	r3, r1
 800406e:	18db      	adds	r3, r3, r3
 8004070:	643b      	str	r3, [r7, #64]	@ 0x40
 8004072:	4613      	mov	r3, r2
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	647b      	str	r3, [r7, #68]	@ 0x44
 800407a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800407e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004082:	f7fc f8b3 	bl	80001ec <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4611      	mov	r1, r2
 800408c:	4b3b      	ldr	r3, [pc, #236]	@ (800417c <UART_SetConfig+0x2d4>)
 800408e:	fba3 2301 	umull	r2, r3, r3, r1
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	@ 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040a2:	4b36      	ldr	r3, [pc, #216]	@ (800417c <UART_SetConfig+0x2d4>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040b0:	441c      	add	r4, r3
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040cc:	415b      	adcs	r3, r3
 80040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004120:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800413a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800413e:	f7fc f855 	bl	80001ec <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <UART_SetConfig+0x2d4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	@ 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3332      	adds	r3, #50	@ 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	@ (800417c <UART_SetConfig+0x2d4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 0207 	and.w	r2, r3, #7
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004170:	e106      	b.n	8004380 <UART_SetConfig+0x4d8>
 8004172:	bf00      	nop
 8004174:	40011000 	.word	0x40011000
 8004178:	40011400 	.word	0x40011400
 800417c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800418a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800418e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004192:	4642      	mov	r2, r8
 8004194:	464b      	mov	r3, r9
 8004196:	1891      	adds	r1, r2, r2
 8004198:	6239      	str	r1, [r7, #32]
 800419a:	415b      	adcs	r3, r3
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
 800419e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a2:	4641      	mov	r1, r8
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb43 0501 	adc.w	r5, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	00eb      	lsls	r3, r5, #3
 80041b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ba:	00e2      	lsls	r2, r4, #3
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	18e3      	adds	r3, r4, r3
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041c8:	464b      	mov	r3, r9
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ee:	4629      	mov	r1, r5
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4621      	mov	r1, r4
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004200:	f7fb fff4 	bl	80001ec <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b60      	ldr	r3, [pc, #384]	@ (800438c <UART_SetConfig+0x4e4>)
 800420a:	fba3 2302 	umull	r2, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	011c      	lsls	r4, r3, #4
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800421c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	61b9      	str	r1, [r7, #24]
 800422c:	415b      	adcs	r3, r3
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	4641      	mov	r1, r8
 8004236:	1851      	adds	r1, r2, r1
 8004238:	6139      	str	r1, [r7, #16]
 800423a:	4649      	mov	r1, r9
 800423c:	414b      	adcs	r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	00cb      	lsls	r3, r1, #3
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004256:	4651      	mov	r1, sl
 8004258:	00ca      	lsls	r2, r1, #3
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	4603      	mov	r3, r0
 8004260:	4642      	mov	r2, r8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004268:	464b      	mov	r3, r9
 800426a:	460a      	mov	r2, r1
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800427e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800428c:	4649      	mov	r1, r9
 800428e:	008b      	lsls	r3, r1, #2
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004296:	4641      	mov	r1, r8
 8004298:	008a      	lsls	r2, r1, #2
 800429a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800429e:	f7fb ffa5 	bl	80001ec <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	4b38      	ldr	r3, [pc, #224]	@ (800438c <UART_SetConfig+0x4e4>)
 80042aa:	fba3 2301 	umull	r2, r3, r3, r1
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2264      	movs	r2, #100	@ 0x64
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	1acb      	subs	r3, r1, r3
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	3332      	adds	r3, #50	@ 0x32
 80042bc:	4a33      	ldr	r2, [pc, #204]	@ (800438c <UART_SetConfig+0x4e4>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c8:	441c      	add	r4, r3
 80042ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ce:	2200      	movs	r2, #0
 80042d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80042d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	415b      	adcs	r3, r3
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	6039      	str	r1, [r7, #0]
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431a:	464b      	mov	r3, r9
 800431c:	460a      	mov	r2, r1
 800431e:	eb42 0303 	adc.w	r3, r2, r3
 8004322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	663b      	str	r3, [r7, #96]	@ 0x60
 800432e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800433c:	4649      	mov	r1, r9
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	4641      	mov	r1, r8
 8004342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004346:	4641      	mov	r1, r8
 8004348:	008a      	lsls	r2, r1, #2
 800434a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800434e:	f7fb ff4d 	bl	80001ec <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <UART_SetConfig+0x4e4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	@ 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	3332      	adds	r3, #50	@ 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <UART_SetConfig+0x4e4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <memset>:
 8004390:	4402      	add	r2, r0
 8004392:	4603      	mov	r3, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4d0d      	ldr	r5, [pc, #52]	@ (80043d8 <__libc_init_array+0x38>)
 80043a4:	4c0d      	ldr	r4, [pc, #52]	@ (80043dc <__libc_init_array+0x3c>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	2600      	movs	r6, #0
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	4d0b      	ldr	r5, [pc, #44]	@ (80043e0 <__libc_init_array+0x40>)
 80043b2:	4c0c      	ldr	r4, [pc, #48]	@ (80043e4 <__libc_init_array+0x44>)
 80043b4:	f000 f818 	bl	80043e8 <_init>
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	2600      	movs	r6, #0
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08004428 	.word	0x08004428
 80043dc:	08004428 	.word	0x08004428
 80043e0:	08004428 	.word	0x08004428
 80043e4:	0800442c 	.word	0x0800442c

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

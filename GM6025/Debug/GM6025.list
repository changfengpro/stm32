
GM6025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c70  08005c70  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c78  08005c78  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          000004b8  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011362  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4d  00000000  00000000  000183a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0001aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b66  00000000  00000000  0001bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002263a  00000000  00000000  0001c91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f21  00000000  00000000  0003ef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce403  00000000  00000000  00052e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012127c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d70  00000000  00000000  001212c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  00125030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c34 	.word	0x08005c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005c34 	.word	0x08005c34

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <low_pass_filter_init>:
  * @param[in]    	滤波系数
  * @param[in]    	运算时间间隔
  * @retval         返回空
  */
void low_pass_filter_init(LOW_PASS_FILTER_Typedef *filter_type, float filter_factor, float frame_period)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d00:	edc7 0a01 	vstr	s1, [r7, #4]
	filter_type->filter_factor = filter_factor;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	605a      	str	r2, [r3, #4]
	filter_type->frame_period = frame_period;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <low_pass_filter>:
  * @param[in]      一阶低通滤波结构体
  * @param[in]    	输入
  * @retval         返回空
  */
float low_pass_filter(LOW_PASS_FILTER_Typedef *filter_type, float input)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	ed87 0a00 	vstr	s0, [r7]
	filter_type->output =
			input * filter_type->frame_period / (filter_type->filter_factor + filter_type->frame_period)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d2e:	edd7 7a00 	vldr	s15, [r7]
 8000d32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		+	filter_type->output * filter_type->filter_factor / (filter_type->filter_factor + filter_type->frame_period);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	edd3 6a00 	vldr	s13, [r3]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d56:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter_type->output =
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	edc3 7a00 	vstr	s15, [r3]
	return filter_type->output;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	ee07 3a90 	vmov	s15, r3

}
 8000d80:	eeb0 0a67 	vmov.f32	s0, s15
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <Average_Filter>:
  * @param[in]		当前数据
  * @param[in]		采样个数
  * @retval         平均值
  */
float Average_Filter(float *in_data, float data, uint8_t data_length)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	71fb      	strb	r3, [r7, #7]

	float sum = 0;
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < data_length - 1; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	74fb      	strb	r3, [r7, #19]
 8000da8:	e019      	b.n	8000dde <Average_Filter+0x50>
	{
		in_data[i] = in_data[i+1];
 8000daa:	7cfb      	ldrb	r3, [r7, #19]
 8000dac:	3301      	adds	r3, #1
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	441a      	add	r2, r3
 8000db4:	7cfb      	ldrb	r3, [r7, #19]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	440b      	add	r3, r1
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	601a      	str	r2, [r3, #0]
		sum = sum + in_data[i];
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd4:	edc7 7a05 	vstr	s15, [r7, #20]
	for (uint8_t i = 0; i < data_length - 1; i++)
 8000dd8:	7cfb      	ldrb	r3, [r7, #19]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	74fb      	strb	r3, [r7, #19]
 8000dde:	7cfa      	ldrb	r2, [r7, #19]
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbe0      	blt.n	8000daa <Average_Filter+0x1c>
	}

	in_data[data_length - 1] = data;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000dee:	3b01      	subs	r3, #1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	601a      	str	r2, [r3, #0]
	sum = sum + in_data[data_length - 1];
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e00:	3b01      	subs	r3, #1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	edc7 7a05 	vstr	s15, [r7, #20]

	return (sum / data_length);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e22:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e2a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <Angle_Calculate>:
  * @param[in]      电机角度
  * @param[in]      上次电机角度
  * @retval         相对角度增量[-180, 180]
  */
float Angle_Calculate(float absolute_angle, float last_angle)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e46:	edc7 0a00 	vstr	s1, [r7]
	float res1, res2, err;

	err = absolute_angle - last_angle;
 8000e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e4e:	edd7 7a00 	vldr	s15, [r7]
 8000e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e56:	edc7 7a03 	vstr	s15, [r7, #12]
	if(err < 0)
 8000e5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	d50a      	bpl.n	8000e7e <Angle_Calculate+0x42>
	{
		res1 = err;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	617b      	str	r3, [r7, #20]
		res2 = err + PI;
 8000e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e70:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000ec4 <Angle_Calculate+0x88>
 8000e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e78:	edc7 7a04 	vstr	s15, [r7, #16]
 8000e7c:	e009      	b.n	8000e92 <Angle_Calculate+0x56>
	}
	else
	{
		res1 = err;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	617b      	str	r3, [r7, #20]
		res2 = err - PI;
 8000e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e86:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000ec4 <Angle_Calculate+0x88>
 8000e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e8e:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if(fabs(res1) < fabs(res2))
 8000e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e96:	eeb0 7ae7 	vabs.f32	s14, s15
 8000e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d501      	bpl.n	8000eb0 <Angle_Calculate+0x74>
	{
		return res1;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	e000      	b.n	8000eb2 <Angle_Calculate+0x76>
	}
	else
	{
		return res2;
 8000eb0:	693b      	ldr	r3, [r7, #16]
	}
}
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	43b40000 	.word	0x43b40000

08000ec8 <limit_control>:
  * @param	需要限幅的变量
  * @param	限幅值
  * @retval 限幅值之内的值
  */
float limit_control(float input, float limit)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ed2:	edc7 0a00 	vstr	s1, [r7]
	float limit_output = input;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]
	if(input > limit) limit_output = limit;
 8000eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ede:	edd7 7a00 	vldr	s15, [r7]
 8000ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	dd02      	ble.n	8000ef2 <limit_control+0x2a>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e010      	b.n	8000f14 <limit_control+0x4c>
	else if(input < (-1 * limit)) limit_output = (-1 * limit);
 8000ef2:	edd7 7a00 	vldr	s15, [r7]
 8000ef6:	eef1 7a67 	vneg.f32	s15, s15
 8000efa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f06:	d505      	bpl.n	8000f14 <limit_control+0x4c>
 8000f08:	edd7 7a00 	vldr	s15, [r7]
 8000f0c:	eef1 7a67 	vneg.f32	s15, s15
 8000f10:	edc7 7a03 	vstr	s15, [r7, #12]

	return limit_output;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	ee07 3a90 	vmov	s15, r3
}
 8000f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <can_user_init>:
Motor_6025_Typedef motor_array[6] = { 0 }; //前四位为底盘，后两位为云台



void can_user_init(CAN_HandleTypeDef* hcan )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	@ 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  can_filter;

  can_filter.FilterBank = 0;                       // filter 0
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  can_filter.FilterIdHigh = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // enable can filter
 8000f50:	2301      	movs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
 8000f54:	230e      	movs	r3, #14
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  HAL_CAN_ConfigFilter(hcan, &can_filter);        // init can filter
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f001 f960 	bl	8002224 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);                          // start can1
 8000f64:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <can_user_init+0x58>)
 8000f66:	f001 fa3d 	bl	80023e4 <HAL_CAN_Start>
  HAL_CAN_Start(hcan);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 fa3a 	bl	80023e4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
 8000f70:	2102      	movs	r1, #2
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <can_user_init+0x58>)
 8000f74:	f001 fc6c 	bl	8002850 <HAL_CAN_ActivateNotification>
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	@ 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200002dc 	.word	0x200002dc

08000f84 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d107      	bne.n	8000fa6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	f107 0210 	add.w	r2, r7, #16
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fb33 	bl	800260c <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= MOTOR_3508_FEEDBACK_ID_BASE)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fac:	d349      	bcc.n	8001042 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
   && (rx_header.StdId <  MOTOR_3508_FEEDBACK_ID_BASE + MOTOR_CHASSIS_MAX_NUM + MOTOR_GIMBAL_MAX_NUM))                  // judge the can id
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	f240 2205 	movw	r2, #517	@ 0x205
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d844      	bhi.n	8001042 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
  {

    uint8_t index = rx_header.StdId - MOTOR_3508_FEEDBACK_ID_BASE  ;                  // get motor index by can_id
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    motor_array[index].angle    = ((rx_data[0] << 8) | rx_data[1]);
 8000fbe:	7a3b      	ldrb	r3, [r7, #8]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	7a7b      	ldrb	r3, [r7, #9]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fd0:	b298      	uxth	r0, r3
 8000fd2:	491f      	ldr	r1, [pc, #124]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	4602      	mov	r2, r0
 8000fe0:	801a      	strh	r2, [r3, #0]
    motor_array[index].current_get    = ((rx_data[2] << 8) | rx_data[3]);
 8000fe2:	7abb      	ldrb	r3, [r7, #10]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b219      	sxth	r1, r3
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	b218      	sxth	r0, r3
 8000ff4:	4916      	ldr	r1, [pc, #88]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	4602      	mov	r2, r0
 8001004:	801a      	strh	r2, [r3, #0]
    motor_array[index].current_set = ((rx_data[4] << 8) | rx_data[5]);
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b219      	sxth	r1, r3
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	b21b      	sxth	r3, r3
 8001010:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001014:	430b      	orrs	r3, r1
 8001016:	b218      	sxth	r0, r3
 8001018:	490d      	ldr	r1, [pc, #52]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	3306      	adds	r3, #6
 8001026:	4602      	mov	r2, r0
 8001028:	801a      	strh	r2, [r3, #0]
    motor_array[index].hall           =   rx_data[6];
 800102a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800102e:	7bb8      	ldrb	r0, [r7, #14]
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3308      	adds	r3, #8
 800103e:	4602      	mov	r2, r0
 8001040:	701a      	strb	r2, [r3, #0]
  }

}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	@ 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40006400 	.word	0x40006400
 8001050:	2000002c 	.word	0x2000002c

08001054 <set_motor_value>:

void set_motor_value(uint16_t tx_ID, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08b      	sub	sp, #44	@ 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	4604      	mov	r4, r0
 800105c:	4608      	mov	r0, r1
 800105e:	4611      	mov	r1, r2
 8001060:	461a      	mov	r2, r3
 8001062:	4623      	mov	r3, r4
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	4603      	mov	r3, r0
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	807b      	strh	r3, [r7, #2]
 800106e:	4613      	mov	r3, r2
 8001070:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];

  tx_header.StdId = tx_ID;
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	613b      	str	r3, [r7, #16]
  tx_header.IDE   = CAN_ID_STD;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 800107e:	2308      	movs	r3, #8
 8001080:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 8001082:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001086:	121b      	asrs	r3, r3, #8
 8001088:	b21b      	sxth	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8001094:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001098:	121b      	asrs	r3, r3, #8
 800109a:	b21b      	sxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 80010a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 80010b8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80010bc:	121b      	asrs	r3, r3, #8
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 80010c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0);
 80010ca:	f107 0208 	add.w	r2, r7, #8
 80010ce:	f107 0110 	add.w	r1, r7, #16
 80010d2:	2301      	movs	r3, #1
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <set_motor_value+0x90>)
 80010d6:	f001 f9c9 	bl	800246c <HAL_CAN_AddTxMessage>
}
 80010da:	bf00      	nop
 80010dc:	372c      	adds	r7, #44	@ 0x2c
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200002dc 	.word	0x200002dc

080010e8 <Chassis_Control>:
static float speed_filtered_chassis[4] = {0};
int16_t value[4];
int16_t value_set_chassis[4] ={ 0 };

void Chassis_Control(Motor_6025_Typedef *motor_chassis_array)
{
 80010e8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80010ec:	ed2d 8b02 	vpush	{d8}
 80010f0:	b08d      	sub	sp, #52	@ 0x34
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	static uint8_t init_flag = 1;
		uint8_t i;
		static PID_Typedef pid_speed_motor_chassis[4];
		static float relative_angle_chassis[4] ={0, 0, 0 ,0};
		static float in_data[4][DATA_LENGTH_CHASSIS] = {0};
		float angle_increment_chassis[4] = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
		float speed_chassis[4] = {0};
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]


		if(init_flag == 1)
 8001112:	4bad      	ldr	r3, [pc, #692]	@ (80013c8 <Chassis_Control+0x2e0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d126      	bne.n	8001168 <Chassis_Control+0x80>
		{
			Pid_Init_Speed_Chassis(&pid_speed_motor_chassis[0]);
 800111a:	48ac      	ldr	r0, [pc, #688]	@ (80013cc <Chassis_Control+0x2e4>)
 800111c:	f000 f966 	bl	80013ec <Pid_Init_Speed_Chassis>
			for(i = 0; i < 4; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001126:	e018      	b.n	800115a <Chassis_Control+0x72>
			{
					motor_chassis_array[i].last_angle = motor_chassis_array[i].angle;
 8001128:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1899      	adds	r1, r3, r2
 800113a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	880a      	ldrh	r2, [r1, #0]
 800114e:	805a      	strh	r2, [r3, #2]
			for(i = 0; i < 4; i++)
 8001150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001154:	3301      	adds	r3, #1
 8001156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800115a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800115e:	2b03      	cmp	r3, #3
 8001160:	d9e2      	bls.n	8001128 <Chassis_Control+0x40>
			}
			init_flag = 0;
 8001162:	4b99      	ldr	r3, [pc, #612]	@ (80013c8 <Chassis_Control+0x2e0>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		}
		RC_Chassis_DataUpdate(speed_set_chassis);
 8001168:	4899      	ldr	r0, [pc, #612]	@ (80013d0 <Chassis_Control+0x2e8>)
 800116a:	f000 fbcf 	bl	800190c <RC_Chassis_DataUpdate>
		for(i = 0; i < 4; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001174:	e0e0      	b.n	8001338 <Chassis_Control+0x250>
		{
			angle_increment_chassis[i] = Angle_Calculate(motor_chassis_array[i].angle / 8191.0 * 360.0 ,
 8001176:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f96e 	bl	800046c <__aeabi_i2d>
 8001190:	a389      	add	r3, pc, #548	@ (adr r3, 80013b8 <Chassis_Control+0x2d0>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fafd 	bl	8000794 <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b8b      	ldr	r3, [pc, #556]	@ (80013d4 <Chassis_Control+0x2ec>)
 80011a8:	f7ff f9ca 	bl	8000540 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	ec43 2b18 	vmov	d8, r2, r3
													motor_chassis_array[i].last_angle / 8191.0 * 360.0);
 80011b4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f94f 	bl	800046c <__aeabi_i2d>
 80011ce:	a37a      	add	r3, pc, #488	@ (adr r3, 80013b8 <Chassis_Control+0x2d0>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fade 	bl	8000794 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
			angle_increment_chassis[i] = Angle_Calculate(motor_chassis_array[i].angle / 8191.0 * 360.0 ,
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b7b      	ldr	r3, [pc, #492]	@ (80013d4 <Chassis_Control+0x2ec>)
 80011e6:	f7ff f9ab 	bl	8000540 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	ec43 2b17 	vmov	d7, r2, r3
 80011f2:	eeb0 1a47 	vmov.f32	s2, s14
 80011f6:	eef0 1a67 	vmov.f32	s3, s15
 80011fa:	eeb0 0a48 	vmov.f32	s0, s16
 80011fe:	eef0 0a68 	vmov.f32	s1, s17
 8001202:	f7ff fe1b 	bl	8000e3c <Angle_Calculate>
 8001206:	ee07 0a90 	vmov	s15, r0
 800120a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	3330      	adds	r3, #48	@ 0x30
 8001216:	443b      	add	r3, r7
 8001218:	3b18      	subs	r3, #24
 800121a:	edc3 7a00 	vstr	s15, [r3]
			relative_angle_chassis[i] += angle_increment_chassis[i];
 800121e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001222:	4a6d      	ldr	r2, [pc, #436]	@ (80013d8 <Chassis_Control+0x2f0>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3330      	adds	r3, #48	@ 0x30
 8001234:	443b      	add	r3, r7
 8001236:	3b18      	subs	r3, #24
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4a64      	ldr	r2, [pc, #400]	@ (80013d8 <Chassis_Control+0x2f0>)
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	edc3 7a00 	vstr	s15, [r3]
			speed_chassis[i] = angle_increment_chassis[i] * 60000.0 / 360.0;
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3330      	adds	r3, #48	@ 0x30
 8001256:	443b      	add	r3, r7
 8001258:	3b18      	subs	r3, #24
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f917 	bl	8000490 <__aeabi_f2d>
 8001262:	a357      	add	r3, pc, #348	@ (adr r3, 80013c0 <Chassis_Control+0x2d8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f96a 	bl	8000540 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b56      	ldr	r3, [pc, #344]	@ (80013d4 <Chassis_Control+0x2ec>)
 800127a:	f7ff fa8b 	bl	8000794 <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fb6b 	bl	8000964 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	00a3      	lsls	r3, r4, #2
 8001292:	3330      	adds	r3, #48	@ 0x30
 8001294:	443b      	add	r3, r7
 8001296:	3b28      	subs	r3, #40	@ 0x28
 8001298:	601a      	str	r2, [r3, #0]
			speed_filtered_chassis[i] = Average_Filter(&in_data[i][0], speed_chassis[i], DATA_LENGTH_CHASSIS);
 800129a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4a4d      	ldr	r2, [pc, #308]	@ (80013dc <Chassis_Control+0x2f4>)
 80012a8:	189c      	adds	r4, r3, r2
 80012aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3330      	adds	r3, #48	@ 0x30
 80012b2:	443b      	add	r3, r7
 80012b4:	3b28      	subs	r3, #40	@ 0x28
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8e9 	bl	8000490 <__aeabi_f2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	2114      	movs	r1, #20
 80012c4:	ec43 2b10 	vmov	d0, r2, r3
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fd60 	bl	8000d8e <Average_Filter>
 80012ce:	ee07 0a90 	vmov	s15, r0
 80012d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012da:	4a41      	ldr	r2, [pc, #260]	@ (80013e0 <Chassis_Control+0x2f8>)
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	edc3 7a00 	vstr	s15, [r3]

			value_set_chassis[i] = Pid_Calculate(&pid_speed_motor_chassis[i], speed_filtered_chassis[i], speed_set_chassis[i]);
 80012e4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80012e8:	4613      	mov	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4a36      	ldr	r2, [pc, #216]	@ (80013cc <Chassis_Control+0x2e4>)
 80012f2:	189c      	adds	r4, r3, r2
 80012f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f8:	4a39      	ldr	r2, [pc, #228]	@ (80013e0 <Chassis_Control+0x2f8>)
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8c5 	bl	8000490 <__aeabi_f2d>
 8001306:	4680      	mov	r8, r0
 8001308:	4689      	mov	r9, r1
 800130a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130e:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <Chassis_Control+0x2e8>)
 8001310:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001314:	4619      	mov	r1, r3
 8001316:	ec49 8b10 	vmov	d0, r8, r9
 800131a:	4620      	mov	r0, r4
 800131c:	f004 fbaa 	bl	8005a74 <Pid_Calculate>
 8001320:	4602      	mov	r2, r0
 8001322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001326:	b211      	sxth	r1, r2
 8001328:	4a2e      	ldr	r2, [pc, #184]	@ (80013e4 <Chassis_Control+0x2fc>)
 800132a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i = 0; i < 4; i++)
 800132e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001332:	3301      	adds	r3, #1
 8001334:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133c:	2b03      	cmp	r3, #3
 800133e:	f67f af1a 	bls.w	8001176 <Chassis_Control+0x8e>
			}
			for(i = 0; i < 4; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001348:	e018      	b.n	800137c <Chassis_Control+0x294>
			{

			motor_chassis_array[i].last_angle = motor_chassis_array[i].angle;
 800134a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	1899      	adds	r1, r3, r2
 800135c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	880a      	ldrh	r2, [r1, #0]
 8001370:	805a      	strh	r2, [r3, #2]
			for(i = 0; i < 4; i++)
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001376:	3301      	adds	r3, #1
 8001378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001380:	2b03      	cmp	r3, #3
 8001382:	d9e2      	bls.n	800134a <Chassis_Control+0x262>
		}
		for(int i=0;i<4;i++)
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001388:	e00a      	b.n	80013a0 <Chassis_Control+0x2b8>
		{
			value[i] = value_set_chassis[i];
 800138a:	4a16      	ldr	r2, [pc, #88]	@ (80013e4 <Chassis_Control+0x2fc>)
 800138c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <Chassis_Control+0x300>)
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<4;i++)
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139c:	3301      	adds	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	ddf1      	ble.n	800138a <Chassis_Control+0x2a2>

		}

}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3734      	adds	r7, #52	@ 0x34
 80013ac:	46bd      	mov	sp, r7
 80013ae:	ecbd 8b02 	vpop	{d8}
 80013b2:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80013b6:	bf00      	nop
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40bfff00 	.word	0x40bfff00
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40ed4c00 	.word	0x40ed4c00
 80013c8:	20000000 	.word	0x20000000
 80013cc:	2000009c 	.word	0x2000009c
 80013d0:	20000074 	.word	0x20000074
 80013d4:	40768000 	.word	0x40768000
 80013d8:	2000018c 	.word	0x2000018c
 80013dc:	2000019c 	.word	0x2000019c
 80013e0:	2000007c 	.word	0x2000007c
 80013e4:	20000094 	.word	0x20000094
 80013e8:	2000008c 	.word	0x2000008c

080013ec <Pid_Init_Speed_Chassis>:


void Pid_Init_Speed_Chassis(PID_Typedef *pid)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 4; i++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e03e      	b.n	8001478 <Pid_Init_Speed_Chassis+0x8c>
	{
		pid[i].param.Kd = 0.04;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	4613      	mov	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <Pid_Init_Speed_Chassis+0xa0>)
 800140c:	61da      	str	r2, [r3, #28]
		pid[i].param.Ki = 0.09;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	4613      	mov	r3, r2
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <Pid_Init_Speed_Chassis+0xa4>)
 8001420:	619a      	str	r2, [r3, #24]
		pid[i].param.Kp = 10.00;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	4613      	mov	r3, r2
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a18      	ldr	r2, [pc, #96]	@ (8001494 <Pid_Init_Speed_Chassis+0xa8>)
 8001434:	615a      	str	r2, [r3, #20]

		pid[i].limit.max_err_input = 3300;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	4613      	mov	r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <Pid_Init_Speed_Chassis+0xac>)
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
		pid[i].limit.max_i_out = 4000;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	4613      	mov	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <Pid_Init_Speed_Chassis+0xb0>)
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
		pid[i].limit.max_total_out = 5000;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	4613      	mov	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <Pid_Init_Speed_Chassis+0xb4>)
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
	for(uint8_t i = 0; i < 4; i++)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	3301      	adds	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d9bd      	bls.n	80013fa <Pid_Init_Speed_Chassis+0xe>
	}
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	3d23d70a 	.word	0x3d23d70a
 8001490:	3db851ec 	.word	0x3db851ec
 8001494:	41200000 	.word	0x41200000
 8001498:	454e4000 	.word	0x454e4000
 800149c:	457a0000 	.word	0x457a0000
 80014a0:	459c4000 	.word	0x459c4000

080014a4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <MX_CAN1_Init+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014b0:	2206      	movs	r2, #6
 80014b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014ca:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_CAN1_Init+0x64>)
 80014f6:	f000 fd99 	bl	800202c <HAL_CAN_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001500:	f000 fb00 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200002dc 	.word	0x200002dc
 800150c:	40006400 	.word	0x40006400

08001510 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_CAN_MspInit+0x94>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d133      	bne.n	800159a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a1b      	ldr	r2, [pc, #108]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_CAN_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156a:	2303      	movs	r3, #3
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800157a:	2309      	movs	r3, #9
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <HAL_CAN_MspInit+0x9c>)
 8001586:	f002 f847 	bl	8003618 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2014      	movs	r0, #20
 8001590:	f001 fc8f 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001594:	2014      	movs	r0, #20
 8001596:	f001 fca8 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	@ 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40006400 	.word	0x40006400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020c00 	.word	0x40020c00

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_DMA_Init+0x4c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <MX_DMA_Init+0x4c>)
 80015c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <MX_DMA_Init+0x4c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200c      	movs	r0, #12
 80015d8:	f001 fc6b 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015dc:	200c      	movs	r0, #12
 80015de:	f001 fc84 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	200e      	movs	r0, #14
 80015e8:	f001 fc63 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015ec:	200e      	movs	r0, #14
 80015ee:	f001 fc7c 	bl	8002eea <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a25      	ldr	r2, [pc, #148]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2103      	movs	r1, #3
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 80016a8:	f002 f952 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80016ac:	2303      	movs	r3, #3
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 80016c4:	f001 ffa8 	bl	8003618 <HAL_GPIO_Init>

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40021800 	.word	0x40021800

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 fc34 	bl	8001f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f820 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f7ff ff8c 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e8:	f7ff ff62 	bl	80015b0 <MX_DMA_Init>
  MX_CAN1_Init();
 80016ec:	f7ff feda 	bl	80014a4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80016f0:	f000 fb1c 	bl	8001d2c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80016f4:	f000 faa8 	bl	8001c48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
can_user_init(&hcan1);
 80016f8:	4806      	ldr	r0, [pc, #24]	@ (8001714 <main+0x3c>)
 80016fa:	f7ff fc15 	bl	8000f28 <can_user_init>
HAL_TIM_Base_Start_IT(&htim2);
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <main+0x40>)
 8001700:	f002 fde8 	bl	80042d4 <HAL_TIM_Base_Start_IT>
HAL_UARTEx_ReceiveToIdle_IT(&huart3 , buffer, sizeof(buffer));
 8001704:	2224      	movs	r2, #36	@ 0x24
 8001706:	4905      	ldr	r1, [pc, #20]	@ (800171c <main+0x44>)
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <main+0x48>)
 800170a:	f003 fa59 	bl	8004bc0 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800170e:	bf00      	nop
 8001710:	e7fd      	b.n	800170e <main+0x36>
 8001712:	bf00      	nop
 8001714:	200002dc 	.word	0x200002dc
 8001718:	20000374 	.word	0x20000374
 800171c:	20000304 	.word	0x20000304
 8001720:	200003bc 	.word	0x200003bc

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b094      	sub	sp, #80	@ 0x50
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	2230      	movs	r2, #48	@ 0x30
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fa52 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <SystemClock_Config+0xcc>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <SystemClock_Config+0xcc>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <SystemClock_Config+0xcc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <SystemClock_Config+0xd0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <SystemClock_Config+0xd0>)
 800176e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <SystemClock_Config+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178a:	2302      	movs	r3, #2
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001794:	2306      	movs	r3, #6
 8001796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001798:	23a8      	movs	r3, #168	@ 0xa8
 800179a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179c:	2302      	movs	r3, #2
 800179e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 f8eb 	bl	8003984 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017b4:	f000 f9a6 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	2302      	movs	r3, #2
 80017be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2105      	movs	r1, #5
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fb4c 	bl	8003e74 <HAL_RCC_ClockConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017e2:	f000 f98f 	bl	8001b04 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3750      	adds	r7, #80	@ 0x50
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
   if(huart == &huart3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3e      	ldr	r2, [pc, #248]	@ (8001900 <HAL_UARTEx_RxEventCallback+0x108>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d175      	bne.n	80018f8 <HAL_UARTEx_RxEventCallback+0x100>
//  if(__HAL_UART_GET_FLAG(huart,UART_FLAG_IDLE))
  {
//    HAL_UART_AbortReceive(huart);
    //HAL_UARTEx_ReceiveToIdle_IT(&huart3,buffer,18);
//     HAL_UART_Receive_DMA(&huart1,buffer,18);
	  HAL_UARTEx_ReceiveToIdle_IT(&huart3,buffer,18);
 800180c:	2212      	movs	r2, #18
 800180e:	493d      	ldr	r1, [pc, #244]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001810:	483b      	ldr	r0, [pc, #236]	@ (8001900 <HAL_UARTEx_RxEventCallback+0x108>)
 8001812:	f003 f9d5 	bl	8004bc0 <HAL_UARTEx_ReceiveToIdle_IT>
    RC_ctrl.ch0 = (buffer[0] | buffer[1] << 8) & 0x07FF;
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	4313      	orrs	r3, r2
 8001824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001828:	4a37      	ldr	r2, [pc, #220]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 800182a:	6013      	str	r3, [r2, #0]
    RC_ctrl.ch1 = (buffer[1] >> 3 |buffer[2] << 5) & 0x07FF;
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001838:	789b      	ldrb	r3, [r3, #2]
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	4313      	orrs	r3, r2
 800183e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001842:	4a31      	ldr	r2, [pc, #196]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 8001844:	6053      	str	r3, [r2, #4]
    RC_ctrl.ch2 = (buffer[2] >> 6 | buffer[3] << 2 | buffer[4] << 10) & 0x07FF;
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001852:	78db      	ldrb	r3, [r3, #3]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	431a      	orrs	r2, r3
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4313      	orrs	r3, r2
 8001860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001864:	4a28      	ldr	r2, [pc, #160]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 8001866:	6093      	str	r3, [r2, #8]
    RC_ctrl.ch3 = (buffer [4] >> 1 | buffer[5] << 7) & 0x07FF;
 8001868:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001874:	795b      	ldrb	r3, [r3, #5]
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	4313      	orrs	r3, r2
 800187a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800187e:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 8001880:	60d3      	str	r3, [r2, #12]
    RC_ctrl.ch4 = (buffer[16] | (buffer[17] << 8));
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001884:	7c1b      	ldrb	r3, [r3, #16]
 8001886:	461a      	mov	r2, r3
 8001888:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 800188a:	7c5b      	ldrb	r3, [r3, #17]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	4313      	orrs	r3, r2
 8001890:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 8001892:	6113      	str	r3, [r2, #16]
    RC_ctrl.s1  = (buffer[5] >> 4 & 0x000C) >> 2;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001896:	795b      	ldrb	r3, [r3, #5]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	b2db      	uxtb	r3, r3
 800189c:	109b      	asrs	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018a8:	751a      	strb	r2, [r3, #20]
    RC_ctrl.s2  = (buffer[5] >> 4 & 0x0003);
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_UARTEx_RxEventCallback+0x10c>)
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018ba:	755a      	strb	r2, [r3, #21]



    RC_ctrl.ch0 -= RC_CH_VALUE_OFFSET;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018c4:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018c6:	6013      	str	r3, [r2, #0]
    RC_ctrl.ch1 -= RC_CH_VALUE_OFFSET;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018d2:	6053      	str	r3, [r2, #4]
    RC_ctrl.ch2 -= RC_CH_VALUE_OFFSET;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018de:	6093      	str	r3, [r2, #8]
    RC_ctrl.ch3 -= RC_CH_VALUE_OFFSET;
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018ea:	60d3      	str	r3, [r2, #12]
    RC_ctrl.ch4 -= RC_CH_VALUE_OFFSET;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_UARTEx_RxEventCallback+0x110>)
 80018f6:	6113      	str	r3, [r2, #16]
//    HAL_UARTEx_ReceiveToIdle_DMA(&huart1,buffer,36);
  }
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200003bc 	.word	0x200003bc
 8001904:	20000304 	.word	0x20000304
 8001908:	20000328 	.word	0x20000328

0800190c <RC_Chassis_DataUpdate>:


void RC_Chassis_DataUpdate(int16_t *chassis_set_array)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	ed2d 8b02 	vpush	{d8}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	static LOW_PASS_FILTER_Typedef motor_chassis_filter[4];
	static uint8_t i = 1;
	const static float RATE = 1;
	if(i == 1)
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d121      	bne.n	8001964 <RC_Chassis_DataUpdate+0x58>
	{
		const float K_LPF_CHASSIS = 0.12;
 8001920:	4b56      	ldr	r3, [pc, #344]	@ (8001a7c <RC_Chassis_DataUpdate+0x170>)
 8001922:	60fb      	str	r3, [r7, #12]
		const float T_LPF_CHASSIS = 0.002;
 8001924:	4b56      	ldr	r3, [pc, #344]	@ (8001a80 <RC_Chassis_DataUpdate+0x174>)
 8001926:	60bb      	str	r3, [r7, #8]
		for(i = 0; i < 4; i++)
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e015      	b.n	800195c <RC_Chassis_DataUpdate+0x50>
		{
			low_pass_filter_init(&motor_chassis_filter[i], K_LPF_CHASSIS, T_LPF_CHASSIS);
 8001930:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4a51      	ldr	r2, [pc, #324]	@ (8001a84 <RC_Chassis_DataUpdate+0x178>)
 8001940:	4413      	add	r3, r2
 8001942:	edd7 0a02 	vldr	s1, [r7, #8]
 8001946:	ed97 0a03 	vldr	s0, [r7, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f9d2 	bl	8000cf4 <low_pass_filter_init>
		for(i = 0; i < 4; i++)
 8001950:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <RC_Chassis_DataUpdate+0x16c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d9e5      	bls.n	8001930 <RC_Chassis_DataUpdate+0x24>
		}
	}
	chassis_set_array[0] = -RATE * low_pass_filter(&motor_chassis_filter[0], RC_ctrl.ch1 - RC_ctrl.ch0 - RC_ctrl.ch2);
 8001964:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <RC_Chassis_DataUpdate+0x17c>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb1 8a67 	vneg.f32	s16, s15
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4b46      	ldr	r3, [pc, #280]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad2      	subs	r2, r2, r3
 8001978:	4b44      	ldr	r3, [pc, #272]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	483e      	ldr	r0, [pc, #248]	@ (8001a84 <RC_Chassis_DataUpdate+0x178>)
 800198c:	f7ff f9c6 	bl	8000d1c <low_pass_filter>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	801a      	strh	r2, [r3, #0]
	chassis_set_array[1] =  RATE * low_pass_filter(&motor_chassis_filter[1], RC_ctrl.ch1 + RC_ctrl.ch0 + RC_ctrl.ch2);
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	441a      	add	r2, r3
 80019b0:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	4833      	ldr	r0, [pc, #204]	@ (8001a90 <RC_Chassis_DataUpdate+0x184>)
 80019c4:	f7ff f9aa 	bl	8000d1c <low_pass_filter>
 80019c8:	eeb0 7a40 	vmov.f32	s14, s0
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <RC_Chassis_DataUpdate+0x17c>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3302      	adds	r3, #2
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 2a90 	vmov	r2, s15
 80019e2:	b212      	sxth	r2, r2
 80019e4:	801a      	strh	r2, [r3, #0]
	chassis_set_array[2] =  RATE * low_pass_filter(&motor_chassis_filter[2], RC_ctrl.ch1 - RC_ctrl.ch0 + RC_ctrl.ch2);
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	4824      	ldr	r0, [pc, #144]	@ (8001a94 <RC_Chassis_DataUpdate+0x188>)
 8001a04:	f7ff f98a 	bl	8000d1c <low_pass_filter>
 8001a08:	eeb0 7a40 	vmov.f32	s14, s0
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <RC_Chassis_DataUpdate+0x17c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1e:	ee17 2a90 	vmov	r2, s15
 8001a22:	b212      	sxth	r2, r2
 8001a24:	801a      	strh	r2, [r3, #0]
	chassis_set_array[3] = -RATE * low_pass_filter(&motor_chassis_filter[3], RC_ctrl.ch1 + RC_ctrl.ch0 - RC_ctrl.ch2);
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <RC_Chassis_DataUpdate+0x17c>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb1 8a67 	vneg.f32	s16, s15
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	441a      	add	r2, r3
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <RC_Chassis_DataUpdate+0x180>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <RC_Chassis_DataUpdate+0x18c>)
 8001a4e:	f7ff f965 	bl	8000d1c <low_pass_filter>
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
 8001a56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3306      	adds	r3, #6
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 2a90 	vmov	r2, s15
 8001a66:	b212      	sxth	r2, r2
 8001a68:	801a      	strh	r2, [r3, #0]

}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	ecbd 8b02 	vpop	{d8}
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000001 	.word	0x20000001
 8001a7c:	3df5c28f 	.word	0x3df5c28f
 8001a80:	3b03126f 	.word	0x3b03126f
 8001a84:	20000340 	.word	0x20000340
 8001a88:	08005c4c 	.word	0x08005c4c
 8001a8c:	20000328 	.word	0x20000328
 8001a90:	2000034c 	.word	0x2000034c
 8001a94:	20000358 	.word	0x20000358
 8001a98:	20000364 	.word	0x20000364

08001a9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	6078      	str	r0, [r7, #4]

	static uint8_t flag = 0;
	if (htim->Instance == TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d11f      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		if (flag == 0)
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d114      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			Chassis_Control(motor_array);
 8001ab6:	4811      	ldr	r0, [pc, #68]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ab8:	f7ff fb16 	bl	80010e8 <Chassis_Control>
			set_motor_value(0x200, value_set_chassis[0], value_set_chassis[1], value_set_chassis[2], value_set_chassis[3]);
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b219      	sxth	r1, r3
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	b218      	sxth	r0, r3
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001adc:	f7ff faba 	bl	8001054 <set_motor_value>

		}

		flag ^= 1;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001aec:	701a      	strb	r2, [r3, #0]
	}
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000370 	.word	0x20000370
 8001afc:	2000002c 	.word	0x2000002c
 8001b00:	20000094 	.word	0x20000094

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <Error_Handler+0x8>

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <NMI_Handler+0x4>

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <MemManage_Handler+0x4>

08001b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb6:	f000 fa19 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA1_Stream1_IRQHandler+0x10>)
 8001bc6:	f001 faeb 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000404 	.word	0x20000404

08001bd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <DMA1_Stream3_IRQHandler+0x10>)
 8001bda:	f001 fae1 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000464 	.word	0x20000464

08001be8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <CAN1_RX0_IRQHandler+0x10>)
 8001bee:	f000 fe55 	bl	800289c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002dc 	.word	0x200002dc

08001bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <TIM2_IRQHandler+0x10>)
 8001c02:	f002 fbd7 	bl	80043b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000374 	.word	0x20000374

08001c10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <USART3_IRQHandler+0x10>)
 8001c16:	f003 f831 	bl	8004c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003bc 	.word	0x200003bc

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c6e:	22a7      	movs	r2, #167	@ 0xa7
 8001c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8c:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001c8e:	f002 fad1 	bl	8004234 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c98:	f7ff ff34 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001caa:	f002 fc73 	bl	8004594 <HAL_TIM_ConfigClockSource>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f7ff ff26 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_TIM2_Init+0x94>)
 8001cc6:	f002 fe9b 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f7ff ff18 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000374 	.word	0x20000374

08001ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf0:	d115      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_TIM_Base_MspInit+0x48>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001d28 <HAL_TIM_Base_MspInit+0x48>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_TIM_Base_MspInit+0x48>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201c      	movs	r0, #28
 8001d14:	f001 f8cd 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d18:	201c      	movs	r0, #28
 8001d1a:	f001 f8e6 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <MX_USART3_UART_Init+0x50>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d38:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <MX_USART3_UART_Init+0x54>)
 8001d3a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d50:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d54:	220c      	movs	r2, #12
 8001d56:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d64:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d66:	f002 fedb 	bl	8004b20 <HAL_UART_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8001d70:	f7ff fec8 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200003bc 	.word	0x200003bc
 8001d7c:	40004800 	.word	0x40004800
 8001d80:	000186a0 	.word	0x000186a0

08001d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_UART_MspInit+0x154>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f040 8093 	bne.w	8001ece <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a43      	ldr	r2, [pc, #268]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_UART_MspInit+0x158>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001de0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001df2:	2307      	movs	r3, #7
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4838      	ldr	r0, [pc, #224]	@ (8001ee0 <HAL_UART_MspInit+0x15c>)
 8001dfe:	f001 fc0b 	bl	8003618 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e02:	4b38      	ldr	r3, [pc, #224]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e04:	4a38      	ldr	r2, [pc, #224]	@ (8001ee8 <HAL_UART_MspInit+0x164>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e44:	4827      	ldr	r0, [pc, #156]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e46:	f001 f86b 	bl	8002f20 <HAL_DMA_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e50:	f7ff fe58 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <HAL_UART_MspInit+0x160>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001e60:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e62:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <HAL_UART_MspInit+0x16c>)
 8001e64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001e66:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e70:	2240      	movs	r2, #64	@ 0x40
 8001e72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e88:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e96:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ea2:	4812      	ldr	r0, [pc, #72]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001ea4:	f001 f83c 	bl	8002f20 <HAL_DMA_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001eae:	f7ff fe29 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001eb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <HAL_UART_MspInit+0x168>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2027      	movs	r0, #39	@ 0x27
 8001ec4:	f000 fff5 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ec8:	2027      	movs	r0, #39	@ 0x27
 8001eca:	f001 f80e 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	20000404 	.word	0x20000404
 8001ee8:	40026028 	.word	0x40026028
 8001eec:	20000464 	.word	0x20000464
 8001ef0:	40026058 	.word	0x40026058

08001ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ef8:	f7ff fe94 	bl	8001c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efe:	490d      	ldr	r1, [pc, #52]	@ (8001f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f14:	4c0a      	ldr	r4, [pc, #40]	@ (8001f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f003 fe63 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f26:	f7ff fbd7 	bl	80016d8 <main>
  bx  lr    
 8001f2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f38:	08005c80 	.word	0x08005c80
  ldr r2, =_sbss
 8001f3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f40:	200004c8 	.word	0x200004c8

08001f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <HAL_Init+0x40>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <HAL_Init+0x40>)
 8001f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_Init+0x40>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 ff93 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f76:	200f      	movs	r0, #15
 8001f78:	f000 f808 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7c:	f7ff fdc8 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0x54>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x58>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 ffab 	bl	8002f06 <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00e      	b.n	8001fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d80a      	bhi.n	8001fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f000 ff73 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fcc:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <HAL_InitTick+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000000c 	.word	0x2000000c
 8002010:	200004c4 	.word	0x200004c4

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200004c4 	.word	0x200004c4

0800202c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0ed      	b.n	800221a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fa60 	bl	8001510 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002060:	f7ff ffd8 	bl	8002014 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002066:	e012      	b.n	800208e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002068:	f7ff ffd4 	bl	8002014 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d90b      	bls.n	800208e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2205      	movs	r2, #5
 8002086:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0c5      	b.n	800221a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0e5      	beq.n	8002068 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0202 	bic.w	r2, r2, #2
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7ff ffb2 	bl	8002014 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020b2:	e012      	b.n	80020da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b4:	f7ff ffae 	bl	8002014 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b0a      	cmp	r3, #10
 80020c0:	d90b      	bls.n	80020da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e09f      	b.n	800221a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e5      	bne.n	80020b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7e5b      	ldrb	r3, [r3, #25]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e9b      	ldrb	r3, [r3, #26]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0220 	bic.w	r2, r2, #32
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7edb      	ldrb	r3, [r3, #27]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0210 	bic.w	r2, r2, #16
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e007      	b.n	8002190 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0210 	orr.w	r2, r2, #16
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7f1b      	ldrb	r3, [r3, #28]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0208 	orr.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e007      	b.n	80021ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7f5b      	ldrb	r3, [r3, #29]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0204 	orr.w	r2, r2, #4
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e007      	b.n	80021e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d003      	beq.n	800224a <HAL_CAN_ConfigFilter+0x26>
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 80be 	bne.w	80023c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800224a:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800224c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002264:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d123      	bne.n	80022f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3248      	adds	r2, #72	@ 0x48
 80022d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	3348      	adds	r3, #72	@ 0x48
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d122      	bne.n	8002342 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800231c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3248      	adds	r2, #72	@ 0x48
 8002322:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002336:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	3348      	adds	r3, #72	@ 0x48
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	401a      	ands	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800235c:	e007      	b.n	800236e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	431a      	orrs	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	401a      	ands	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002388:	e007      	b.n	800239a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	431a      	orrs	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023b8:	f023 0201 	bic.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e006      	b.n	80023d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40006400 	.word	0x40006400

080023e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d12e      	bne.n	8002456 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002410:	f7ff fe00 	bl	8002014 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002416:	e012      	b.n	800243e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002418:	f7ff fdfc 	bl	8002014 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d90b      	bls.n	800243e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e012      	b.n	8002464 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e5      	bne.n	8002418 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e006      	b.n	8002464 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002480:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d003      	beq.n	8002498 <HAL_CAN_AddTxMessage+0x2c>
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	2b02      	cmp	r3, #2
 8002494:	f040 80ad 	bne.w	80025f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8095 	beq.w	80025e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024c2:	2201      	movs	r2, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10d      	bne.n	80024f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	6809      	ldr	r1, [r1, #0]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3318      	adds	r3, #24
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	440b      	add	r3, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e00f      	b.n	8002510 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002504:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3318      	adds	r3, #24
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	440b      	add	r3, r1
 800250e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3318      	adds	r3, #24
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	440b      	add	r3, r1
 8002520:	3304      	adds	r3, #4
 8002522:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	7d1b      	ldrb	r3, [r3, #20]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d111      	bne.n	8002550 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3318      	adds	r3, #24
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	6811      	ldr	r1, [r2, #0]
 8002540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3318      	adds	r3, #24
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	440b      	add	r3, r1
 800254c:	3304      	adds	r3, #4
 800254e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3307      	adds	r3, #7
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	061a      	lsls	r2, r3, #24
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3306      	adds	r3, #6
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3305      	adds	r3, #5
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4313      	orrs	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3204      	adds	r2, #4
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4610      	mov	r0, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	ea43 0200 	orr.w	r2, r3, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002586:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3303      	adds	r3, #3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	061a      	lsls	r2, r3, #24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3302      	adds	r3, #2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4313      	orrs	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	4610      	mov	r0, r2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6811      	ldr	r1, [r2, #0]
 80025ae:	ea43 0200 	orr.w	r2, r3, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80025bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6811      	ldr	r1, [r2, #0]
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3318      	adds	r3, #24
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	440b      	add	r3, r1
 80025dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e00e      	b.n	8002600 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e006      	b.n	8002600 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3724      	adds	r7, #36	@ 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d003      	beq.n	8002630 <HAL_CAN_GetRxMessage+0x24>
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	2b02      	cmp	r3, #2
 800262c:	f040 8103 	bne.w	8002836 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0f7      	b.n	8002844 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0e8      	b.n	8002844 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	331b      	adds	r3, #27
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0204 	and.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	331b      	adds	r3, #27
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0d5b      	lsrs	r3, r3, #21
 80026a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e00b      	b.n	80026c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	331b      	adds	r3, #27
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	331b      	adds	r3, #27
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0202 	and.w	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	331b      	adds	r3, #27
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2208      	movs	r2, #8
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	e00b      	b.n	8002710 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	331b      	adds	r3, #27
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2da      	uxtb	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0a1a      	lsrs	r2, r3, #8
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0c1a      	lsrs	r2, r3, #16
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3302      	adds	r3, #2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4413      	add	r3, r2
 8002794:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e1a      	lsrs	r2, r3, #24
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3303      	adds	r3, #3
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3304      	adds	r3, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0a1a      	lsrs	r2, r3, #8
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3305      	adds	r3, #5
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4413      	add	r3, r2
 80027e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0c1a      	lsrs	r2, r3, #16
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3306      	adds	r3, #6
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e1a      	lsrs	r2, r3, #24
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3307      	adds	r3, #7
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d108      	bne.n	8002822 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	e007      	b.n	8002832 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e006      	b.n	8002844 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <HAL_CAN_ActivateNotification+0x1e>
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d109      	bne.n	8002882 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6959      	ldr	r1, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e006      	b.n	8002890 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	@ 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07c      	beq.n	80029dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f983 	bl	8002c0a <HAL_CAN_TxMailbox0CompleteCallback>
 8002904:	e016      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
 8002918:	e00c      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	e002      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f989 	bl	8002c46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002946:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f963 	bl	8002c1e <HAL_CAN_TxMailbox1CompleteCallback>
 8002958:	e016      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
 800296c:	e00c      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002980:	e002      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f969 	bl	8002c5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800299a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f943 	bl	8002c32 <HAL_CAN_TxMailbox2CompleteCallback>
 80029ac:	e016      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c0:	e00c      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	e002      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f949 	bl	8002c6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f930 	bl	8002c82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe faa2 	bl	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f912 	bl	8002caa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8f9 	bl	8002c96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2210      	movs	r2, #16
 8002abe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8fc 	bl	8002cbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8f5 	bl	8002cd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07b      	beq.n	8002bea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d072      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d043      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d03e      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b6a:	2b60      	cmp	r3, #96	@ 0x60
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x32a>
 8002b6e:	2b60      	cmp	r3, #96	@ 0x60
 8002b70:	d82e      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b72:	2b50      	cmp	r3, #80	@ 0x50
 8002b74:	d022      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x320>
 8002b76:	2b50      	cmp	r3, #80	@ 0x50
 8002b78:	d82a      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d019      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x316>
 8002b7e:	2b40      	cmp	r3, #64	@ 0x40
 8002b80:	d826      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b82:	2b30      	cmp	r3, #48	@ 0x30
 8002b84:	d010      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x30c>
 8002b86:	2b30      	cmp	r3, #48	@ 0x30
 8002b88:	d822      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d002      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x2f8>
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d005      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b92:	e01d      	b.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b9c:	e019      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ba6:	e014      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	f043 0320 	orr.w	r3, r3, #32
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bb0:	e00f      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bba:	e00a      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bc4:	e005      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bce:	e000      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002bd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002be0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2204      	movs	r2, #4
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f872 	bl	8002ce6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	@ (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff29 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff3e 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff8e 	bl	8002df0 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff31 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ffa2 	bl	8002e58 <SysTick_Config>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff f872 	bl	8002014 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e099      	b.n	8003070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5c:	e00f      	b.n	8002f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5e:	f7ff f859 	bl	8002014 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d908      	bls.n	8002f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e078      	b.n	8003070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e8      	bne.n	8002f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_DMA_Init+0x158>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d107      	bne.n	8002fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	2b04      	cmp	r3, #4
 8003010:	d117      	bne.n	8003042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa7b 	bl	8003520 <DMA_CheckFifoParam>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2240      	movs	r2, #64	@ 0x40
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800303e:	2301      	movs	r3, #1
 8003040:	e016      	b.n	8003070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa32 	bl	80034b4 <DMA_CalcBaseAndBitshift>
 8003050:	4603      	mov	r3, r0
 8003052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	223f      	movs	r2, #63	@ 0x3f
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	f010803f 	.word	0xf010803f

0800307c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800308a:	f7fe ffc3 	bl	8002014 <HAL_GetTick>
 800308e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	@ 0x80
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e052      	b.n	8003154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_Abort+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fe:	e013      	b.n	8003128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003100:	f7fe ff88 	bl	8002014 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b05      	cmp	r3, #5
 800310c:	d90c      	bls.n	8003128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e015      	b.n	8003154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e4      	bne.n	8003100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	223f      	movs	r2, #63	@ 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	@ 0x80
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00c      	b.n	8003194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ac:	4b8e      	ldr	r3, [pc, #568]	@ (80033e8 <HAL_DMA_IRQHandler+0x248>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a8e      	ldr	r2, [pc, #568]	@ (80033ec <HAL_DMA_IRQHandler+0x24c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01a      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	2201      	movs	r2, #1
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	2204      	movs	r2, #4
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	2204      	movs	r2, #4
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2210      	movs	r2, #16
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d043      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	2210      	movs	r2, #16
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d024      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
 80032ce:	e01f      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
 80032e0:	e016      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0208 	bic.w	r2, r2, #8
 80032fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2220      	movs	r2, #32
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 808f 	beq.w	8003440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8087 	beq.w	8003440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	2220      	movs	r2, #32
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b05      	cmp	r3, #5
 8003348:	d136      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0216 	bic.w	r2, r2, #22
 8003358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_DMA_IRQHandler+0x1da>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0208 	bic.w	r2, r2, #8
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	223f      	movs	r2, #63	@ 0x3f
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d07e      	beq.n	80034ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
        }
        return;
 80033b6:	e079      	b.n	80034ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d031      	beq.n	8003440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
 80033e4:	e02c      	b.n	8003440 <HAL_DMA_IRQHandler+0x2a0>
 80033e6:	bf00      	nop
 80033e8:	20000004 	.word	0x20000004
 80033ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
 8003400:	e01e      	b.n	8003440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10f      	bne.n	8003430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0210 	bic.w	r2, r2, #16
 800341e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003444:	2b00      	cmp	r3, #0
 8003446:	d032      	beq.n	80034ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d022      	beq.n	800349a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2205      	movs	r2, #5
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3301      	adds	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	429a      	cmp	r2, r3
 8003476:	d307      	bcc.n	8003488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f2      	bne.n	800346c <HAL_DMA_IRQHandler+0x2cc>
 8003486:	e000      	b.n	800348a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
 80034aa:	e000      	b.n	80034ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80034ac:	bf00      	nop
    }
  }
}
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3b10      	subs	r3, #16
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <DMA_CalcBaseAndBitshift+0x64>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ce:	4a13      	ldr	r2, [pc, #76]	@ (800351c <DMA_CalcBaseAndBitshift+0x68>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d909      	bls.n	80034f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80034f4:	e007      	b.n	8003506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	aaaaaaab 	.word	0xaaaaaaab
 800351c:	08005c68 	.word	0x08005c68

08003520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d856      	bhi.n	80035ee <DMA_CheckFifoParam+0xce>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <DMA_CheckFifoParam+0x28>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800356b 	.word	0x0800356b
 8003550:	08003559 	.word	0x08003559
 8003554:	080035ef 	.word	0x080035ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d046      	beq.n	80035f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e043      	b.n	80035f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003572:	d140      	bne.n	80035f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e03d      	b.n	80035f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003582:	d121      	bne.n	80035c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d837      	bhi.n	80035fa <DMA_CheckFifoParam+0xda>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <DMA_CheckFifoParam+0x70>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a7 	.word	0x080035a7
 8003598:	080035a1 	.word	0x080035a1
 800359c:	080035b9 	.word	0x080035b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e030      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d025      	beq.n	80035fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e022      	b.n	80035fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035c6:	e01c      	b.n	8003602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d903      	bls.n	80035d6 <DMA_CheckFifoParam+0xb6>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d003      	beq.n	80035dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035d4:	e018      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      break;
 80035da:	e015      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e00b      	b.n	8003606 <DMA_CheckFifoParam+0xe6>
      break;
 80035ee:	bf00      	nop
 80035f0:	e00a      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e008      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e006      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;   
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
    }
  } 
  
  return status; 
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e16b      	b.n	800390c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 815a 	bne.w	8003906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	2b02      	cmp	r3, #2
 8003668:	d130      	bne.n	80036cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0201 	and.w	r2, r3, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d017      	beq.n	8003708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b4 	beq.w	8003906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b60      	ldr	r3, [pc, #384]	@ (8003924 <HAL_GPIO_Init+0x30c>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003924 <HAL_GPIO_Init+0x30c>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003924 <HAL_GPIO_Init+0x30c>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_GPIO_Init+0x310>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	@ (800392c <HAL_GPIO_Init+0x314>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_GPIO_Init+0x226>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a51      	ldr	r2, [pc, #324]	@ (8003930 <HAL_GPIO_Init+0x318>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x222>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a50      	ldr	r2, [pc, #320]	@ (8003934 <HAL_GPIO_Init+0x31c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x21e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003938 <HAL_GPIO_Init+0x320>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x21a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4e      	ldr	r2, [pc, #312]	@ (800393c <HAL_GPIO_Init+0x324>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x216>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4d      	ldr	r2, [pc, #308]	@ (8003940 <HAL_GPIO_Init+0x328>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x212>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4c      	ldr	r2, [pc, #304]	@ (8003944 <HAL_GPIO_Init+0x32c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x20e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4b      	ldr	r2, [pc, #300]	@ (8003948 <HAL_GPIO_Init+0x330>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x20a>
 800381e:	2307      	movs	r3, #7
 8003820:	e00e      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003822:	2308      	movs	r3, #8
 8003824:	e00c      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003826:	2306      	movs	r3, #6
 8003828:	e00a      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382a:	2305      	movs	r3, #5
 800382c:	e008      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382e:	2304      	movs	r3, #4
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003832:	2303      	movs	r3, #3
 8003834:	e004      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003836:	2302      	movs	r3, #2
 8003838:	e002      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383e:	2300      	movs	r3, #0
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f002 0203 	and.w	r2, r2, #3
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	4093      	lsls	r3, r2
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003850:	4935      	ldr	r1, [pc, #212]	@ (8003928 <HAL_GPIO_Init+0x310>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_GPIO_Init+0x334>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003882:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_GPIO_Init+0x334>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003888:	4b30      	ldr	r3, [pc, #192]	@ (800394c <HAL_GPIO_Init+0x334>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ac:	4a27      	ldr	r2, [pc, #156]	@ (800394c <HAL_GPIO_Init+0x334>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_GPIO_Init+0x334>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d6:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_GPIO_Init+0x334>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003900:	4a12      	ldr	r2, [pc, #72]	@ (800394c <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	f67f ae90 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3724      	adds	r7, #36	@ 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40013800 	.word	0x40013800
 800392c:	40020000 	.word	0x40020000
 8003930:	40020400 	.word	0x40020400
 8003934:	40020800 	.word	0x40020800
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40021000 	.word	0x40021000
 8003940:	40021400 	.word	0x40021400
 8003944:	40021800 	.word	0x40021800
 8003948:	40021c00 	.word	0x40021c00
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e267      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d075      	beq.n	8003a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a2:	4b88      	ldr	r3, [pc, #544]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d00c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b85      	ldr	r3, [pc, #532]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d112      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b82      	ldr	r3, [pc, #520]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d05b      	beq.n	8003a8c <HAL_RCC_OscConfig+0x108>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d157      	bne.n	8003a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e242      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d106      	bne.n	80039f8 <HAL_RCC_OscConfig+0x74>
 80039ea:	4b76      	ldr	r3, [pc, #472]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a75      	ldr	r2, [pc, #468]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e01d      	b.n	8003a34 <HAL_RCC_OscConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x98>
 8003a02:	4b70      	ldr	r3, [pc, #448]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6f      	ldr	r2, [pc, #444]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a65      	ldr	r2, [pc, #404]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe faea 	bl	8002014 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe fae6 	bl	8002014 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	@ 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e207      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0xc0>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fe fad6 	bl	8002014 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fad2 	bl	8002014 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	@ 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1f3      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	4b51      	ldr	r3, [pc, #324]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0xe8>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d063      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b47      	ldr	r3, [pc, #284]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11c      	bne.n	8003aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b44      	ldr	r3, [pc, #272]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d116      	bne.n	8003aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abe:	4b41      	ldr	r3, [pc, #260]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x152>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e1c7      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4937      	ldr	r1, [pc, #220]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	e03a      	b.n	8003b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af4:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCC_OscConfig+0x244>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fe fa8b 	bl	8002014 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fe fa87 	bl	8002014 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1a8      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b28      	ldr	r3, [pc, #160]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4925      	ldr	r1, [pc, #148]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b36:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <HAL_RCC_OscConfig+0x244>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fa6a 	bl	8002014 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fe fa66 	bl	8002014 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e187      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d036      	beq.n	8003bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_RCC_OscConfig+0x248>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fa4a 	bl	8002014 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fe fa46 	bl	8002014 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e167      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCC_OscConfig+0x240>)
 8003b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x200>
 8003ba2:	e01b      	b.n	8003bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_OscConfig+0x248>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fa33 	bl	8002014 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	e00e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fa2f 	bl	8002014 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d907      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e150      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
 8003bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b88      	ldr	r3, [pc, #544]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ea      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8097 	beq.w	8003d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b81      	ldr	r3, [pc, #516]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10f      	bne.n	8003c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	4a7c      	ldr	r2, [pc, #496]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b77      	ldr	r3, [pc, #476]	@ (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b74      	ldr	r3, [pc, #464]	@ (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a73      	ldr	r2, [pc, #460]	@ (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fe f9ef 	bl	8002014 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fe f9eb 	bl	8002014 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e10c      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003df8 <HAL_RCC_OscConfig+0x474>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2ea>
 8003c60:	4b64      	ldr	r3, [pc, #400]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a63      	ldr	r2, [pc, #396]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6c:	e01c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x324>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x30c>
 8003c76:	4b5f      	ldr	r3, [pc, #380]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 0304 	orr.w	r3, r3, #4
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c82:	4b5c      	ldr	r3, [pc, #368]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	4a5b      	ldr	r2, [pc, #364]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x324>
 8003c90:	4b58      	ldr	r3, [pc, #352]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	4b55      	ldr	r3, [pc, #340]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	4a54      	ldr	r2, [pc, #336]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 0304 	bic.w	r3, r3, #4
 8003ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d015      	beq.n	8003cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe f9b0 	bl	8002014 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f9ac 	bl	8002014 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0cb      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	4b49      	ldr	r3, [pc, #292]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ee      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x334>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f99a 	bl	8002014 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fe f996 	bl	8002014 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0b5      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ee      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b39      	ldr	r3, [pc, #228]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	4a38      	ldr	r2, [pc, #224]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a1 	beq.w	8003e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d22:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d05c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d141      	bne.n	8003dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b31      	ldr	r3, [pc, #196]	@ (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe f96a 	bl	8002014 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fe f966 	bl	8002014 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e087      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	491b      	ldr	r1, [pc, #108]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fe f93f 	bl	8002014 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe f93b 	bl	8002014 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e05c      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x416>
 8003db8:	e054      	b.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <HAL_RCC_OscConfig+0x478>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f928 	bl	8002014 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe f924 	bl	8002014 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e045      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x444>
 8003de6:	e03d      	b.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e038      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e00:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_RCC_OscConfig+0x4ec>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d121      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d11a      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d111      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800

08003e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0cc      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b68      	ldr	r3, [pc, #416]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d90c      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b65      	ldr	r3, [pc, #404]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b63      	ldr	r3, [pc, #396]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0b8      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec8:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a58      	ldr	r2, [pc, #352]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee0:	4b53      	ldr	r3, [pc, #332]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b50      	ldr	r3, [pc, #320]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	494d      	ldr	r1, [pc, #308]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d044      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b47      	ldr	r3, [pc, #284]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d119      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e07f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b3f      	ldr	r3, [pc, #252]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3b      	ldr	r3, [pc, #236]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e067      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b37      	ldr	r3, [pc, #220]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4934      	ldr	r1, [pc, #208]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f64:	f7fe f856 	bl	8002014 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fe f852 	bl	8002014 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e04f      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b25      	ldr	r3, [pc, #148]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d20c      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b22      	ldr	r3, [pc, #136]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e032      	b.n	8004022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4916      	ldr	r1, [pc, #88]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe6:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	490e      	ldr	r1, [pc, #56]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ffa:	f000 f821 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	490a      	ldr	r1, [pc, #40]	@ (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	5ccb      	ldrb	r3, [r1, r3]
 800400e:	fa22 f303 	lsr.w	r3, r2, r3
 8004012:	4a09      	ldr	r2, [pc, #36]	@ (8004038 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004016:	4b09      	ldr	r3, [pc, #36]	@ (800403c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd ffb6 	bl	8001f8c <HAL_InitTick>

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023c00 	.word	0x40023c00
 8004030:	40023800 	.word	0x40023800
 8004034:	08005c50 	.word	0x08005c50
 8004038:	20000004 	.word	0x20000004
 800403c:	20000008 	.word	0x20000008

08004040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b090      	sub	sp, #64	@ 0x40
 8004046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
 800404c:	2300      	movs	r3, #0
 800404e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004058:	4b59      	ldr	r3, [pc, #356]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b08      	cmp	r3, #8
 8004062:	d00d      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x40>
 8004064:	2b08      	cmp	r3, #8
 8004066:	f200 80a1 	bhi.w	80041ac <HAL_RCC_GetSysClockFreq+0x16c>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x34>
 800406e:	2b04      	cmp	r3, #4
 8004070:	d003      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0x3a>
 8004072:	e09b      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004078:	e09b      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800407a:	4b53      	ldr	r3, [pc, #332]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800407c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800407e:	e098      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004080:	4b4f      	ldr	r3, [pc, #316]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800408a:	4b4d      	ldr	r3, [pc, #308]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d028      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004096:	4b4a      	ldr	r3, [pc, #296]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	2200      	movs	r2, #0
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040a8:	2100      	movs	r1, #0
 80040aa:	4b47      	ldr	r3, [pc, #284]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040ac:	fb03 f201 	mul.w	r2, r3, r1
 80040b0:	2300      	movs	r3, #0
 80040b2:	fb00 f303 	mul.w	r3, r0, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	4a43      	ldr	r2, [pc, #268]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040ba:	fba0 1202 	umull	r1, r2, r0, r2
 80040be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c0:	460a      	mov	r2, r1
 80040c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c6:	4413      	add	r3, r2
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040cc:	2200      	movs	r2, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	61fa      	str	r2, [r7, #28]
 80040d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040da:	f7fc fc93 	bl	8000a04 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4613      	mov	r3, r2
 80040e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e6:	e053      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	2200      	movs	r2, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	617a      	str	r2, [r7, #20]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040fa:	f04f 0b00 	mov.w	fp, #0
 80040fe:	4652      	mov	r2, sl
 8004100:	465b      	mov	r3, fp
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	0159      	lsls	r1, r3, #5
 800410c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004110:	0150      	lsls	r0, r2, #5
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	ebb2 080a 	subs.w	r8, r2, sl
 800411a:	eb63 090b 	sbc.w	r9, r3, fp
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800412a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800412e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004132:	ebb2 0408 	subs.w	r4, r2, r8
 8004136:	eb63 0509 	sbc.w	r5, r3, r9
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	00eb      	lsls	r3, r5, #3
 8004144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004148:	00e2      	lsls	r2, r4, #3
 800414a:	4614      	mov	r4, r2
 800414c:	461d      	mov	r5, r3
 800414e:	eb14 030a 	adds.w	r3, r4, sl
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	eb45 030b 	adc.w	r3, r5, fp
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004166:	4629      	mov	r1, r5
 8004168:	028b      	lsls	r3, r1, #10
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004170:	4621      	mov	r1, r4
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	2200      	movs	r2, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	60fa      	str	r2, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	f7fc fc3e 	bl	8000a04 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3740      	adds	r7, #64	@ 0x40
 80041b8:	46bd      	mov	sp, r7
 80041ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	00b71b00 	.word	0x00b71b00

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	08005c60 	.word	0x08005c60

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffdc 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0b5b      	lsrs	r3, r3, #13
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	08005c60 	.word	0x08005c60

08004234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e041      	b.n	80042ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd fd40 	bl	8001ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f000 fa7e 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e04e      	b.n	800438a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <HAL_TIM_Base_Start_IT+0xc4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d022      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004316:	d01d      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1f      	ldr	r2, [pc, #124]	@ (800439c <HAL_TIM_Base_Start_IT+0xc8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d018      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1e      	ldr	r2, [pc, #120]	@ (80043a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d111      	bne.n	8004378 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b06      	cmp	r3, #6
 8004364:	d010      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	e007      	b.n	8004388 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40010400 	.word	0x40010400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40001800 	.word	0x40001800

080043b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0202 	mvn.w	r2, #2
 80043e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f999 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f98b 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f99c 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d020      	beq.n	8004464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0204 	mvn.w	r2, #4
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f973 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f965 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f976 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f94d 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f93f 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f950 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d020      	beq.n	80044fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2208      	movs	r2, #8
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f927 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f919 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f92a 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0201 	mvn.w	r2, #1
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fabe 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fae4 	bl	8004b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8fb 	bl	800475e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0220 	mvn.w	r2, #32
 8004584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fab6 	bl	8004af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIM_ConfigClockSource+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0b4      	b.n	800471a <HAL_TIM_ConfigClockSource+0x186>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e8:	d03e      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0xd4>
 80045ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ee:	f200 8087 	bhi.w	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	f000 8086 	beq.w	8004706 <HAL_TIM_ConfigClockSource+0x172>
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fe:	d87f      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004600:	2b70      	cmp	r3, #112	@ 0x70
 8004602:	d01a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xa6>
 8004604:	2b70      	cmp	r3, #112	@ 0x70
 8004606:	d87b      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004608:	2b60      	cmp	r3, #96	@ 0x60
 800460a:	d050      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x11a>
 800460c:	2b60      	cmp	r3, #96	@ 0x60
 800460e:	d877      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b50      	cmp	r3, #80	@ 0x50
 8004612:	d03c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0xfa>
 8004614:	2b50      	cmp	r3, #80	@ 0x50
 8004616:	d873      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b40      	cmp	r3, #64	@ 0x40
 800461a:	d058      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x13a>
 800461c:	2b40      	cmp	r3, #64	@ 0x40
 800461e:	d86f      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b30      	cmp	r3, #48	@ 0x30
 8004622:	d064      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15a>
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d86b      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b20      	cmp	r3, #32
 800462a:	d060      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d867      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d05c      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15a>
 8004634:	2b10      	cmp	r3, #16
 8004636:	d05a      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	e062      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	f000 f9b9 	bl	80049c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800465c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	609a      	str	r2, [r3, #8]
      break;
 8004666:	e04f      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	f000 f9a2 	bl	80049c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468a:	609a      	str	r2, [r3, #8]
      break;
 800468c:	e03c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	461a      	mov	r2, r3
 800469c:	f000 f916 	bl	80048cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2150      	movs	r1, #80	@ 0x50
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f96f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046ac:	e02c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 f935 	bl	800492a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2160      	movs	r1, #96	@ 0x60
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f95f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046cc:	e01c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 f8f6 	bl	80048cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2140      	movs	r1, #64	@ 0x40
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f94f 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046ec:	e00c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 f946 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046fe:	e003      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e000      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a46      	ldr	r2, [pc, #280]	@ (80048a0 <TIM_Base_SetConfig+0x12c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d00f      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a43      	ldr	r2, [pc, #268]	@ (80048a4 <TIM_Base_SetConfig+0x130>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <TIM_Base_SetConfig+0x134>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a41      	ldr	r2, [pc, #260]	@ (80048ac <TIM_Base_SetConfig+0x138>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a40      	ldr	r2, [pc, #256]	@ (80048b0 <TIM_Base_SetConfig+0x13c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <TIM_Base_SetConfig+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d4:	d027      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a32      	ldr	r2, [pc, #200]	@ (80048a4 <TIM_Base_SetConfig+0x130>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d023      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a31      	ldr	r2, [pc, #196]	@ (80048a8 <TIM_Base_SetConfig+0x134>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <TIM_Base_SetConfig+0x138>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2f      	ldr	r2, [pc, #188]	@ (80048b0 <TIM_Base_SetConfig+0x13c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d017      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <TIM_Base_SetConfig+0x140>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2d      	ldr	r2, [pc, #180]	@ (80048b8 <TIM_Base_SetConfig+0x144>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2c      	ldr	r2, [pc, #176]	@ (80048bc <TIM_Base_SetConfig+0x148>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2b      	ldr	r2, [pc, #172]	@ (80048c0 <TIM_Base_SetConfig+0x14c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <TIM_Base_SetConfig+0x150>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a29      	ldr	r2, [pc, #164]	@ (80048c8 <TIM_Base_SetConfig+0x154>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <TIM_Base_SetConfig+0x12c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0xf8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a12      	ldr	r2, [pc, #72]	@ (80048b0 <TIM_Base_SetConfig+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]
  }
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40001800 	.word	0x40001800
 80048c4:	40001c00 	.word	0x40001c00
 80048c8:	40002000 	.word	0x40002000

080048cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 030a 	bic.w	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0210 	bic.w	r2, r3, #16
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e05a      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a21      	ldr	r2, [pc, #132]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d01d      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10c      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40010400 	.word	0x40010400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40001800 	.word	0x40001800

08004af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e042      	b.n	8004bb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd f91c 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fd11 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08c      	sub	sp, #48	@ 0x30
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d14a      	bne.n	8004c70 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e043      	b.n	8004c72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 faed 	bl	80051dc <UART_Start_Receive_IT>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d12c      	bne.n	8004c6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d125      	bne.n	8004c64 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f043 0310 	orr.w	r3, r3, #16
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6a39      	ldr	r1, [r7, #32]
 8004c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004c62:	e002      	b.n	8004c6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c6e:	e000      	b.n	8004c72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3730      	adds	r7, #48	@ 0x30
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x66>
 8004cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fb97 	bl	800540e <UART_Receive_IT>
      return;
 8004ce0:	e25b      	b.n	800519a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80de 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x22c>
 8004cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80d1 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_UART_IRQHandler+0xae>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	f043 0201 	orr.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_UART_IRQHandler+0xd2>
 8004d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	f043 0202 	orr.w	r2, r3, #2
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_UART_IRQHandler+0xf6>
 8004d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	f043 0204 	orr.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d011      	beq.n	8004da2 <HAL_UART_IRQHandler+0x126>
 8004d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f043 0208 	orr.w	r2, r3, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 81f2 	beq.w	8005190 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_UART_IRQHandler+0x14e>
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb22 	bl	800540e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <HAL_UART_IRQHandler+0x17a>
 8004dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04f      	beq.n	8004e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa2a 	bl	8005250 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d141      	bne.n	8004e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1d9      	bne.n	8004e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d013      	beq.n	8004e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	4a7e      	ldr	r2, [pc, #504]	@ (800505c <HAL_UART_IRQHandler+0x3e0>)
 8004e64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe f976 	bl	800315c <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d016      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e00e      	b.n	8004ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f99e 	bl	80051c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00a      	b.n	8004ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f99a 	bl	80051c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e006      	b.n	8004ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f996 	bl	80051c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ea2:	e175      	b.n	8005190 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	bf00      	nop
    return;
 8004ea6:	e173      	b.n	8005190 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 814f 	bne.w	8005150 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8148 	beq.w	8005150 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8141 	beq.w	8005150 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eee:	2b40      	cmp	r3, #64	@ 0x40
 8004ef0:	f040 80b6 	bne.w	8005060 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8145 	beq.w	8005194 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f12:	429a      	cmp	r2, r3
 8004f14:	f080 813e 	bcs.w	8005194 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2a:	f000 8088 	beq.w	800503e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1d9      	bne.n	8004f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e1      	bne.n	8004f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e3      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800500c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005020:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005022:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005026:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800502e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e3      	bne.n	8004ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe f81f 	bl	800307c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800504c:	b29b      	uxth	r3, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fc fbcf 	bl	80017f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800505a:	e09b      	b.n	8005194 <HAL_UART_IRQHandler+0x518>
 800505c:	08005317 	.word	0x08005317
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808e 	beq.w	8005198 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800507c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8089 	beq.w	8005198 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800509c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80050ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	617b      	str	r3, [r7, #20]
   return(result);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e3      	bne.n	8005104 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fc fb55 	bl	80017f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800514e:	e023      	b.n	8005198 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_UART_IRQHandler+0x4f4>
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8e8 	bl	800533e <UART_Transmit_IT>
    return;
 800516e:	e014      	b.n	800519a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <HAL_UART_IRQHandler+0x51e>
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f928 	bl	80053de <UART_EndTransmit_IT>
    return;
 800518e:	e004      	b.n	800519a <HAL_UART_IRQHandler+0x51e>
    return;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_UART_IRQHandler+0x51e>
      return;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_UART_IRQHandler+0x51e>
      return;
 8005198:	bf00      	nop
  }
}
 800519a:	37e8      	adds	r7, #232	@ 0xe8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2222      	movs	r2, #34	@ 0x22
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005220:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0220 	orr.w	r2, r2, #32
 8005240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b095      	sub	sp, #84	@ 0x54
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005278:	643a      	str	r2, [r7, #64]	@ 0x40
 800527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800527e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	61fb      	str	r3, [r7, #28]
   return(result);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d119      	bne.n	80052fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e8:	61ba      	str	r2, [r7, #24]
 80052ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	613b      	str	r3, [r7, #16]
   return(result);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800530a:	bf00      	nop
 800530c:	3754      	adds	r7, #84	@ 0x54
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff49 	bl	80051c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b21      	cmp	r3, #33	@ 0x21
 8005350:	d13e      	bne.n	80053d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800535a:	d114      	bne.n	8005386 <UART_Transmit_IT+0x48>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d110      	bne.n	8005386 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005378:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	621a      	str	r2, [r3, #32]
 8005384:	e008      	b.n	8005398 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6211      	str	r1, [r2, #32]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4619      	mov	r1, r3
 80053a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fece 	bl	80051a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08c      	sub	sp, #48	@ 0x30
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b22      	cmp	r3, #34	@ 0x22
 8005420:	f040 80ae 	bne.w	8005580 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542c:	d117      	bne.n	800545e <UART_Receive_IT+0x50>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d113      	bne.n	800545e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544c:	b29a      	uxth	r2, r3
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	@ 0x28
 800545c:	e026      	b.n	80054ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d007      	beq.n	8005482 <UART_Receive_IT+0x74>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <UART_Receive_IT+0x82>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e008      	b.n	80054a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549c:	b2da      	uxtb	r2, r3
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4619      	mov	r1, r3
 80054ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d15d      	bne.n	800557c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0220 	bic.w	r2, r2, #32
 80054ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	2b01      	cmp	r3, #1
 8005504:	d135      	bne.n	8005572 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	613b      	str	r3, [r7, #16]
   return(result);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 0310 	bic.w	r3, r3, #16
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	623a      	str	r2, [r7, #32]
 800552e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	69f9      	ldr	r1, [r7, #28]
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	61bb      	str	r3, [r7, #24]
   return(result);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b10      	cmp	r3, #16
 800554c:	d10a      	bne.n	8005564 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc f944 	bl	80017f8 <HAL_UARTEx_RxEventCallback>
 8005570:	e002      	b.n	8005578 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe1e 	bl	80051b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e002      	b.n	8005582 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3730      	adds	r7, #48	@ 0x30
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b0c0      	sub	sp, #256	@ 0x100
 8005592:	af00      	add	r7, sp, #0
 8005594:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	68d9      	ldr	r1, [r3, #12]
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	ea40 0301 	orr.w	r3, r0, r1
 80055b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055e4:	f021 010c 	bic.w	r1, r1, #12
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055f2:	430b      	orrs	r3, r1
 80055f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	6999      	ldr	r1, [r3, #24]
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	ea40 0301 	orr.w	r3, r0, r1
 8005612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b8f      	ldr	r3, [pc, #572]	@ (8005858 <UART_SetConfig+0x2cc>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d005      	beq.n	800562c <UART_SetConfig+0xa0>
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b8d      	ldr	r3, [pc, #564]	@ (800585c <UART_SetConfig+0x2d0>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d104      	bne.n	8005636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fe fdee 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8005630:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005634:	e003      	b.n	800563e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7fe fdd5 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 800563a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005648:	f040 810c 	bne.w	8005864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005650:	2200      	movs	r2, #0
 8005652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005656:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800565a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005666:	415b      	adcs	r3, r3
 8005668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800566e:	4621      	mov	r1, r4
 8005670:	eb12 0801 	adds.w	r8, r2, r1
 8005674:	4629      	mov	r1, r5
 8005676:	eb43 0901 	adc.w	r9, r3, r1
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	4623      	mov	r3, r4
 8005694:	eb18 0303 	adds.w	r3, r8, r3
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800569c:	462b      	mov	r3, r5
 800569e:	eb49 0303 	adc.w	r3, r9, r3
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ba:	460b      	mov	r3, r1
 80056bc:	18db      	adds	r3, r3, r3
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c0:	4613      	mov	r3, r2
 80056c2:	eb42 0303 	adc.w	r3, r2, r3
 80056c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056d0:	f7fb f998 	bl	8000a04 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b61      	ldr	r3, [pc, #388]	@ (8005860 <UART_SetConfig+0x2d4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056fc:	415b      	adcs	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005704:	4641      	mov	r1, r8
 8005706:	eb12 0a01 	adds.w	sl, r2, r1
 800570a:	4649      	mov	r1, r9
 800570c:	eb43 0b01 	adc.w	fp, r3, r1
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800571c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005724:	4692      	mov	sl, r2
 8005726:	469b      	mov	fp, r3
 8005728:	4643      	mov	r3, r8
 800572a:	eb1a 0303 	adds.w	r3, sl, r3
 800572e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005732:	464b      	mov	r3, r9
 8005734:	eb4b 0303 	adc.w	r3, fp, r3
 8005738:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005748:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800574c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005750:	460b      	mov	r3, r1
 8005752:	18db      	adds	r3, r3, r3
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
 8005756:	4613      	mov	r3, r2
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	647b      	str	r3, [r7, #68]	@ 0x44
 800575e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005766:	f7fb f94d 	bl	8000a04 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005786:	4b36      	ldr	r3, [pc, #216]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005788:	fba3 2302 	umull	r2, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005794:	441c      	add	r4, r3
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057b0:	415b      	adcs	r3, r3
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005804:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800580c:	460b      	mov	r3, r1
 800580e:	18db      	adds	r3, r3, r3
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005812:	4613      	mov	r3, r2
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800581e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005822:	f7fb f8ef 	bl	8000a04 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <UART_SetConfig+0x2d4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	@ 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3332      	adds	r3, #50	@ 0x32
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0207 	and.w	r2, r3, #7
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4422      	add	r2, r4
 8005852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005854:	e106      	b.n	8005a64 <UART_SetConfig+0x4d8>
 8005856:	bf00      	nop
 8005858:	40011000 	.word	0x40011000
 800585c:	40011400 	.word	0x40011400
 8005860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800586e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	1891      	adds	r1, r2, r2
 800587c:	6239      	str	r1, [r7, #32]
 800587e:	415b      	adcs	r3, r3
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
 8005882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005886:	4641      	mov	r1, r8
 8005888:	1854      	adds	r4, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb43 0501 	adc.w	r5, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	00eb      	lsls	r3, r5, #3
 800589a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800589e:	00e2      	lsls	r2, r4, #3
 80058a0:	4614      	mov	r4, r2
 80058a2:	461d      	mov	r5, r3
 80058a4:	4643      	mov	r3, r8
 80058a6:	18e3      	adds	r3, r4, r3
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058ac:	464b      	mov	r3, r9
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058d2:	4629      	mov	r1, r5
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	4621      	mov	r1, r4
 80058d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058dc:	4621      	mov	r1, r4
 80058de:	008a      	lsls	r2, r1, #2
 80058e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058e4:	f7fb f88e 	bl	8000a04 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011c      	lsls	r4, r3, #4
 80058f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	1891      	adds	r1, r2, r2
 800590e:	61b9      	str	r1, [r7, #24]
 8005910:	415b      	adcs	r3, r3
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005918:	4641      	mov	r1, r8
 800591a:	1851      	adds	r1, r2, r1
 800591c:	6139      	str	r1, [r7, #16]
 800591e:	4649      	mov	r1, r9
 8005920:	414b      	adcs	r3, r1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005930:	4659      	mov	r1, fp
 8005932:	00cb      	lsls	r3, r1, #3
 8005934:	4651      	mov	r1, sl
 8005936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593a:	4651      	mov	r1, sl
 800593c:	00ca      	lsls	r2, r1, #3
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	4603      	mov	r3, r0
 8005944:	4642      	mov	r2, r8
 8005946:	189b      	adds	r3, r3, r2
 8005948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800594c:	464b      	mov	r3, r9
 800594e:	460a      	mov	r2, r1
 8005950:	eb42 0303 	adc.w	r3, r2, r3
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005962:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005982:	f7fb f83f 	bl	8000a04 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4611      	mov	r1, r2
 800598c:	4b38      	ldr	r3, [pc, #224]	@ (8005a70 <UART_SetConfig+0x4e4>)
 800598e:	fba3 2301 	umull	r2, r3, r3, r1
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2264      	movs	r2, #100	@ 0x64
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	1acb      	subs	r3, r1, r3
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	3332      	adds	r3, #50	@ 0x32
 80059a0:	4a33      	ldr	r2, [pc, #204]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059ac:	441c      	add	r4, r3
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	2200      	movs	r2, #0
 80059b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	415b      	adcs	r3, r3
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059cc:	4641      	mov	r1, r8
 80059ce:	1851      	adds	r1, r2, r1
 80059d0:	6039      	str	r1, [r7, #0]
 80059d2:	4649      	mov	r1, r9
 80059d4:	414b      	adcs	r3, r1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e4:	4659      	mov	r1, fp
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4651      	mov	r1, sl
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4642      	mov	r2, r8
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	464b      	mov	r3, r9
 8005a00:	460a      	mov	r2, r1
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a12:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a20:	4649      	mov	r1, r9
 8005a22:	008b      	lsls	r3, r1, #2
 8005a24:	4641      	mov	r1, r8
 8005a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	008a      	lsls	r2, r1, #2
 8005a2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a32:	f7fa ffe7 	bl	8000a04 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	@ 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	3332      	adds	r3, #50	@ 0x32
 8005a4e:	4a08      	ldr	r2, [pc, #32]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4422      	add	r2, r4
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a70:	51eb851f 	.word	0x51eb851f

08005a74 <Pid_Calculate>:
#include "pid.h"
#include <main.h>
#include <Bsp_can.h>
#include "stdio.h"
float Pid_Calculate(PID_Typedef *pid, float get, float set)
{
 8005a74:	b5b0      	push	{r4, r5, r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a80:	edc7 0a01 	vstr	s1, [r7, #4]
//	uint8_t flag = 0;
	//get input
	pid->input.get = get;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
	pid->input.set = set;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	pid->input.last_err = pid->input.err;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	60da      	str	r2, [r3, #12]
	pid->input.err = set - get;
 8005a98:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	edc3 7a02 	vstr	s15, [r3, #8]

	if ((pid->limit.max_err_input != 0) && (fabs(pid->input.err) > pid->limit.max_err_input))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005ab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	d00f      	beq.n	8005ada <Pid_Calculate+0x66>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ac0:	eeb0 7ae7 	vabs.f32	s14, s15
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	dd02      	ble.n	8005ada <Pid_Calculate+0x66>
		return 0;
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e076      	b.n	8005bc8 <Pid_Calculate+0x154>

	//output calculate
	pid->output.p_out  = pid->param.Kp * pid->input.err;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->output.i_out += pid->param.Ki * pid->input.err;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	edd3 6a06 	vldr	s13, [r3, #24]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->output.d_out  = pid->param.Kd * (pid->input.err - pid->input.last_err) * 1000;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	ed93 7a07 	vldr	s14, [r3, #28]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005bd8 <Pid_Calculate+0x164>
 8005b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	//output limit
	pid->output.i_out	  = limit_control(pid->output.i_out, pid->limit.max_i_out);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fa fca7 	bl	8000490 <__aeabi_f2d>
 8005b42:	4604      	mov	r4, r0
 8005b44:	460d      	mov	r5, r1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fa fca0 	bl	8000490 <__aeabi_f2d>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	ec43 2b11 	vmov	d1, r2, r3
 8005b58:	ec45 4b10 	vmov	d0, r4, r5
 8005b5c:	f7fb f9b4 	bl	8000ec8 <limit_control>
 8005b60:	ee07 0a90 	vmov	s15, r0
 8005b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->output.total_out = pid->output.p_out + pid->output.i_out + pid->output.d_out;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	ed93 7a08 	vldr	s14, [r3, #32]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	pid->output.total_out = limit_control(pid->output.total_out, pid->limit.max_total_out);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fa fc7c 	bl	8000490 <__aeabi_f2d>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fc75 	bl	8000490 <__aeabi_f2d>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	ec43 2b11 	vmov	d1, r2, r3
 8005bae:	ec45 4b10 	vmov	d0, r4, r5
 8005bb2:	f7fb f989 	bl	8000ec8 <limit_control>
 8005bb6:	ee07 0a90 	vmov	s15, r0
 8005bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	return pid->output.total_out;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	447a0000 	.word	0x447a0000

08005bdc <memset>:
 8005bdc:	4402      	add	r2, r0
 8005bde:	4603      	mov	r3, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4d0d      	ldr	r5, [pc, #52]	@ (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8005c30 <__libc_init_array+0x44>)
 8005c00:	f000 f818 	bl	8005c34 <_init>
 8005c04:	1b64      	subs	r4, r4, r5
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2600      	movs	r6, #0
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	08005c78 	.word	0x08005c78
 8005c28:	08005c78 	.word	0x08005c78
 8005c2c:	08005c78 	.word	0x08005c78
 8005c30:	08005c7c 	.word	0x08005c7c

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

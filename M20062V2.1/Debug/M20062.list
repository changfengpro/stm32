
M20062.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d2c  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef4  08003ef4  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef8  08003ef8  00004ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003efc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005024  2**0
                  CONTENTS
 10 .bss          0000017c  20000024  20000024  00005024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00005024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c522  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210f  00000000  00000000  00011576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00013688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000919  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd9  00000000  00000000  00014b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e056  00000000  00000000  00037762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d45c2  00000000  00000000  000457b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119d7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031c0  00000000  00000000  00119dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  0011cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000024 	.word	0x20000024
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ec4 	.word	0x08003ec4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000028 	.word	0x20000028
 80001ec:	08003ec4 	.word	0x08003ec4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b96a 	b.w	8000d18 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	460c      	mov	r4, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d14e      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a68:	4694      	mov	ip, r2
 8000a6a:	458c      	cmp	ip, r1
 8000a6c:	4686      	mov	lr, r0
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	d962      	bls.n	8000b3a <__udivmoddi4+0xde>
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0320 	rsb	r3, r2, #32
 8000a7a:	4091      	lsls	r1, r2
 8000a7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a84:	4319      	orrs	r1, r3
 8000a86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8e:	fa1f f68c 	uxth.w	r6, ip
 8000a92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb04 f106 	mul.w	r1, r4, r6
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ab2:	f080 8112 	bcs.w	8000cda <__udivmoddi4+0x27e>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 810f 	bls.w	8000cda <__udivmoddi4+0x27e>
 8000abc:	3c02      	subs	r4, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a59      	subs	r1, r3, r1
 8000ac2:	fa1f f38e 	uxth.w	r3, lr
 8000ac6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb00 f606 	mul.w	r6, r0, r6
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x94>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae2:	f080 80fc 	bcs.w	8000cde <__udivmoddi4+0x282>
 8000ae6:	429e      	cmp	r6, r3
 8000ae8:	f240 80f9 	bls.w	8000cde <__udivmoddi4+0x282>
 8000aec:	4463      	add	r3, ip
 8000aee:	3802      	subs	r0, #2
 8000af0:	1b9b      	subs	r3, r3, r6
 8000af2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000af6:	2100      	movs	r1, #0
 8000af8:	b11d      	cbz	r5, 8000b02 <__udivmoddi4+0xa6>
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	2200      	movs	r2, #0
 8000afe:	e9c5 3200 	strd	r3, r2, [r5]
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d905      	bls.n	8000b16 <__udivmoddi4+0xba>
 8000b0a:	b10d      	cbz	r5, 8000b10 <__udivmoddi4+0xb4>
 8000b0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4608      	mov	r0, r1
 8000b14:	e7f5      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b16:	fab3 f183 	clz	r1, r3
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d146      	bne.n	8000bac <__udivmoddi4+0x150>
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xcc>
 8000b22:	4290      	cmp	r0, r2
 8000b24:	f0c0 80f0 	bcc.w	8000d08 <__udivmoddi4+0x2ac>
 8000b28:	1a86      	subs	r6, r0, r2
 8000b2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d0e6      	beq.n	8000b02 <__udivmoddi4+0xa6>
 8000b34:	e9c5 6300 	strd	r6, r3, [r5]
 8000b38:	e7e3      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	f040 8090 	bne.w	8000c60 <__udivmoddi4+0x204>
 8000b40:	eba1 040c 	sub.w	r4, r1, ip
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa1f f78c 	uxth.w	r7, ip
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b56:	fb08 4416 	mls	r4, r8, r6, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb07 f006 	mul.w	r0, r7, r6
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x11c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x11a>
 8000b70:	4298      	cmp	r0, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2b4>
 8000b76:	4626      	mov	r6, r4
 8000b78:	1a1c      	subs	r4, r3, r0
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b82:	fb08 4410 	mls	r4, r8, r0, r4
 8000b86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8a:	fb00 f707 	mul.w	r7, r0, r7
 8000b8e:	429f      	cmp	r7, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x148>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b9a:	d202      	bcs.n	8000ba2 <__udivmoddi4+0x146>
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	f200 80b0 	bhi.w	8000d02 <__udivmoddi4+0x2a6>
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	1bdb      	subs	r3, r3, r7
 8000ba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000baa:	e7a5      	b.n	8000af8 <__udivmoddi4+0x9c>
 8000bac:	f1c1 0620 	rsb	r6, r1, #32
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000bc0:	ea43 030c 	orr.w	r3, r3, ip
 8000bc4:	40f4      	lsrs	r4, r6
 8000bc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bca:	0c38      	lsrs	r0, r7, #16
 8000bcc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd4:	fa1f fc87 	uxth.w	ip, r7
 8000bd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be0:	fb0e f90c 	mul.w	r9, lr, ip
 8000be4:	45a1      	cmp	r9, r4
 8000be6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x1a6>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bf2:	f080 8084 	bcs.w	8000cfe <__udivmoddi4+0x2a2>
 8000bf6:	45a1      	cmp	r9, r4
 8000bf8:	f240 8081 	bls.w	8000cfe <__udivmoddi4+0x2a2>
 8000bfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	eba4 0409 	sub.w	r4, r4, r9
 8000c06:	fa1f f983 	uxth.w	r9, r3
 8000c0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x1d2>
 8000c1e:	193c      	adds	r4, r7, r4
 8000c20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c24:	d267      	bcs.n	8000cf6 <__udivmoddi4+0x29a>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0x29a>
 8000c2a:	3b02      	subs	r3, #2
 8000c2c:	443c      	add	r4, r7
 8000c2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c32:	fba0 9302 	umull	r9, r3, r0, r2
 8000c36:	eba4 040c 	sub.w	r4, r4, ip
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	46ce      	mov	lr, r9
 8000c3e:	469c      	mov	ip, r3
 8000c40:	d351      	bcc.n	8000ce6 <__udivmoddi4+0x28a>
 8000c42:	d04e      	beq.n	8000ce2 <__udivmoddi4+0x286>
 8000c44:	b155      	cbz	r5, 8000c5c <__udivmoddi4+0x200>
 8000c46:	ebb8 030e 	subs.w	r3, r8, lr
 8000c4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c52:	40cb      	lsrs	r3, r1
 8000c54:	431e      	orrs	r6, r3
 8000c56:	40cc      	lsrs	r4, r1
 8000c58:	e9c5 6400 	strd	r6, r4, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e750      	b.n	8000b02 <__udivmoddi4+0xa6>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f103 	lsr.w	r1, r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c70:	4094      	lsls	r4, r2
 8000c72:	430c      	orrs	r4, r1
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7c:	fa1f f78c 	uxth.w	r7, ip
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3110 	mls	r1, r8, r0, r3
 8000c88:	0c23      	lsrs	r3, r4, #16
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f107 	mul.w	r1, r0, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x24c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c9e:	d22c      	bcs.n	8000cfa <__udivmoddi4+0x29e>
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d92a      	bls.n	8000cfa <__udivmoddi4+0x29e>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb01 f307 	mul.w	r3, r1, r7
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x276>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc8:	d213      	bcs.n	8000cf2 <__udivmoddi4+0x296>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d911      	bls.n	8000cf2 <__udivmoddi4+0x296>
 8000cce:	3902      	subs	r1, #2
 8000cd0:	4464      	add	r4, ip
 8000cd2:	1ae4      	subs	r4, r4, r3
 8000cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd8:	e739      	b.n	8000b4e <__udivmoddi4+0xf2>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	e6f0      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e706      	b.n	8000af0 <__udivmoddi4+0x94>
 8000ce2:	45c8      	cmp	r8, r9
 8000ce4:	d2ae      	bcs.n	8000c44 <__udivmoddi4+0x1e8>
 8000ce6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cee:	3801      	subs	r0, #1
 8000cf0:	e7a8      	b.n	8000c44 <__udivmoddi4+0x1e8>
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	e7ed      	b.n	8000cd2 <__udivmoddi4+0x276>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	e799      	b.n	8000c2e <__udivmoddi4+0x1d2>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e7d4      	b.n	8000ca8 <__udivmoddi4+0x24c>
 8000cfe:	46d6      	mov	lr, sl
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1a6>
 8000d02:	4463      	add	r3, ip
 8000d04:	3802      	subs	r0, #2
 8000d06:	e74d      	b.n	8000ba4 <__udivmoddi4+0x148>
 8000d08:	4606      	mov	r6, r0
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e70f      	b.n	8000b30 <__udivmoddi4+0xd4>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	e730      	b.n	8000b78 <__udivmoddi4+0x11c>
 8000d16:	bf00      	nop

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <can_dual_init>:
  * @param  hcan1 指向第一个CAN_HandleTypeDef结构体的指针
  * @param  hcan2 指向第二个CAN_HandleTypeDef结构体的指针
  * @retval None
  */
void can_dual_init(CAN_HandleTypeDef* hcan1, CAN_HandleTypeDef* hcan2)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  CAN_FilterTypeDef  can_filter;

  // 配置CAN1过滤器
  can_filter.FilterBank = 0;                       // 过滤器0
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // 掩码模式
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;  // 32位宽度
 8000d2e:	2301      	movs	r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  can_filter.FilterIdHigh = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // 接收所有CAN ID的消息
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // 分配到FIFO0
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // 启用过滤器
 8000d46:	2301      	movs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  can_filter.SlaveStartFilterBank  = 14;         // 在双CAN模式下，仅在CAN2上配置过滤器时才有意义
 8000d4a:	230e      	movs	r3, #14
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // 初始化CAN1过滤器
  HAL_CAN_ConfigFilter(hcan1, &can_filter);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 ff75 	bl	8001c44 <HAL_CAN_ConfigFilter>

  // 启动CAN1
  HAL_CAN_Start(hcan1);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f001 f852 	bl	8001e04 <HAL_CAN_Start>

  // 启用CAN1接收FIFO0消息挂起中断
  HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d60:	2102      	movs	r1, #2
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f001 fa84 	bl	8002270 <HAL_CAN_ActivateNotification>

  // 配置CAN2过滤器
  can_filter.FilterBank = 15;                      // 过滤器15
 8000d68:	230f      	movs	r3, #15
 8000d6a:	61fb      	str	r3, [r7, #28]
  // 其他配置与CAN1相同

  // 初始化CAN2过滤器
  HAL_CAN_ConfigFilter(hcan2, &can_filter);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f000 ff66 	bl	8001c44 <HAL_CAN_ConfigFilter>

  // 启动CAN2
  HAL_CAN_Start(hcan2);
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f001 f843 	bl	8001e04 <HAL_CAN_Start>

  // 启用CAN2接收FIFO0消息挂起中断
  HAL_CAN_ActivateNotification(hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d7e:	2102      	movs	r1, #2
 8000d80:	6838      	ldr	r0, [r7, #0]
 8000d82:	f001 fa75 	bl	8002270 <HAL_CAN_ActivateNotification>
}
 8000d86:	bf00      	nop
 8000d88:	3730      	adds	r7, #48	@ 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d107      	bne.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	f107 0210 	add.w	r2, r7, #16
 8000daa:	2100      	movs	r1, #0
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f001 f93d 	bl	800202c <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= CAN_2006Moto_ALL_ID)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000db8:	d350      	bcc.n	8000e5c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
   && (rx_header.StdId <  CAN_2006Moto_ALL_ID + MOTOR_MAX_NUM))                  // judge the can id
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	f240 2206 	movw	r2, #518	@ 0x206
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d84b      	bhi.n	8000e5c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
  {
    can_cnt ++;
 8000dc4:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000dce:	801a      	strh	r2, [r3, #0]
    uint8_t index = rx_header.StdId - CAN_2006Moto_ALL_ID;                  // get motor index by can_id
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 8000dd6:	7a3b      	ldrb	r3, [r7, #8]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	7a7b      	ldrb	r3, [r7, #9]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000de8:	b298      	uxth	r0, r3
 8000dea:	494b      	ldr	r1, [pc, #300]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	3304      	adds	r3, #4
 8000df8:	4602      	mov	r2, r0
 8000dfa:	801a      	strh	r2, [r3, #0]
    motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 8000dfc:	7abb      	ldrb	r3, [r7, #10]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b219      	sxth	r1, r3
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	b218      	sxth	r0, r3
 8000e0e:	4942      	ldr	r1, [pc, #264]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	801a      	strh	r2, [r3, #0]
    motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 8000e20:	7b3b      	ldrb	r3, [r7, #12]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b219      	sxth	r1, r3
 8000e26:	7b7b      	ldrb	r3, [r7, #13]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	b218      	sxth	r0, r3
 8000e32:	4939      	ldr	r1, [pc, #228]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3308      	adds	r3, #8
 8000e40:	4602      	mov	r2, r0
 8000e42:	801a      	strh	r2, [r3, #0]
    motor_info[index].temp           =   rx_data[6];
 8000e44:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e48:	7bb8      	ldrb	r0, [r7, #14]
 8000e4a:	4933      	ldr	r1, [pc, #204]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	330a      	adds	r3, #10
 8000e58:	4602      	mov	r2, r0
 8000e5a:	701a      	strb	r2, [r3, #0]
  }
  if ((rx_header.StdId >= FEEDBACK_ID_BASE)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8000e62:	d951      	bls.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
     && (rx_header.StdId <  FEEDBACK_ID_BASE + MOTOR_MAX_NUM))                  // judge the can id
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000e6a:	d24d      	bcs.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
    {
      can_cnt ++;
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000e76:	801a      	strh	r2, [r3, #0]
      uint8_t index = rx_header.StdId - FEEDBACK_ID_BASE;                  // get motor index by can_id
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3b05      	subs	r3, #5
 8000e7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 8000e82:	7a3b      	ldrb	r3, [r7, #8]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	7a7b      	ldrb	r3, [r7, #9]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e94:	b298      	uxth	r0, r3
 8000e96:	4920      	ldr	r1, [pc, #128]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	801a      	strh	r2, [r3, #0]
      motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 8000ea8:	7abb      	ldrb	r3, [r7, #10]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b219      	sxth	r1, r3
 8000eae:	7afb      	ldrb	r3, [r7, #11]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	b218      	sxth	r0, r3
 8000eba:	4917      	ldr	r1, [pc, #92]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3306      	adds	r3, #6
 8000ec8:	4602      	mov	r2, r0
 8000eca:	801a      	strh	r2, [r3, #0]
      motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b219      	sxth	r1, r3
 8000ed2:	7b7b      	ldrb	r3, [r7, #13]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000eda:	430b      	orrs	r3, r1
 8000edc:	b218      	sxth	r0, r3
 8000ede:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	3308      	adds	r3, #8
 8000eec:	4602      	mov	r2, r0
 8000eee:	801a      	strh	r2, [r3, #0]
      motor_info[index].temp           =   rx_data[6];
 8000ef0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000ef4:	7bb8      	ldrb	r0, [r7, #14]
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	330a      	adds	r3, #10
 8000f04:	4602      	mov	r2, r0
 8000f06:	701a      	strb	r2, [r3, #0]
    }

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	@ 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40006400 	.word	0x40006400
 8000f14:	20000094 	.word	0x20000094
 8000f18:	20000040 	.word	0x20000040

08000f1c <set_motor_vaule>:
  * @param  id_range to select can control id 0x1ff or 0x2ff
  * @param  motor voltage 1,2,3,4 or 5,6,7
  * @retval None
  */
void set_motor_vaule(uint16_t tx_ID, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b08b      	sub	sp, #44	@ 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
 8000f36:	4613      	mov	r3, r2
 8000f38:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];

  tx_header.StdId = tx_ID;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	613b      	str	r3, [r7, #16]
  tx_header.IDE   = CAN_ID_STD;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 8000f46:	2308      	movs	r3, #8
 8000f48:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 8000f4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f4e:	121b      	asrs	r3, r3, #8
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8000f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f60:	121b      	asrs	r3, r3, #8
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 8000f6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f72:	121b      	asrs	r3, r3, #8
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 8000f80:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000f84:	121b      	asrs	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 8000f8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0);
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	f107 0110 	add.w	r1, r7, #16
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <set_motor_vaule+0x90>)
 8000f9e:	f000 ff75 	bl	8001e8c <HAL_CAN_AddTxMessage>
}
 8000fa2:	bf00      	nop
 8000fa4:	372c      	adds	r7, #44	@ 0x2c
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000098 	.word	0x20000098

08000fb0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <MX_CAN1_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fd2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fda:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_CAN1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_CAN1_Init+0x64>)
 8001002:	f000 fd23 	bl	8001a4c <HAL_CAN_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800100c:	f000 fb82 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000098 	.word	0x20000098
 8001018:	40006400 	.word	0x40006400

0800101c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001022:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <MX_CAN2_Init+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001028:	2209      	movs	r2, #9
 800102a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_CAN2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_CAN2_Init+0x64>)
 800103a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800103e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001042:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001046:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <MX_CAN2_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_CAN2_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_CAN2_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_CAN2_Init+0x64>)
 800106e:	f000 fced 	bl	8001a4c <HAL_CAN_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001078:	f000 fb4c 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000c0 	.word	0x200000c0
 8001084:	40006800 	.word	0x40006800

08001088 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a4a      	ldr	r2, [pc, #296]	@ (80011d0 <HAL_CAN_MspInit+0x148>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d145      	bne.n	8001136 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010aa:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a48      	ldr	r2, [pc, #288]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 80010b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10d      	bne.n	80010d8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	4b45      	ldr	r3, [pc, #276]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b42      	ldr	r3, [pc, #264]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a3d      	ldr	r2, [pc, #244]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010f4:	2303      	movs	r3, #3
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001104:	2309      	movs	r3, #9
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4833      	ldr	r0, [pc, #204]	@ (80011dc <HAL_CAN_MspInit+0x154>)
 8001110:	f001 fc16 	bl	8002940 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2014      	movs	r0, #20
 800111a:	f001 fbda 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800111e:	2014      	movs	r0, #20
 8001120:	f001 fbf3 	bl	800290a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2015      	movs	r0, #21
 800112a:	f001 fbd2 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800112e:	2015      	movs	r0, #21
 8001130:	f001 fbeb 	bl	800290a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001134:	e047      	b.n	80011c6 <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <HAL_CAN_MspInit+0x158>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d142      	bne.n	80011c6 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 800114a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800114e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001150:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 8001164:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_CAN_MspInit+0x14c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10d      	bne.n	800118a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_CAN_MspInit+0x150>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011a6:	2360      	movs	r3, #96	@ 0x60
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011b6:	2309      	movs	r3, #9
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <HAL_CAN_MspInit+0x15c>)
 80011c2:	f001 fbbd 	bl	8002940 <HAL_GPIO_Init>
}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	@ 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40006400 	.word	0x40006400
 80011d4:	200000e8 	.word	0x200000e8
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40006800 	.word	0x40006800
 80011e4:	40020400 	.word	0x40020400

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_GPIO_Init+0x84>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <MX_GPIO_Init+0x84>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_GPIO_Init+0x84>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_GPIO_Init+0x84>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a16      	ldr	r2, [pc, #88]	@ (800126c <MX_GPIO_Init+0x84>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_GPIO_Init+0x84>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_GPIO_Init+0x84>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <MX_GPIO_Init+0x84>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <MX_GPIO_Init+0x84>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_GPIO_Init+0x84>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <MX_GPIO_Init+0x84>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_GPIO_Init+0x84>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fb78 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f818 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f7ff ffb4 	bl	80011e8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001280:	f7ff fe96 	bl	8000fb0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001284:	f000 fad4 	bl	8001830 <MX_TIM2_Init>
  MX_CAN2_Init();
 8001288:	f7ff fec8 	bl	800101c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
can_dual_init(&hcan1, &hcan2);
 800128c:	4904      	ldr	r1, [pc, #16]	@ (80012a0 <main+0x30>)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <main+0x34>)
 8001290:	f7ff fd44 	bl	8000d1c <can_dual_init>

HAL_TIM_Base_Start_IT(&htim2);
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <main+0x38>)
 8001296:	f002 f9c3 	bl	8003620 <HAL_TIM_Base_Start_IT>
//target_position = (motor_info[3].rotor_angle *(360.0/8191.0))/36;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129a:	bf00      	nop
 800129c:	e7fd      	b.n	800129a <main+0x2a>
 800129e:	bf00      	nop
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	20000098 	.word	0x20000098
 80012a8:	20000154 	.word	0x20000154

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	@ 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fdd6 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <SystemClock_Config+0xd8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <SystemClock_Config+0xd8>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <SystemClock_Config+0xd8>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemClock_Config+0xdc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <SystemClock_Config+0xdc>)
 80012f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <SystemClock_Config+0xdc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800131a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800131c:	2306      	movs	r3, #6
 800131e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001320:	23b4      	movs	r3, #180	@ 0xb4
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fd01 	bl	8002d38 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800133c:	f000 f9ea 	bl	8001714 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001340:	f001 fcaa 	bl	8002c98 <HAL_PWREx_EnableOverDrive>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800134a:	f000 f9e3 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800135e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001364:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2105      	movs	r1, #5
 800136c:	4618      	mov	r0, r3
 800136e:	f001 ff5b 	bl	8003228 <HAL_RCC_ClockConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001378:	f000 f9cc 	bl	8001714 <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	@ 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int flag = 1;
int flag_2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	if(flag_2 == 0)
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
//		motor_reset();
		flag_2 = 1;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == htim2.Instance)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d127      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x72>
	{
//		target_position[3] = 5000;
//		desired_speed[3]=80;
    motor_calc_M2006(3,&angle_sum[3],&target_position[3],&target_speed[3],&desired_speed[3]);
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013b4:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013b6:	4919      	ldr	r1, [pc, #100]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f83d 	bl	8001438 <motor_calc_M2006>
    motor_calc_GM6020(0,&angle_sum[0],&target_position[0],&target_speed[0],&desired_speed[0]);
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013c4:	4a18      	ldr	r2, [pc, #96]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013c6:	4919      	ldr	r1, [pc, #100]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f8b1 	bl	8001530 <motor_calc_GM6020>

		if(flag == 2)
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d102      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x50>
		{
//			target_position[3] = 2000;
//			desired_speed[3] = 80;
//			motor_info[3].set_current = Double_Loop_Control(angle_sum[3], target_position[3],target_speed[3] , desired_speed[3], M2006, M2006);
			flag = 1;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
		}


//		set_motor_vaule(0x200, 0, 0, motor_info[3].set_current, 0);
//		delay_ms(10);
		set_motor_vaule(0x1ff,  motor_info[0].set_current, 0,0, 0);
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80013de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2200      	movs	r2, #0
 80013ec:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80013f0:	f7ff fd94 	bl	8000f1c <set_motor_vaule>


		flag++;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013fc:	6013      	str	r3, [r2, #0]


	}
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000150 	.word	0x20000150
 800140c:	20000154 	.word	0x20000154
 8001410:	2000000c 	.word	0x2000000c
 8001414:	200000f8 	.word	0x200000f8
 8001418:	2000010c 	.word	0x2000010c
 800141c:	20000148 	.word	0x20000148
 8001420:	20000000 	.word	0x20000000
 8001424:	200000ec 	.word	0x200000ec
 8001428:	20000100 	.word	0x20000100
 800142c:	2000013c 	.word	0x2000013c
 8001430:	20000014 	.word	0x20000014
 8001434:	20000040 	.word	0x20000040

08001438 <motor_calc_M2006>:

void motor_calc_M2006(int ID, int **angle_sumEx, int **target_positionEx, int **target_speedEx, int **desired_speedEx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
		*target_speedEx = motor_info[ID].rotor_speed / 36 ;
 8001446:	4936      	ldr	r1, [pc, #216]	@ (8001520 <motor_calc_M2006+0xe8>)
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3306      	adds	r3, #6
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	4a32      	ldr	r2, [pc, #200]	@ (8001524 <motor_calc_M2006+0xec>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	10d2      	asrs	r2, r2, #3
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b21b      	sxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]

		*angle_sumEx = angle_calc_M2006(ID,motor_info[ID].rotor_angle);
 800146e:	492c      	ldr	r1, [pc, #176]	@ (8001520 <motor_calc_M2006+0xe8>)
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3304      	adds	r3, #4
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f8c8 	bl	8001618 <angle_calc_M2006>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	601a      	str	r2, [r3, #0]


		/**********************************************************/
		//过零处理
		if((motor_info[ID].rotor_angle - last_angle[ID]) <  -4096)
 8001490:	4923      	ldr	r1, [pc, #140]	@ (8001520 <motor_calc_M2006+0xe8>)
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3304      	adds	r3, #4
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4a20      	ldr	r2, [pc, #128]	@ (8001528 <motor_calc_M2006+0xf0>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	1acb      	subs	r3, r1, r3
 80014ae:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 80014b2:	da08      	bge.n	80014c6 <motor_calc_M2006+0x8e>
		    {
		    	 overflowNum[ID]++;
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <motor_calc_M2006+0xf4>)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	491b      	ldr	r1, [pc, #108]	@ (800152c <motor_calc_M2006+0xf4>)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }
		    if((motor_info[ID].rotor_angle - last_angle[ID]) >  4096)
 80014c6:	4916      	ldr	r1, [pc, #88]	@ (8001520 <motor_calc_M2006+0xe8>)
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	3304      	adds	r3, #4
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <motor_calc_M2006+0xf0>)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	1acb      	subs	r3, r1, r3
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e8:	dd08      	ble.n	80014fc <motor_calc_M2006+0xc4>
		    {
		    	overflowNum[ID]--;
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <motor_calc_M2006+0xf4>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	490d      	ldr	r1, [pc, #52]	@ (800152c <motor_calc_M2006+0xf4>)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }

		    last_angle[ID] = motor_info[ID].rotor_angle;
 80014fc:	4908      	ldr	r1, [pc, #32]	@ (8001520 <motor_calc_M2006+0xe8>)
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <motor_calc_M2006+0xf0>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/**********************************************************/
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000040 	.word	0x20000040
 8001524:	38e38e39 	.word	0x38e38e39
 8001528:	20000114 	.word	0x20000114
 800152c:	20000128 	.word	0x20000128

08001530 <motor_calc_GM6020>:

void motor_calc_GM6020(int ID, int **angle_sumEx, int **target_positionEx, int **target_speedEx, int **desired_speedEx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
		*target_speedEx = motor_info[ID].rotor_speed ;
 800153e:	4932      	ldr	r1, [pc, #200]	@ (8001608 <motor_calc_GM6020+0xd8>)
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3306      	adds	r3, #6
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	461a      	mov	r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	601a      	str	r2, [r3, #0]

		*angle_sumEx = angle_calc_GM6020(ID,motor_info[ID].rotor_angle);
 8001558:	492b      	ldr	r1, [pc, #172]	@ (8001608 <motor_calc_GM6020+0xd8>)
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f897 	bl	80016a0 <angle_calc_GM6020>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	601a      	str	r2, [r3, #0]


		/**********************************************************/
		//过零处理
		if((motor_info[ID].rotor_angle - last_angle[ID]) <  -180)
 800157a:	4923      	ldr	r1, [pc, #140]	@ (8001608 <motor_calc_GM6020+0xd8>)
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3304      	adds	r3, #4
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <motor_calc_GM6020+0xdc>)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	1acb      	subs	r3, r1, r3
 8001598:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 800159c:	da08      	bge.n	80015b0 <motor_calc_GM6020+0x80>
		    {
		    	 overflowNum[ID]++;
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <motor_calc_GM6020+0xe0>)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	4919      	ldr	r1, [pc, #100]	@ (8001610 <motor_calc_GM6020+0xe0>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }
		    if((motor_info[ID].rotor_angle - last_angle[ID]) >  180)
 80015b0:	4915      	ldr	r1, [pc, #84]	@ (8001608 <motor_calc_GM6020+0xd8>)
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	3304      	adds	r3, #4
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4a11      	ldr	r2, [pc, #68]	@ (800160c <motor_calc_GM6020+0xdc>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	1acb      	subs	r3, r1, r3
 80015ce:	2bb4      	cmp	r3, #180	@ 0xb4
 80015d0:	dd08      	ble.n	80015e4 <motor_calc_GM6020+0xb4>
		    {
		    	overflowNum[ID]--;
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <motor_calc_GM6020+0xe0>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <motor_calc_GM6020+0xe0>)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }

		    last_angle[ID] = motor_info[ID].rotor_angle;
 80015e4:	4908      	ldr	r1, [pc, #32]	@ (8001608 <motor_calc_GM6020+0xd8>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3304      	adds	r3, #4
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <motor_calc_GM6020+0xdc>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/**********************************************************/
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000040 	.word	0x20000040
 800160c:	20000114 	.word	0x20000114
 8001610:	20000128 	.word	0x20000128
 8001614:	00000000 	.word	0x00000000

08001618 <angle_calc_M2006>:

int angle_calc_M2006(int ID,int CNT)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	float  angle;

	angle = (overflowNum[ID] *360 + CNT * (360.0/8191.0))/36.0;
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <angle_calc_M2006+0x80>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff2e 	bl	8000494 <__aeabi_i2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7fe ff29 	bl	8000494 <__aeabi_i2d>
 8001642:	a313      	add	r3, pc, #76	@ (adr r3, 8001690 <angle_calc_M2006+0x78>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ff8e 	bl	8000568 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fdd2 	bl	80001fc <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <angle_calc_M2006+0x84>)
 8001666:	f7ff f8a9 	bl	80007bc <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff f98b 	bl	800098c <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	60fb      	str	r3, [r7, #12]

	return angle;
 800167a:	edd7 7a03 	vldr	s15, [r7, #12]
 800167e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	bf00      	nop
 8001690:	05a02d01 	.word	0x05a02d01
 8001694:	3fa680b4 	.word	0x3fa680b4
 8001698:	20000128 	.word	0x20000128
 800169c:	40420000 	.word	0x40420000

080016a0 <angle_calc_GM6020>:

int angle_calc_GM6020(int ID,int CNT)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	float  angle;

	angle = (overflowNum[ID] *360 + CNT * (360.0/8191.0));
 80016aa:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <angle_calc_GM6020+0x70>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe feea 	bl	8000494 <__aeabi_i2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7fe fee5 	bl	8000494 <__aeabi_i2d>
 80016ca:	a30f      	add	r3, pc, #60	@ (adr r3, 8001708 <angle_calc_GM6020+0x68>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff4a 	bl	8000568 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fd8e 	bl	80001fc <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f950 	bl	800098c <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]

	return angle;
 80016f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f8:	ee17 3a90 	vmov	r3, s15
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	05a02d01 	.word	0x05a02d01
 800170c:	3fa680b4 	.word	0x3fa680b4
 8001710:	20000128 	.word	0x20000128

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <Error_Handler+0x8>

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <HAL_MspInit+0x4c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <HAL_MspInit+0x4c>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001734:	6453      	str	r3, [r2, #68]	@ 0x44
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_MspInit+0x4c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 f921 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <CAN1_RX0_IRQHandler+0x10>)
 80017d6:	f000 fd71 	bl	80022bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000098 	.word	0x20000098

080017e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <CAN1_RX1_IRQHandler+0x10>)
 80017ea:	f000 fd67 	bl	80022bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000098 	.word	0x20000098

080017f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIM2_IRQHandler+0x10>)
 80017fe:	f001 ff7f 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000154 	.word	0x20000154

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001856:	22b3      	movs	r2, #179	@ 0xb3
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001862:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <MX_TIM2_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001876:	f001 fe83 	bl	8003580 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001880:	f7ff ff48 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_TIM2_Init+0x94>)
 8001892:	f002 f825 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800189c:	f7ff ff3a 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_TIM2_Init+0x94>)
 80018ae:	f002 fa4d 	bl	8003d4c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018b8:	f7ff ff2c 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000154 	.word	0x20000154

080018c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d8:	d115      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_TIM_Base_MspInit+0x48>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <HAL_TIM_Base_MspInit+0x48>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_TIM_Base_MspInit+0x48>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	201c      	movs	r0, #28
 80018fc:	f000 ffe9 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001900:	201c      	movs	r0, #28
 8001902:	f001 f802 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <Reset_Handler>:
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800194c <LoopFillZerobss+0xe>
 8001918:	f7ff ff78 	bl	800180c <SystemInit>
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopFillZerobss+0x12>)
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopFillZerobss+0x16>)
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopFillZerobss+0x1a>)
 8001922:	2300      	movs	r3, #0
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:
 8001926:	58d4      	ldr	r4, [r2, r3]
 8001928:	50c4      	str	r4, [r0, r3]
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:
 800192c:	18c4      	adds	r4, r0, r3
 800192e:	428c      	cmp	r4, r1
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopFillZerobss+0x1e>)
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopFillZerobss+0x22>)
 8001936:	2300      	movs	r3, #0
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:
 800193e:	42a2      	cmp	r2, r4
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>
 8001942:	f002 fa9b 	bl	8003e7c <__libc_init_array>
 8001946:	f7ff fc93 	bl	8001270 <main>
 800194a:	4770      	bx	lr
 800194c:	20030000 	.word	0x20030000
 8001950:	20000000 	.word	0x20000000
 8001954:	20000024 	.word	0x20000024
 8001958:	08003efc 	.word	0x08003efc
 800195c:	20000024 	.word	0x20000024
 8001960:	200001a0 	.word	0x200001a0

08001964 <ADC_IRQHandler>:
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 ff93 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fec0 	bl	8001720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 ffab 	bl	8002926 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 ff73 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000018 	.word	0x20000018
 8001a04:	20000020 	.word	0x20000020
 8001a08:	2000001c 	.word	0x2000001c

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000020 	.word	0x20000020
 8001a30:	2000019c 	.word	0x2000019c

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000019c 	.word	0x2000019c

08001a4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0ed      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fb0c 	bl	8001088 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff ffd8 	bl	8001a34 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a86:	e012      	b.n	8001aae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a88:	f7ff ffd4 	bl	8001a34 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b0a      	cmp	r3, #10
 8001a94:	d90b      	bls.n	8001aae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0c5      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0e5      	beq.n	8001a88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0202 	bic.w	r2, r2, #2
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff ffb2 	bl	8001a34 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad2:	e012      	b.n	8001afa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad4:	f7ff ffae 	bl	8001a34 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d90b      	bls.n	8001afa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2205      	movs	r2, #5
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e09f      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e5      	bne.n	8001ad4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e007      	b.n	8001b32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e5b      	ldrb	r3, [r3, #25]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7e9b      	ldrb	r3, [r3, #26]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0220 	bic.w	r2, r2, #32
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7edb      	ldrb	r3, [r3, #27]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0210 	bic.w	r2, r2, #16
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0210 	orr.w	r2, r2, #16
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f1b      	ldrb	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0208 	bic.w	r2, r2, #8
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7f5b      	ldrb	r3, [r3, #29]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0204 	orr.w	r2, r2, #4
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e007      	b.n	8001c04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	ea42 0103 	orr.w	r1, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d003      	beq.n	8001c6a <HAL_CAN_ConfigFilter+0x26>
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 80be 	bne.w	8001de6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c84:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2201      	movs	r2, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d123      	bne.n	8001d14 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3248      	adds	r2, #72	@ 0x48
 8001cf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d0a:	6979      	ldr	r1, [r7, #20]
 8001d0c:	3348      	adds	r3, #72	@ 0x48
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d122      	bne.n	8001d62 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3248      	adds	r2, #72	@ 0x48
 8001d42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	3348      	adds	r3, #72	@ 0x48
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d7c:	e007      	b.n	8001d8e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	401a      	ands	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001da8:	e007      	b.n	8001dba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dd8:	f023 0201 	bic.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e006      	b.n	8001df4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40006400 	.word	0x40006400

08001e04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d12e      	bne.n	8001e76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fe00 	bl	8001a34 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e36:	e012      	b.n	8001e5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e38:	f7ff fdfc 	bl	8001a34 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d90b      	bls.n	8001e5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e012      	b.n	8001e84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e5      	bne.n	8001e38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e006      	b.n	8001e84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d003      	beq.n	8001eb8 <HAL_CAN_AddTxMessage+0x2c>
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 80ad 	bne.w	8002012 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8095 	beq.w	8002002 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	0e1b      	lsrs	r3, r3, #24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	6809      	ldr	r1, [r1, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3318      	adds	r3, #24
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	440b      	add	r3, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00f      	b.n	8001f30 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f1a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f24:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3318      	adds	r3, #24
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	440b      	add	r3, r1
 8001f2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	440b      	add	r3, r1
 8001f40:	3304      	adds	r3, #4
 8001f42:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	7d1b      	ldrb	r3, [r3, #20]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d111      	bne.n	8001f70 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3318      	adds	r3, #24
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	6811      	ldr	r1, [r2, #0]
 8001f60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3318      	adds	r3, #24
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3307      	adds	r3, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	061a      	lsls	r2, r3, #24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3306      	adds	r3, #6
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3305      	adds	r3, #5
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	3204      	adds	r2, #4
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	4610      	mov	r0, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6811      	ldr	r1, [r2, #0]
 8001f98:	ea43 0200 	orr.w	r2, r3, r0
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001fa6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3303      	adds	r3, #3
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	061a      	lsls	r2, r3, #24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	4610      	mov	r0, r2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	6811      	ldr	r1, [r2, #0]
 8001fce:	ea43 0200 	orr.w	r2, r3, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001fdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	6811      	ldr	r1, [r2, #0]
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	440b      	add	r3, r1
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e00e      	b.n	8002020 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e006      	b.n	8002020 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3724      	adds	r7, #36	@ 0x24
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002040:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d003      	beq.n	8002050 <HAL_CAN_GetRxMessage+0x24>
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b02      	cmp	r3, #2
 800204c:	f040 8103 	bne.w	8002256 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10e      	bne.n	8002074 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0f7      	b.n	8002264 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e8      	b.n	8002264 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	331b      	adds	r3, #27
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0204 	and.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10c      	bne.n	80020ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	331b      	adds	r3, #27
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00b      	b.n	80020e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	331b      	adds	r3, #27
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	331b      	adds	r3, #27
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0202 	and.w	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	331b      	adds	r3, #27
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2208      	movs	r2, #8
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	e00b      	b.n	8002130 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	331b      	adds	r3, #27
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	331b      	adds	r3, #27
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b2da      	uxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0a1a      	lsrs	r2, r3, #8
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0c1a      	lsrs	r2, r3, #16
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3302      	adds	r3, #2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e1a      	lsrs	r2, r3, #24
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3303      	adds	r3, #3
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	3304      	adds	r3, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0a1a      	lsrs	r2, r3, #8
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3305      	adds	r3, #5
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0c1a      	lsrs	r2, r3, #16
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3306      	adds	r3, #6
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e1a      	lsrs	r2, r3, #24
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3307      	adds	r3, #7
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d108      	bne.n	8002242 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e007      	b.n	8002252 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e006      	b.n	8002264 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d002      	beq.n	800228e <HAL_CAN_ActivateNotification+0x1e>
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d109      	bne.n	80022a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6959      	ldr	r1, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e006      	b.n	80022b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d07c      	beq.n	80023fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f983 	bl	800262a <HAL_CAN_TxMailbox0CompleteCallback>
 8002324:	e016      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
 8002338:	e00c      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
 800234c:	e002      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f989 	bl	8002666 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002366:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f963 	bl	800263e <HAL_CAN_TxMailbox1CompleteCallback>
 8002378:	e016      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
 800238c:	e00c      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a0:	e002      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f969 	bl	800267a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d024      	beq.n	80023fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f943 	bl	8002652 <HAL_CAN_TxMailbox2CompleteCallback>
 80023cc:	e016      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e0:	e00c      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f4:	e002      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f949 	bl	800268e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f930 	bl	80026a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fc98 	bl	8000d90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f912 	bl	80026ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8f9 	bl	80026b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8fc 	bl	80026de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2208      	movs	r2, #8
 8002500:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8f5 	bl	80026f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d07b      	beq.n	800260a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d072      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002576:	2b00      	cmp	r3, #0
 8002578:	d043      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03e      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800258a:	2b60      	cmp	r3, #96	@ 0x60
 800258c:	d02b      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x32a>
 800258e:	2b60      	cmp	r3, #96	@ 0x60
 8002590:	d82e      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 8002592:	2b50      	cmp	r3, #80	@ 0x50
 8002594:	d022      	beq.n	80025dc <HAL_CAN_IRQHandler+0x320>
 8002596:	2b50      	cmp	r3, #80	@ 0x50
 8002598:	d82a      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 800259a:	2b40      	cmp	r3, #64	@ 0x40
 800259c:	d019      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x316>
 800259e:	2b40      	cmp	r3, #64	@ 0x40
 80025a0:	d826      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 80025a2:	2b30      	cmp	r3, #48	@ 0x30
 80025a4:	d010      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x30c>
 80025a6:	2b30      	cmp	r3, #48	@ 0x30
 80025a8:	d822      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d002      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x2f8>
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d005      	beq.n	80025be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025b2:	e01d      	b.n	80025f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025bc:	e019      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c6:	e014      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025d0:	e00f      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025da:	e00a      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025e4:	e005      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ee:	e000      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80025f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002600:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f872 	bl	8002706 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	@ 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	@ (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e177      	b.n	8002c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8166 	bne.w	8002c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80c0 	beq.w	8002c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a65      	ldr	r2, [pc, #404]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b63      	ldr	r3, [pc, #396]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a58      	ldr	r2, [pc, #352]	@ (8002c6c <HAL_GPIO_Init+0x32c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d037      	beq.n	8002b7e <HAL_GPIO_Init+0x23e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_GPIO_Init+0x330>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_GPIO_Init+0x23a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_GPIO_Init+0x334>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_GPIO_Init+0x236>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a55      	ldr	r2, [pc, #340]	@ (8002c78 <HAL_GPIO_Init+0x338>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x232>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_GPIO_Init+0x33c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x22e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a53      	ldr	r2, [pc, #332]	@ (8002c80 <HAL_GPIO_Init+0x340>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x22a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_GPIO_Init+0x344>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a51      	ldr	r2, [pc, #324]	@ (8002c88 <HAL_GPIO_Init+0x348>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_GPIO_Init+0x34c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	@ (8002c90 <HAL_GPIO_Init+0x350>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b56:	2309      	movs	r3, #9
 8002b58:	e012      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	e010      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	e00e      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00c      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b32      	ldr	r3, [pc, #200]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f ae84 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022400 	.word	0x40022400
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x94>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7fe feb6 	bl	8001a34 <HAL_GetTick>
 8002cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cca:	e009      	b.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ccc:	f7fe feb2 	bl	8001a34 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e01f      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d1ee      	bne.n	8002ccc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fe9e 	bl	8001a34 <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe9a 	bl	8001a34 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e007      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	420e0040 	.word	0x420e0040
 8002d30:	40007000 	.word	0x40007000
 8002d34:	420e0044 	.word	0x420e0044

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e267      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d00c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b85      	ldr	r3, [pc, #532]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d112      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b82      	ldr	r3, [pc, #520]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d7a:	d10b      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCC_OscConfig+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d157      	bne.n	8002e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e242      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x74>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b70      	ldr	r3, [pc, #448]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6f      	ldr	r2, [pc, #444]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dd0:	4b69      	ldr	r3, [pc, #420]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a68      	ldr	r2, [pc, #416]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fe20 	bl	8001a34 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fe1c 	bl	8001a34 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	@ 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e207      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xc0>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe fe0c 	bl	8001a34 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe fe08 	bl	8001a34 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1f3      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b51      	ldr	r3, [pc, #324]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0xe8>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b44      	ldr	r3, [pc, #272]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b41      	ldr	r3, [pc, #260]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c7      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4937      	ldr	r1, [pc, #220]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe fdc1 	bl	8001a34 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fdbd 	bl	8001a34 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a8      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4925      	ldr	r1, [pc, #148]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b24      	ldr	r3, [pc, #144]	@ (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fda0 	bl	8001a34 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fd9c 	bl	8001a34 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e187      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fd80 	bl	8001a34 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe fd7c 	bl	8001a34 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e167      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x200>
 8002f56:	e01b      	b.n	8002f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fd69 	bl	8001a34 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e00e      	b.n	8002f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7fe fd65 	bl	8001a34 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d907      	bls.n	8002f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e150      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	42470000 	.word	0x42470000
 8002f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b88      	ldr	r3, [pc, #544]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ea      	bne.n	8002f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8097 	beq.w	80030cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b81      	ldr	r3, [pc, #516]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b77      	ldr	r3, [pc, #476]	@ (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b74      	ldr	r3, [pc, #464]	@ (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	@ (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fd25 	bl	8001a34 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fe fd21 	bl	8001a34 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e10c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b6a      	ldr	r3, [pc, #424]	@ (80031ac <HAL_RCC_OscConfig+0x474>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x2ea>
 8003014:	4b64      	ldr	r3, [pc, #400]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a63      	ldr	r2, [pc, #396]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x30c>
 800302a:	4b5f      	ldr	r3, [pc, #380]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a5e      	ldr	r2, [pc, #376]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	4b5c      	ldr	r3, [pc, #368]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a5b      	ldr	r2, [pc, #364]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003044:	4b58      	ldr	r3, [pc, #352]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a57      	ldr	r2, [pc, #348]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003050:	4b55      	ldr	r3, [pc, #340]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	4a54      	ldr	r2, [pc, #336]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe fce6 	bl	8001a34 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe fce2 	bl	8001a34 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0cb      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCC_OscConfig+0x334>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7fe fcd0 	bl	8001a34 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe fccc 	bl	8001a34 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0b5      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	4a38      	ldr	r2, [pc, #224]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a1 	beq.w	8003218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d6:	4b34      	ldr	r3, [pc, #208]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d05c      	beq.n	800319c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d141      	bne.n	800316e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_RCC_OscConfig+0x478>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fca0 	bl	8001a34 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fc9c 	bl	8001a34 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e087      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	491b      	ldr	r1, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fc75 	bl	8001a34 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fc71 	bl	8001a34 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e05c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x416>
 800316c:	e054      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	@ (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fc5e 	bl	8001a34 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fc5a 	bl	8001a34 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e045      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x444>
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e038      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_RCC_OscConfig+0x4ec>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d121      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11a      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0cc      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b68      	ldr	r3, [pc, #416]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d90c      	bls.n	8003264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b65      	ldr	r3, [pc, #404]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a58      	ldr	r2, [pc, #352]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a52      	ldr	r2, [pc, #328]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800329e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d044      	beq.n	8003348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d119      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	4b3f      	ldr	r3, [pc, #252]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f6:	4b3b      	ldr	r3, [pc, #236]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e067      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003306:	4b37      	ldr	r3, [pc, #220]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4934      	ldr	r1, [pc, #208]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003318:	f7fe fb8c 	bl	8001a34 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	e00a      	b.n	8003336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003320:	f7fe fb88 	bl	8001a34 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e04f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	4b2b      	ldr	r3, [pc, #172]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 020c 	and.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	429a      	cmp	r2, r3
 8003346:	d1eb      	bne.n	8003320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d20c      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f821 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490a      	ldr	r1, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe faec 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08003edc 	.word	0x08003edc
 80033ec:	20000018 	.word	0x20000018
 80033f0:	2000001c 	.word	0x2000001c

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b090      	sub	sp, #64	@ 0x40
 80033fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003404:	2300      	movs	r3, #0
 8003406:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d00d      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x40>
 8003418:	2b08      	cmp	r3, #8
 800341a:	f200 80a1 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x34>
 8003422:	2b04      	cmp	r3, #4
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x3a>
 8003426:	e09b      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800342c:	e09b      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342e:	4b53      	ldr	r3, [pc, #332]	@ (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003430:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003432:	e098      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003434:	4b4f      	ldr	r3, [pc, #316]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800343c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343e:	4b4d      	ldr	r3, [pc, #308]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d028      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344a:	4b4a      	ldr	r3, [pc, #296]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	2200      	movs	r2, #0
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	627a      	str	r2, [r7, #36]	@ 0x24
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800345c:	2100      	movs	r1, #0
 800345e:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003460:	fb03 f201 	mul.w	r2, r3, r1
 8003464:	2300      	movs	r3, #0
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	4413      	add	r3, r2
 800346c:	4a43      	ldr	r2, [pc, #268]	@ (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 800346e:	fba0 1202 	umull	r1, r2, r0, r2
 8003472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003474:	460a      	mov	r2, r1
 8003476:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347a:	4413      	add	r3, r2
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	2200      	movs	r2, #0
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	61fa      	str	r2, [r7, #28]
 8003486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800348e:	f7fd facd 	bl	8000a2c <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4613      	mov	r3, r2
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800349a:	e053      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	2200      	movs	r2, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	617a      	str	r2, [r7, #20]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ae:	f04f 0b00 	mov.w	fp, #0
 80034b2:	4652      	mov	r2, sl
 80034b4:	465b      	mov	r3, fp
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	ebb2 080a 	subs.w	r8, r2, sl
 80034ce:	eb63 090b 	sbc.w	r9, r3, fp
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ea:	eb63 0509 	sbc.w	r5, r3, r9
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	00eb      	lsls	r3, r5, #3
 80034f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fc:	00e2      	lsls	r2, r4, #3
 80034fe:	4614      	mov	r4, r2
 8003500:	461d      	mov	r5, r3
 8003502:	eb14 030a 	adds.w	r3, r4, sl
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	eb45 030b 	adc.w	r3, r5, fp
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351a:	4629      	mov	r1, r5
 800351c:	028b      	lsls	r3, r1, #10
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003524:	4621      	mov	r1, r4
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352e:	2200      	movs	r2, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	60fa      	str	r2, [r7, #12]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	f7fd fa78 	bl	8000a2c <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003554:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003568:	4618      	mov	r0, r3
 800356a:	3740      	adds	r7, #64	@ 0x40
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	00b71b00 	.word	0x00b71b00

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e041      	b.n	8003616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe f98e 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fa7e 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04e      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d022      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003662:	d01d      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x80>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_TIM_Base_Start_IT+0xdc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d010      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	e007      	b.n	80036d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f999 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f98b 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f99c 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f973 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f965 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f976 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f94d 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f93f 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f950 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f927 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f919 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f92a 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fd90 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fae4 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8fb 	bl	8003aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fab6 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0b4      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x186>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003934:	d03e      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393a:	f200 8087 	bhi.w	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003942:	f000 8086 	beq.w	8003a52 <HAL_TIM_ConfigClockSource+0x172>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d87f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b70      	cmp	r3, #112	@ 0x70
 800394e:	d01a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xa6>
 8003950:	2b70      	cmp	r3, #112	@ 0x70
 8003952:	d87b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b60      	cmp	r3, #96	@ 0x60
 8003956:	d050      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x11a>
 8003958:	2b60      	cmp	r3, #96	@ 0x60
 800395a:	d877      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b50      	cmp	r3, #80	@ 0x50
 800395e:	d03c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xfa>
 8003960:	2b50      	cmp	r3, #80	@ 0x50
 8003962:	d873      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d058      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x13a>
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d86f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b30      	cmp	r3, #48	@ 0x30
 800396e:	d064      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b30      	cmp	r3, #48	@ 0x30
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d867      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b10      	cmp	r3, #16
 8003982:	d05a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	e062      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	f000 f9b9 	bl	8003d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e04f      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	f000 f9a2 	bl	8003d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 f916 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	@ 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f96f 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 f935 	bl	8003c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	@ 0x60
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f95f 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 f8f6 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	@ 0x40
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f94f 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 f946 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a46      	ldr	r2, [pc, #280]	@ (8003bec <TIM_Base_SetConfig+0x12c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ade:	d00f      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a43      	ldr	r2, [pc, #268]	@ (8003bf0 <TIM_Base_SetConfig+0x130>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a42      	ldr	r2, [pc, #264]	@ (8003bf4 <TIM_Base_SetConfig+0x134>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a41      	ldr	r2, [pc, #260]	@ (8003bf8 <TIM_Base_SetConfig+0x138>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a40      	ldr	r2, [pc, #256]	@ (8003bfc <TIM_Base_SetConfig+0x13c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <TIM_Base_SetConfig+0x12c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02b      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b20:	d027      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a32      	ldr	r2, [pc, #200]	@ (8003bf0 <TIM_Base_SetConfig+0x130>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d023      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	@ (8003bf4 <TIM_Base_SetConfig+0x134>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a30      	ldr	r2, [pc, #192]	@ (8003bf8 <TIM_Base_SetConfig+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01b      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bfc <TIM_Base_SetConfig+0x13c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d017      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <TIM_Base_SetConfig+0x140>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c04 <TIM_Base_SetConfig+0x144>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <TIM_Base_SetConfig+0x148>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <TIM_Base_SetConfig+0x14c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2a      	ldr	r2, [pc, #168]	@ (8003c10 <TIM_Base_SetConfig+0x150>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <TIM_Base_SetConfig+0x154>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a10      	ldr	r2, [pc, #64]	@ (8003bec <TIM_Base_SetConfig+0x12c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_Base_SetConfig+0xf8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <TIM_Base_SetConfig+0x13c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]
  }
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40010400 	.word	0x40010400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	40001800 	.word	0x40001800
 8003c10:	40001c00 	.word	0x40001c00
 8003c14:	40002000 	.word	0x40002000

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f023 0210 	bic.w	r2, r3, #16
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 0307 	orr.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e05a      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db0:	d01d      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40001800 	.word	0x40001800

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <__libc_init_array>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003eb4 <__libc_init_array+0x38>)
 8003e80:	4c0d      	ldr	r4, [pc, #52]	@ (8003eb8 <__libc_init_array+0x3c>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	2600      	movs	r6, #0
 8003e88:	42a6      	cmp	r6, r4
 8003e8a:	d109      	bne.n	8003ea0 <__libc_init_array+0x24>
 8003e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ebc <__libc_init_array+0x40>)
 8003e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ec0 <__libc_init_array+0x44>)
 8003e90:	f000 f818 	bl	8003ec4 <_init>
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	2600      	movs	r6, #0
 8003e9a:	42a6      	cmp	r6, r4
 8003e9c:	d105      	bne.n	8003eaa <__libc_init_array+0x2e>
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea4:	4798      	blx	r3
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	e7ee      	b.n	8003e88 <__libc_init_array+0xc>
 8003eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eae:	4798      	blx	r3
 8003eb0:	3601      	adds	r6, #1
 8003eb2:	e7f2      	b.n	8003e9a <__libc_init_array+0x1e>
 8003eb4:	08003ef4 	.word	0x08003ef4
 8003eb8:	08003ef4 	.word	0x08003ef4
 8003ebc:	08003ef4 	.word	0x08003ef4
 8003ec0:	08003ef8 	.word	0x08003ef8

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

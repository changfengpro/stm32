
SG90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080044f0  080044f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f0  080044f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004560  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004560  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1e9  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe0  00000000  00000000  0002c2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098b  00000000  00000000  0002eee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017490  00000000  00000000  0002f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebe7  00000000  00000000  00046cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000887a0  00000000  00000000  000558e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a3c  00000000  00000000  000de084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000e1ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800437c 	.word	0x0800437c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800437c 	.word	0x0800437c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_f2uiz>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	d20e      	bcs.n	80007ee <__aeabi_f2uiz+0x22>
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30b      	bcc.n	80007ee <__aeabi_f2uiz+0x22>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d409      	bmi.n	80007f4 <__aeabi_f2uiz+0x28>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	fa23 f002 	lsr.w	r0, r3, r2
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr
 80007f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007f8:	d101      	bne.n	80007fe <__aeabi_f2uiz+0x32>
 80007fa:	0242      	lsls	r2, r0, #9
 80007fc:	d102      	bne.n	8000804 <__aeabi_f2uiz+0x38>
 80007fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_GPIO_Init+0x90>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <MX_GPIO_Init+0x90>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_GPIO_Init+0x90>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_GPIO_Init+0x90>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_GPIO_Init+0x90>)
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_GPIO_Init+0x90>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_GPIO_Init+0x90>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <MX_GPIO_Init+0x90>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_GPIO_Init+0x90>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0x94>)
 8000870:	f000 feec 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0x94>)
 800088e:	f000 fd59 	bl	8001344 <HAL_GPIO_Init>

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40011000 	.word	0x40011000

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fb06 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f822 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff ffac 	bl	800080c <MX_GPIO_Init>
  MX_TIM1_Init();
 80008b4:	f000 f968 	bl	8000b88 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008b8:	f000 fa5a 	bl	8000d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 4);
 80008bc:	2204      	movs	r2, #4
 80008be:	4909      	ldr	r1, [pc, #36]	; (80008e4 <main+0x40>)
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <main+0x44>)
 80008c2:	f002 f9b1 	bl	8002c28 <HAL_UARTEx_ReceiveToIdle_IT>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <main+0x48>)
 80008ca:	f001 fba9 	bl	8002020 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   HAL_UART_Transmit_IT(&huart1, TxData, 8);
 80008ce:	2208      	movs	r2, #8
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <main+0x4c>)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <main+0x44>)
 80008d4:	f002 f973 	bl	8002bbe <HAL_UART_Transmit_IT>
  	  HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f000 fb4e 	bl	8000f7c <HAL_Delay>
  {   HAL_UART_Transmit_IT(&huart1, TxData, 8);
 80008e0:	e7f5      	b.n	80008ce <main+0x2a>
 80008e2:	bf00      	nop
 80008e4:	20000084 	.word	0x20000084
 80008e8:	200000e4 	.word	0x200000e4
 80008ec:	2000009c 	.word	0x2000009c
 80008f0:	20000000 	.word	0x20000000

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b090      	sub	sp, #64	; 0x40
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 ff2a 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000932:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f000 feb7 	bl	80016b0 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000948:	f000 f878 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2102      	movs	r1, #2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f924 	bl	8001bb4 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000972:	f000 f863 	bl	8000a3c <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3740      	adds	r7, #64	; 0x40
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_UARTEx_RxEventCallback+0x98>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d138      	bne.n	8000a06 <HAL_UARTEx_RxEventCallback+0x86>
	{

		HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 4);
 8000994:	2204      	movs	r2, #4
 8000996:	4921      	ldr	r1, [pc, #132]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <HAL_UARTEx_RxEventCallback+0x98>)
 800099a:	f002 f945 	bl	8002c28 <HAL_UARTEx_ReceiveToIdle_IT>


//				temp=(RxData[1]-'0')*100+(RxData[2]-'0')*10+(RxData[3]-'0');
		  	sscanf(RxData, "%d", &temp);
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <HAL_UARTEx_RxEventCallback+0xa0>)
 80009a0:	4920      	ldr	r1, [pc, #128]	; (8000a24 <HAL_UARTEx_RxEventCallback+0xa4>)
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x9c>)
 80009a4:	f002 feae 	bl	8003704 <siscanf>
			   comparevaule = temp*(10.0/9.0)+50.0;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_UARTEx_RxEventCallback+0xa0>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe53 	bl	8000658 <__aeabi_i2d>
 80009b2:	a317      	add	r3, pc, #92	; (adr r3, 8000a10 <HAL_UARTEx_RxEventCallback+0x90>)
 80009b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b8:	f7ff fbd2 	bl	8000160 <__aeabi_dmul>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4610      	mov	r0, r2
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UARTEx_RxEventCallback+0xa8>)
 80009ca:	f7ff fcf9 	bl	80003c0 <__adddf3>
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	f7ff fea9 	bl	800072c <__aeabi_d2f>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_UARTEx_RxEventCallback+0xac>)
 80009de:	6013      	str	r3, [r2, #0]
			   set = comparevaule;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UARTEx_RxEventCallback+0xac>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fef1 	bl	80007cc <__aeabi_f2uiz>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_UARTEx_RxEventCallback+0xb0>)
 80009f0:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,set);
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_UARTEx_RxEventCallback+0xb0>)
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_UARTEx_RxEventCallback+0xb4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34

				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000a02:	f000 fe3b 	bl	800167c <HAL_GPIO_TogglePin>

	}

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	71c71c72 	.word	0x71c71c72
 8000a14:	3ff1c71c 	.word	0x3ff1c71c
 8000a18:	200000e4 	.word	0x200000e4
 8000a1c:	20000084 	.word	0x20000084
 8000a20:	2000008e 	.word	0x2000008e
 8000a24:	08004394 	.word	0x08004394
 8000a28:	40490000 	.word	0x40490000
 8000a2c:	20000090 	.word	0x20000090
 8000a30:	20000094 	.word	0x20000094
 8000a34:	2000009c 	.word	0x2000009c
 8000a38:	40011000 	.word	0x40011000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 fa27 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <USART1_IRQHandler+0x10>)
 8000b02:	f002 f8ef 	bl	8002ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e4 	.word	0x200000e4

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 fe14 	bl	800376c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20005000 	.word	0x20005000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000098 	.word	0x20000098
 8000b78:	20000278 	.word	0x20000278

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fdcb 	bl	800375c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc6:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bc8:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <MX_TIM1_Init+0x140>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000bd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf4:	4833      	ldr	r0, [pc, #204]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000bf6:	f001 f96b 	bl	8001ed0 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f7ff ff1c 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0e:	4619      	mov	r1, r3
 8000c10:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000c12:	f001 fb69 	bl	80022e8 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c1c:	f7ff ff0e 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c20:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000c22:	f001 f9a4 	bl	8001f6e <HAL_TIM_PWM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c2c:	f7ff ff06 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4821      	ldr	r0, [pc, #132]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000c40:	f001 febe 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c4a:	f7ff fef7 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000c74:	f001 fa76 	bl	8002164 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c7e:	f7ff fedd 	bl	8000a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000ca6:	f001 fee9 	bl	8002a7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000cb0:	f7ff fec4 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM1_Init+0x13c>)
 8000cb6:	f000 f827 	bl	8000d08 <HAL_TIM_MspPostInit>

}
 8000cba:	bf00      	nop
 8000cbc:	3758      	adds	r7, #88	; 0x58
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	40012c00 	.word	0x40012c00

08000ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_TIM_Base_MspInit+0x34>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_TIM_Base_MspInit+0x38>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_TIM_Base_MspInit+0x38>)
 8000ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_TIM_Base_MspInit+0x38>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40012c00 	.word	0x40012c00
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d118      	bne.n	8000d5a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_TIM_MspPostInit+0x60>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_TIM_MspPostInit+0x60>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_TIM_MspPostInit+0x60>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_TIM_MspPostInit+0x64>)
 8000d56:	f000 faf5 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010800 	.word	0x40010800

08000d70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART1_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da8:	f001 feb9 	bl	8002b1e <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f7ff fe43 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000e4 	.word	0x200000e4
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d139      	bne.n	8000e58 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <HAL_UART_MspInit+0xa4>)
 8000e2a:	f000 fa8b 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_UART_MspInit+0xa4>)
 8000e44:	f000 fa7e 	bl	8001344 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2025      	movs	r0, #37	; 0x25
 8000e4e:	f000 f990 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e52:	2025      	movs	r0, #37	; 0x25
 8000e54:	f000 f9a9 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fe86 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f002 fc6f 	bl	8003778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fd03 	bl	80008a4 <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea8:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 8000eac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb0:	20000278 	.word	0x20000278

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f947 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fdb8 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f95f 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f927 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000014 	.word	0x20000014
 8000f40:	20000010 	.word	0x20000010

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000014 	.word	0x20000014
 8000f64:	2000012c 	.word	0x2000012c

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	2000012c 	.word	0x2000012c

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000014 	.word	0x20000014

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4906      	ldr	r1, [pc, #24]	; (800105c <__NVIC_EnableIRQ+0x34>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff90 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff2d 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff42 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff35 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d008      	beq.n	8001208 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e020      	b.n	800124a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d005      	beq.n	8001278 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2204      	movs	r2, #4
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e051      	b.n	800131c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 020e 	bic.w	r2, r2, #14
 8001286:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_DMA_Abort_IT+0xd4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d029      	beq.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_DMA_Abort_IT+0xd8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d022      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x9e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_DMA_Abort_IT+0xdc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01a      	beq.n	80012ec <HAL_DMA_Abort_IT+0x98>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_DMA_Abort_IT+0xe0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d012      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x92>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_DMA_Abort_IT+0xe4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00a      	beq.n	80012e0 <HAL_DMA_Abort_IT+0x8c>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_DMA_Abort_IT+0xe8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d102      	bne.n	80012da <HAL_DMA_Abort_IT+0x86>
 80012d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d8:	e00e      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012de:	e00b      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e4:	e008      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	e005      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	e002      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e000      	b.n	80012f8 <HAL_DMA_Abort_IT+0xa4>
 80012f6:	2301      	movs	r3, #1
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_DMA_Abort_IT+0xec>)
 80012fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
    } 
  }
  return status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020008 	.word	0x40020008
 800132c:	4002001c 	.word	0x4002001c
 8001330:	40020030 	.word	0x40020030
 8001334:	40020044 	.word	0x40020044
 8001338:	40020058 	.word	0x40020058
 800133c:	4002006c 	.word	0x4002006c
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e169      	b.n	800162c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001358:	2201      	movs	r2, #1
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	429a      	cmp	r2, r3
 8001372:	f040 8158 	bne.w	8001626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4a9a      	ldr	r2, [pc, #616]	; (80015e4 <HAL_GPIO_Init+0x2a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d05e      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001380:	4a98      	ldr	r2, [pc, #608]	; (80015e4 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d875      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001386:	4a98      	ldr	r2, [pc, #608]	; (80015e8 <HAL_GPIO_Init+0x2a4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d058      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 800138c:	4a96      	ldr	r2, [pc, #600]	; (80015e8 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d86f      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001392:	4a96      	ldr	r2, [pc, #600]	; (80015ec <HAL_GPIO_Init+0x2a8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d052      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001398:	4a94      	ldr	r2, [pc, #592]	; (80015ec <HAL_GPIO_Init+0x2a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d869      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 800139e:	4a94      	ldr	r2, [pc, #592]	; (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d04c      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013a4:	4a92      	ldr	r2, [pc, #584]	; (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d863      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013aa:	4a92      	ldr	r2, [pc, #584]	; (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d046      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013b0:	4a90      	ldr	r2, [pc, #576]	; (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d85d      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d82a      	bhi.n	8001410 <HAL_GPIO_Init+0xcc>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d859      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <HAL_GPIO_Init+0x80>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001419 	.word	0x08001419
 80013cc:	0800142b 	.word	0x0800142b
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	08001473 	.word	0x08001473
 80013d8:	08001473 	.word	0x08001473
 80013dc:	08001473 	.word	0x08001473
 80013e0:	08001473 	.word	0x08001473
 80013e4:	08001473 	.word	0x08001473
 80013e8:	08001473 	.word	0x08001473
 80013ec:	08001473 	.word	0x08001473
 80013f0:	08001473 	.word	0x08001473
 80013f4:	08001473 	.word	0x08001473
 80013f8:	08001473 	.word	0x08001473
 80013fc:	08001473 	.word	0x08001473
 8001400:	08001473 	.word	0x08001473
 8001404:	08001473 	.word	0x08001473
 8001408:	08001421 	.word	0x08001421
 800140c:	08001435 	.word	0x08001435
 8001410:	4a79      	ldr	r2, [pc, #484]	; (80015f8 <HAL_GPIO_Init+0x2b4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001416:	e02c      	b.n	8001472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e029      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	3304      	adds	r3, #4
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e024      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	3308      	adds	r3, #8
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e01f      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	330c      	adds	r3, #12
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e01a      	b.n	8001474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001446:	2304      	movs	r3, #4
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e013      	b.n	8001474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	611a      	str	r2, [r3, #16]
          break;
 800145e:	e009      	b.n	8001474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	615a      	str	r2, [r3, #20]
          break;
 800146a:	e003      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x130>
          break;
 8001472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d801      	bhi.n	800147e <HAL_GPIO_Init+0x13a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	e001      	b.n	8001482 <HAL_GPIO_Init+0x13e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d802      	bhi.n	8001490 <HAL_GPIO_Init+0x14c>
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x152>
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	3b08      	subs	r3, #8
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	210f      	movs	r1, #15
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	401a      	ands	r2, r3
 80014a8:	6a39      	ldr	r1, [r7, #32]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80b1 	beq.w	8001626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014dc:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_GPIO_Init+0x2bc>)
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a40      	ldr	r2, [pc, #256]	; (8001604 <HAL_GPIO_Init+0x2c0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x1ec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <HAL_GPIO_Init+0x2c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1e8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3e      	ldr	r2, [pc, #248]	; (800160c <HAL_GPIO_Init+0x2c8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1e4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_GPIO_Init+0x2cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1e0>
 8001520:	2303      	movs	r3, #3
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001524:	2304      	movs	r3, #4
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001530:	2300      	movs	r3, #0
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001542:	492f      	ldr	r1, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x2bc>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4928      	ldr	r1, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	491e      	ldr	r1, [pc, #120]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4918      	ldr	r1, [pc, #96]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4914      	ldr	r1, [pc, #80]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d021      	beq.n	8001618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e021      	b.n	8001626 <HAL_GPIO_Init+0x2e2>
 80015e2:	bf00      	nop
 80015e4:	10320000 	.word	0x10320000
 80015e8:	10310000 	.word	0x10310000
 80015ec:	10220000 	.word	0x10220000
 80015f0:	10210000 	.word	0x10210000
 80015f4:	10120000 	.word	0x10120000
 80015f8:	10110000 	.word	0x10110000
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	40010800 	.word	0x40010800
 8001608:	40010c00 	.word	0x40010c00
 800160c:	40011000 	.word	0x40011000
 8001610:	40011400 	.word	0x40011400
 8001614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_GPIO_Init+0x304>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	43db      	mvns	r3, r3
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001622:	4013      	ands	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae8e 	bne.w	8001358 <HAL_GPIO_Init+0x14>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	; 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43d9      	mvns	r1, r3
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	400b      	ands	r3, r1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e272      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	4b8f      	ldr	r3, [pc, #572]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d112      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
 80016e8:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d10b      	bne.n	800170e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d06c      	beq.n	80017dc <HAL_RCC_OscConfig+0x12c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d168      	bne.n	80017dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e24c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x76>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e02e      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a77      	ldr	r2, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xbc>
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xd4>
 800176c:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fbec 	bl	8000f68 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fbe8 	bl	8000f68 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e200      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xe4>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fbd8 	bl	8000f68 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fbd4 	bl	8000f68 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1ec      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x10c>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1c0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4939      	ldr	r1, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb8d 	bl	8000f68 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fb89 	bl	8000f68 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1a1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x270>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb6c 	bl	8000f68 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fb68 	bl	8000f68 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e180      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03a      	beq.n	8001934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fb4c 	bl	8000f68 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb48 	bl	8000f68 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e160      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 face 	bl	8001e94 <RCC_Delay>
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fb32 	bl	8000f68 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001906:	e00f      	b.n	8001928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fb2e 	bl	8000f68 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d908      	bls.n	8001928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e146      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	42420000 	.word	0x42420000
 8001924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e9      	bne.n	8001908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a6 	beq.w	8001a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7e      	ldr	r2, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff faef 	bl	8000f68 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff faeb 	bl	8000f68 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e103      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4c8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x312>
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e02d      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x334>
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	e01c      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x356>
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x36e>
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a5a      	ldr	r2, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa9f 	bl	8000f68 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa9b 	bl	8000f68 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0b1      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ee      	beq.n	8001a2e <HAL_RCC_OscConfig+0x37e>
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fa89 	bl	8000f68 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fa85 	bl	8000f68 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e09b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ee      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d061      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d146      	bne.n	8001b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fa59 	bl	8000f68 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fa55 	bl	8000f68 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e06d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4921      	ldr	r1, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a19      	ldr	r1, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	430b      	orrs	r3, r1
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa29 	bl	8000f68 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fa25 	bl	8000f68 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46a>
 8001b38:	e035      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa12 	bl	8000f68 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fa0e 	bl	8000f68 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e026      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x498>
 8001b66:	e01e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e019      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x500>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d0      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d910      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4965      	ldr	r1, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d040      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e073      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e06b      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f960 	bl	8000f68 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f95c 	bl	8000f68 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e053      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d210      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	490a      	ldr	r1, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1cc>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f8be 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080043a4 	.word	0x080043a4
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	20000010 	.word	0x20000010

08001d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x30>
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x36>
 8001db6:	e027      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	613b      	str	r3, [r7, #16]
      break;
 8001dbc:	e027      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	0c5b      	lsrs	r3, r3, #17
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e004      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	613b      	str	r3, [r7, #16]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	693b      	ldr	r3, [r7, #16]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	080043bc 	.word	0x080043bc
 8001e28:	080043cc 	.word	0x080043cc
 8001e2c:	003d0900 	.word	0x003d0900

08001e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff2 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	080043b4 	.word	0x080043b4

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	080043b4 	.word	0x080043b4

08001e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <RCC_Delay+0x34>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <RCC_Delay+0x38>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a5b      	lsrs	r3, r3, #9
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb0:	bf00      	nop
  }
  while (Delay --);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	60fa      	str	r2, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f9      	bne.n	8001eb0 <RCC_Delay+0x1c>
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e041      	b.n	8001f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fee8 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f000 fab2 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e041      	b.n	8002004 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f839 	bl	800200c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4610      	mov	r0, r2
 8001fae:	f000 fa63 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
	...

08002020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_TIM_PWM_Start+0x24>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e022      	b.n	800208a <HAL_TIM_PWM_Start+0x6a>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d109      	bne.n	800205e <HAL_TIM_PWM_Start+0x3e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e015      	b.n	800208a <HAL_TIM_PWM_Start+0x6a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d109      	bne.n	8002078 <HAL_TIM_PWM_Start+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e008      	b.n	800208a <HAL_TIM_PWM_Start+0x6a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e05e      	b.n	8002150 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_PWM_Start+0x82>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a0:	e013      	b.n	80020ca <HAL_TIM_PWM_Start+0xaa>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d104      	bne.n	80020b2 <HAL_TIM_PWM_Start+0x92>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b0:	e00b      	b.n	80020ca <HAL_TIM_PWM_Start+0xaa>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d104      	bne.n	80020c2 <HAL_TIM_PWM_Start+0xa2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c0:	e003      	b.n	80020ca <HAL_TIM_PWM_Start+0xaa>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fc50 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_TIM_PWM_Start+0x138>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d107      	bne.n	80020f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_PWM_Start+0x138>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_TIM_PWM_Start+0xfa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002104:	d009      	beq.n	800211a <HAL_TIM_PWM_Start+0xfa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_TIM_PWM_Start+0x13c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_TIM_PWM_Start+0xfa>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_TIM_PWM_Start+0x140>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d111      	bne.n	800213e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b06      	cmp	r3, #6
 800212a:	d010      	beq.n	800214e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	e007      	b.n	800214e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800

08002164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800217e:	2302      	movs	r3, #2
 8002180:	e0ae      	b.n	80022e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	f200 809f 	bhi.w	80022d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021cd 	.word	0x080021cd
 800219c:	080022d1 	.word	0x080022d1
 80021a0:	080022d1 	.word	0x080022d1
 80021a4:	080022d1 	.word	0x080022d1
 80021a8:	0800220d 	.word	0x0800220d
 80021ac:	080022d1 	.word	0x080022d1
 80021b0:	080022d1 	.word	0x080022d1
 80021b4:	080022d1 	.word	0x080022d1
 80021b8:	0800224f 	.word	0x0800224f
 80021bc:	080022d1 	.word	0x080022d1
 80021c0:	080022d1 	.word	0x080022d1
 80021c4:	080022d1 	.word	0x080022d1
 80021c8:	0800228f 	.word	0x0800228f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f9b2 	bl	800253c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6999      	ldr	r1, [r3, #24]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	619a      	str	r2, [r3, #24]
      break;
 800220a:	e064      	b.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f9f8 	bl	8002608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	021a      	lsls	r2, r3, #8
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	619a      	str	r2, [r3, #24]
      break;
 800224c:	e043      	b.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fa41 	bl	80026dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0208 	orr.w	r2, r2, #8
 8002268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0204 	bic.w	r2, r2, #4
 8002278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69d9      	ldr	r1, [r3, #28]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	61da      	str	r2, [r3, #28]
      break;
 800228c:	e023      	b.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fa8b 	bl	80027b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	021a      	lsls	r2, r3, #8
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	61da      	str	r2, [r3, #28]
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
      break;
 80022d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022de:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x1c>
 8002300:	2302      	movs	r3, #2
 8002302:	e0b4      	b.n	800246e <HAL_TIM_ConfigClockSource+0x186>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d03e      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0xd4>
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	f200 8087 	bhi.w	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	f000 8086 	beq.w	800245a <HAL_TIM_ConfigClockSource+0x172>
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d87f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	d01a      	beq.n	800238e <HAL_TIM_ConfigClockSource+0xa6>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d87b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b60      	cmp	r3, #96	; 0x60
 800235e:	d050      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x11a>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d877      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b50      	cmp	r3, #80	; 0x50
 8002366:	d03c      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d873      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d058      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x13a>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d86f      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	d064      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d86b      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d060      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d867      	bhi.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 8002388:	2b10      	cmp	r3, #16
 800238a:	d05a      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	e062      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800239e:	f000 facc 	bl	800293a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	609a      	str	r2, [r3, #8]
      break;
 80023ba:	e04f      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023cc:	f000 fab5 	bl	800293a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023de:	609a      	str	r2, [r3, #8]
      break;
 80023e0:	e03c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	461a      	mov	r2, r3
 80023f0:	f000 fa2c 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2150      	movs	r1, #80	; 0x50
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fa83 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002400:	e02c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800240e:	461a      	mov	r2, r3
 8002410:	f000 fa4a 	bl	80028a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2160      	movs	r1, #96	; 0x60
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fa73 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002420:	e01c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	461a      	mov	r2, r3
 8002430:	f000 fa0c 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa63 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002440:	e00c      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f000 fa5a 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002452:	e003      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e000      	b.n	800245c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800245a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <TIM_Base_SetConfig+0xbc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a25      	ldr	r2, [pc, #148]	; (8002538 <TIM_Base_SetConfig+0xc0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <TIM_Base_SetConfig+0xbc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <TIM_Base_SetConfig+0xc0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 0201 	bic.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 0302 	bic.w	r3, r3, #2
 8002584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <TIM_OC1_SetConfig+0xc8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10c      	bne.n	80025b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f023 0308 	bic.w	r3, r3, #8
 800259e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <TIM_OC1_SetConfig+0xc8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d111      	bne.n	80025de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00

08002608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 0210 	bic.w	r2, r3, #16
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0320 	bic.w	r3, r3, #32
 8002652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d113      	bne.n	80026b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00

080026dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <TIM_OC3_SetConfig+0xd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <TIM_OC3_SetConfig+0xd0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d113      	bne.n	8002786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00

080027b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	031b      	lsls	r3, r3, #12
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <TIM_OC4_SetConfig+0x98>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d109      	bne.n	8002824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e046      	b.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d009      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e03d      	b.n	8002b14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e042      	b.n	8002bb6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe f93d 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2224      	movs	r2, #36	; 0x24
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fd40 	bl	80035e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d121      	bne.n	8002c1c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_Transmit_IT+0x26>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e01a      	b.n	8002c1e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2221      	movs	r2, #33	; 0x21
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08c      	sub	sp, #48	; 0x30
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d14a      	bne.n	8002cd8 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e043      	b.n	8002cda <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 faea 	bl	800323e <UART_Start_Receive_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12c      	bne.n	8002cd2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d125      	bne.n	8002ccc <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f043 0310 	orr.w	r3, r3, #16
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8002cb8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6a39      	ldr	r1, [r7, #32]
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e5      	bne.n	8002c96 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002cca:	e002      	b.n	8002cd2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cd6:	e000      	b.n	8002cda <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0ba      	sub	sp, #232	; 0xe8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_UART_IRQHandler+0x66>
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fb91 	bl	800346a <UART_Receive_IT>
      return;
 8002d48:	e25b      	b.n	8003202 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80de 	beq.w	8002f10 <HAL_UART_IRQHandler+0x22c>
 8002d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80d1 	beq.w	8002f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0xae>
 8002d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_UART_IRQHandler+0xd2>
 8002d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_UART_IRQHandler+0xf6>
 8002dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <HAL_UART_IRQHandler+0x126>
 8002de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f043 0208 	orr.w	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 81f2 	beq.w	80031f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_UART_IRQHandler+0x14e>
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fb1c 	bl	800346a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_UART_IRQHandler+0x17a>
 8002e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04f      	beq.n	8002efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa26 	bl	80032b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d041      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3314      	adds	r3, #20
 8002e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1d9      	bne.n	8002e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d013      	beq.n	8002eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	4a7e      	ldr	r2, [pc, #504]	; (80030c4 <HAL_UART_IRQHandler+0x3e0>)
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f9be 	bl	8001254 <HAL_DMA_Abort_IT>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	e00e      	b.n	8002f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f99c 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	e00a      	b.n	8002f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f998 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	e006      	b.n	8002f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f994 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002f0a:	e175      	b.n	80031f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	bf00      	nop
    return;
 8002f0e:	e173      	b.n	80031f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f040 814f 	bne.w	80031b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8148 	beq.w	80031b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8141 	beq.w	80031b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80b6 	beq.w	80030c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8145 	beq.w	80031fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f080 813e 	bcs.w	80031fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	f000 8088 	beq.w	80030a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fc0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1d9      	bne.n	8002f94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3314      	adds	r3, #20
 8003000:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003004:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800300c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e1      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800302c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003040:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003046:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800304e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e3      	bne.n	800301c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003074:	f023 0310 	bic.w	r3, r3, #16
 8003078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003086:	65ba      	str	r2, [r7, #88]	; 0x58
 8003088:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800308c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e3      	bne.n	8003062 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f89d 	bl	80011de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fc60 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030c0:	e09c      	b.n	80031fc <HAL_UART_IRQHandler+0x518>
 80030c2:	bf00      	nop
 80030c4:	08003375 	.word	0x08003375
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 808e 	beq.w	8003200 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8089 	beq.w	8003200 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003112:	647a      	str	r2, [r7, #68]	; 0x44
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	623b      	str	r3, [r7, #32]
   return(result);
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800314a:	633a      	str	r2, [r7, #48]	; 0x30
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e3      	bne.n	8003126 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	60fb      	str	r3, [r7, #12]
   return(result);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0310 	bic.w	r3, r3, #16
 8003182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003190:	61fa      	str	r2, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	617b      	str	r3, [r7, #20]
   return(result);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e3      	bne.n	800316c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fbe5 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031b6:	e023      	b.n	8003200 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_UART_IRQHandler+0x4f4>
 80031c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8e3 	bl	800339c <UART_Transmit_IT>
    return;
 80031d6:	e014      	b.n	8003202 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <HAL_UART_IRQHandler+0x51e>
 80031e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f922 	bl	800343a <UART_EndTransmit_IT>
    return;
 80031f6:	e004      	b.n	8003202 <HAL_UART_IRQHandler+0x51e>
    return;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <HAL_UART_IRQHandler+0x51e>
      return;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_UART_IRQHandler+0x51e>
      return;
 8003200:	bf00      	nop
  }
}
 8003202:	37e8      	adds	r7, #232	; 0xe8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	88fa      	ldrh	r2, [r7, #6]
 8003256:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2222      	movs	r2, #34	; 0x22
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003282:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b095      	sub	sp, #84	; 0x54
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d8:	643a      	str	r2, [r7, #64]	; 0x40
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	d119      	bne.n	800335c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	60bb      	str	r3, [r7, #8]
   return(result);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003348:	61ba      	str	r2, [r7, #24]
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	613b      	str	r3, [r7, #16]
   return(result);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800336a:	bf00      	nop
 800336c:	3754      	adds	r7, #84	; 0x54
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff ff4c 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b21      	cmp	r3, #33	; 0x21
 80033ae:	d13e      	bne.n	800342e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d114      	bne.n	80033e4 <UART_Transmit_IT+0x48>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d110      	bne.n	80033e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]
 80033e2:	e008      	b.n	80033f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	1c59      	adds	r1, r3, #1
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6211      	str	r1, [r2, #32]
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29b      	uxth	r3, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4619      	mov	r1, r3
 8003404:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003428:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff fed4 	bl	8003208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08c      	sub	sp, #48	; 0x30
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b22      	cmp	r3, #34	; 0x22
 800347c:	f040 80ae 	bne.w	80035dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d117      	bne.n	80034ba <UART_Receive_IT+0x50>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
 80034b8:	e026      	b.n	8003508 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d007      	beq.n	80034de <UART_Receive_IT+0x74>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <UART_Receive_IT+0x82>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e008      	b.n	80034fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4619      	mov	r1, r3
 8003516:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003518:	2b00      	cmp	r3, #0
 800351a:	d15d      	bne.n	80035d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0220 	bic.w	r2, r2, #32
 800352a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	2b01      	cmp	r3, #1
 8003560:	d135      	bne.n	80035ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	613b      	str	r3, [r7, #16]
   return(result);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f023 0310 	bic.w	r3, r3, #16
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	623a      	str	r2, [r7, #32]
 800358a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	69f9      	ldr	r1, [r7, #28]
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	61bb      	str	r3, [r7, #24]
   return(result);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d10a      	bne.n	80035c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd f9da 	bl	8000980 <HAL_UARTEx_RxEventCallback>
 80035cc:	e002      	b.n	80035d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fe23 	bl	800321a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e002      	b.n	80035de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3730      	adds	r7, #48	; 0x30
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003622:	f023 030c 	bic.w	r3, r3, #12
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <UART_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003650:	f7fe fc0c 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	e002      	b.n	800365e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7fe fbf4 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 800365c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	0119      	lsls	r1, r3, #4
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fbb2 f2f3 	udiv	r2, r2, r3
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <UART_SetConfig+0x118>)
 8003696:	fba3 0302 	umull	r0, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2064      	movs	r0, #100	; 0x64
 800369e:	fb00 f303 	mul.w	r3, r0, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b4:	4419      	add	r1, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <UART_SetConfig+0x118>)
 80036ce:	fba3 0302 	umull	r0, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2064      	movs	r0, #100	; 0x64
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <UART_SetConfig+0x118>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	440a      	add	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40013800 	.word	0x40013800
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <siscanf>:
 8003704:	b40e      	push	{r1, r2, r3}
 8003706:	f44f 7201 	mov.w	r2, #516	; 0x204
 800370a:	b530      	push	{r4, r5, lr}
 800370c:	b09c      	sub	sp, #112	; 0x70
 800370e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003710:	f854 5b04 	ldr.w	r5, [r4], #4
 8003714:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003718:	9002      	str	r0, [sp, #8]
 800371a:	9006      	str	r0, [sp, #24]
 800371c:	f7fc fd18 	bl	8000150 <strlen>
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <siscanf+0x4c>)
 8003722:	9003      	str	r0, [sp, #12]
 8003724:	930b      	str	r3, [sp, #44]	; 0x2c
 8003726:	2300      	movs	r3, #0
 8003728:	930f      	str	r3, [sp, #60]	; 0x3c
 800372a:	9314      	str	r3, [sp, #80]	; 0x50
 800372c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003730:	9007      	str	r0, [sp, #28]
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <siscanf+0x50>)
 8003734:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003738:	462a      	mov	r2, r5
 800373a:	4623      	mov	r3, r4
 800373c:	a902      	add	r1, sp, #8
 800373e:	6800      	ldr	r0, [r0, #0]
 8003740:	9401      	str	r4, [sp, #4]
 8003742:	f000 f98d 	bl	8003a60 <__ssvfiscanf_r>
 8003746:	b01c      	add	sp, #112	; 0x70
 8003748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800374c:	b003      	add	sp, #12
 800374e:	4770      	bx	lr
 8003750:	08003759 	.word	0x08003759
 8003754:	20000064 	.word	0x20000064

08003758 <__seofread>:
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr

0800375c <memset>:
 800375c:	4603      	mov	r3, r0
 800375e:	4402      	add	r2, r0
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	f803 1b01 	strb.w	r1, [r3], #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <__errno>:
 800376c:	4b01      	ldr	r3, [pc, #4]	; (8003774 <__errno+0x8>)
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000064 	.word	0x20000064

08003778 <__libc_init_array>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	2600      	movs	r6, #0
 800377c:	4d0c      	ldr	r5, [pc, #48]	; (80037b0 <__libc_init_array+0x38>)
 800377e:	4c0d      	ldr	r4, [pc, #52]	; (80037b4 <__libc_init_array+0x3c>)
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	42a6      	cmp	r6, r4
 8003786:	d109      	bne.n	800379c <__libc_init_array+0x24>
 8003788:	f000 fdf8 	bl	800437c <_init>
 800378c:	2600      	movs	r6, #0
 800378e:	4d0a      	ldr	r5, [pc, #40]	; (80037b8 <__libc_init_array+0x40>)
 8003790:	4c0a      	ldr	r4, [pc, #40]	; (80037bc <__libc_init_array+0x44>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	42a6      	cmp	r6, r4
 8003798:	d105      	bne.n	80037a6 <__libc_init_array+0x2e>
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a0:	4798      	blx	r3
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7ee      	b.n	8003784 <__libc_init_array+0xc>
 80037a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037aa:	4798      	blx	r3
 80037ac:	3601      	adds	r6, #1
 80037ae:	e7f2      	b.n	8003796 <__libc_init_array+0x1e>
 80037b0:	080044f0 	.word	0x080044f0
 80037b4:	080044f0 	.word	0x080044f0
 80037b8:	080044f0 	.word	0x080044f0
 80037bc:	080044f4 	.word	0x080044f4

080037c0 <__retarget_lock_acquire_recursive>:
 80037c0:	4770      	bx	lr

080037c2 <__retarget_lock_release_recursive>:
 80037c2:	4770      	bx	lr

080037c4 <_free_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4605      	mov	r5, r0
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d040      	beq.n	800384e <_free_r+0x8a>
 80037cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d0:	1f0c      	subs	r4, r1, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfb8      	it	lt
 80037d6:	18e4      	addlt	r4, r4, r3
 80037d8:	f000 f8dc 	bl	8003994 <__malloc_lock>
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <_free_r+0x8c>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	b933      	cbnz	r3, 80037f0 <_free_r+0x2c>
 80037e2:	6063      	str	r3, [r4, #4]
 80037e4:	6014      	str	r4, [r2, #0]
 80037e6:	4628      	mov	r0, r5
 80037e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ec:	f000 b8d8 	b.w	80039a0 <__malloc_unlock>
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d908      	bls.n	8003806 <_free_r+0x42>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	1821      	adds	r1, r4, r0
 80037f8:	428b      	cmp	r3, r1
 80037fa:	bf01      	itttt	eq
 80037fc:	6819      	ldreq	r1, [r3, #0]
 80037fe:	685b      	ldreq	r3, [r3, #4]
 8003800:	1809      	addeq	r1, r1, r0
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	e7ed      	b.n	80037e2 <_free_r+0x1e>
 8003806:	461a      	mov	r2, r3
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b10b      	cbz	r3, 8003810 <_free_r+0x4c>
 800380c:	42a3      	cmp	r3, r4
 800380e:	d9fa      	bls.n	8003806 <_free_r+0x42>
 8003810:	6811      	ldr	r1, [r2, #0]
 8003812:	1850      	adds	r0, r2, r1
 8003814:	42a0      	cmp	r0, r4
 8003816:	d10b      	bne.n	8003830 <_free_r+0x6c>
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	4401      	add	r1, r0
 800381c:	1850      	adds	r0, r2, r1
 800381e:	4283      	cmp	r3, r0
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	d1e0      	bne.n	80037e6 <_free_r+0x22>
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4408      	add	r0, r1
 800382a:	6010      	str	r0, [r2, #0]
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	e7da      	b.n	80037e6 <_free_r+0x22>
 8003830:	d902      	bls.n	8003838 <_free_r+0x74>
 8003832:	230c      	movs	r3, #12
 8003834:	602b      	str	r3, [r5, #0]
 8003836:	e7d6      	b.n	80037e6 <_free_r+0x22>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	6063      	str	r3, [r4, #4]
 800384a:	6054      	str	r4, [r2, #4]
 800384c:	e7cb      	b.n	80037e6 <_free_r+0x22>
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	20000270 	.word	0x20000270

08003854 <sbrk_aligned>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4e0e      	ldr	r6, [pc, #56]	; (8003890 <sbrk_aligned+0x3c>)
 8003858:	460c      	mov	r4, r1
 800385a:	6831      	ldr	r1, [r6, #0]
 800385c:	4605      	mov	r5, r0
 800385e:	b911      	cbnz	r1, 8003866 <sbrk_aligned+0x12>
 8003860:	f000 fc34 	bl	80040cc <_sbrk_r>
 8003864:	6030      	str	r0, [r6, #0]
 8003866:	4621      	mov	r1, r4
 8003868:	4628      	mov	r0, r5
 800386a:	f000 fc2f 	bl	80040cc <_sbrk_r>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d00a      	beq.n	8003888 <sbrk_aligned+0x34>
 8003872:	1cc4      	adds	r4, r0, #3
 8003874:	f024 0403 	bic.w	r4, r4, #3
 8003878:	42a0      	cmp	r0, r4
 800387a:	d007      	beq.n	800388c <sbrk_aligned+0x38>
 800387c:	1a21      	subs	r1, r4, r0
 800387e:	4628      	mov	r0, r5
 8003880:	f000 fc24 	bl	80040cc <_sbrk_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d101      	bne.n	800388c <sbrk_aligned+0x38>
 8003888:	f04f 34ff 	mov.w	r4, #4294967295
 800388c:	4620      	mov	r0, r4
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	20000274 	.word	0x20000274

08003894 <_malloc_r>:
 8003894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003898:	1ccd      	adds	r5, r1, #3
 800389a:	f025 0503 	bic.w	r5, r5, #3
 800389e:	3508      	adds	r5, #8
 80038a0:	2d0c      	cmp	r5, #12
 80038a2:	bf38      	it	cc
 80038a4:	250c      	movcc	r5, #12
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	4607      	mov	r7, r0
 80038aa:	db01      	blt.n	80038b0 <_malloc_r+0x1c>
 80038ac:	42a9      	cmp	r1, r5
 80038ae:	d905      	bls.n	80038bc <_malloc_r+0x28>
 80038b0:	230c      	movs	r3, #12
 80038b2:	2600      	movs	r6, #0
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4630      	mov	r0, r6
 80038b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003990 <_malloc_r+0xfc>
 80038c0:	f000 f868 	bl	8003994 <__malloc_lock>
 80038c4:	f8d8 3000 	ldr.w	r3, [r8]
 80038c8:	461c      	mov	r4, r3
 80038ca:	bb5c      	cbnz	r4, 8003924 <_malloc_r+0x90>
 80038cc:	4629      	mov	r1, r5
 80038ce:	4638      	mov	r0, r7
 80038d0:	f7ff ffc0 	bl	8003854 <sbrk_aligned>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	4604      	mov	r4, r0
 80038d8:	d155      	bne.n	8003986 <_malloc_r+0xf2>
 80038da:	f8d8 4000 	ldr.w	r4, [r8]
 80038de:	4626      	mov	r6, r4
 80038e0:	2e00      	cmp	r6, #0
 80038e2:	d145      	bne.n	8003970 <_malloc_r+0xdc>
 80038e4:	2c00      	cmp	r4, #0
 80038e6:	d048      	beq.n	800397a <_malloc_r+0xe6>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	4631      	mov	r1, r6
 80038ec:	4638      	mov	r0, r7
 80038ee:	eb04 0903 	add.w	r9, r4, r3
 80038f2:	f000 fbeb 	bl	80040cc <_sbrk_r>
 80038f6:	4581      	cmp	r9, r0
 80038f8:	d13f      	bne.n	800397a <_malloc_r+0xe6>
 80038fa:	6821      	ldr	r1, [r4, #0]
 80038fc:	4638      	mov	r0, r7
 80038fe:	1a6d      	subs	r5, r5, r1
 8003900:	4629      	mov	r1, r5
 8003902:	f7ff ffa7 	bl	8003854 <sbrk_aligned>
 8003906:	3001      	adds	r0, #1
 8003908:	d037      	beq.n	800397a <_malloc_r+0xe6>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	442b      	add	r3, r5
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	f8d8 3000 	ldr.w	r3, [r8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d038      	beq.n	800398a <_malloc_r+0xf6>
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	42a2      	cmp	r2, r4
 800391c:	d12b      	bne.n	8003976 <_malloc_r+0xe2>
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	e00f      	b.n	8003944 <_malloc_r+0xb0>
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	1b52      	subs	r2, r2, r5
 8003928:	d41f      	bmi.n	800396a <_malloc_r+0xd6>
 800392a:	2a0b      	cmp	r2, #11
 800392c:	d917      	bls.n	800395e <_malloc_r+0xca>
 800392e:	1961      	adds	r1, r4, r5
 8003930:	42a3      	cmp	r3, r4
 8003932:	6025      	str	r5, [r4, #0]
 8003934:	bf18      	it	ne
 8003936:	6059      	strne	r1, [r3, #4]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	bf08      	it	eq
 800393c:	f8c8 1000 	streq.w	r1, [r8]
 8003940:	5162      	str	r2, [r4, r5]
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	4638      	mov	r0, r7
 8003946:	f104 060b 	add.w	r6, r4, #11
 800394a:	f000 f829 	bl	80039a0 <__malloc_unlock>
 800394e:	f026 0607 	bic.w	r6, r6, #7
 8003952:	1d23      	adds	r3, r4, #4
 8003954:	1af2      	subs	r2, r6, r3
 8003956:	d0ae      	beq.n	80038b6 <_malloc_r+0x22>
 8003958:	1b9b      	subs	r3, r3, r6
 800395a:	50a3      	str	r3, [r4, r2]
 800395c:	e7ab      	b.n	80038b6 <_malloc_r+0x22>
 800395e:	42a3      	cmp	r3, r4
 8003960:	6862      	ldr	r2, [r4, #4]
 8003962:	d1dd      	bne.n	8003920 <_malloc_r+0x8c>
 8003964:	f8c8 2000 	str.w	r2, [r8]
 8003968:	e7ec      	b.n	8003944 <_malloc_r+0xb0>
 800396a:	4623      	mov	r3, r4
 800396c:	6864      	ldr	r4, [r4, #4]
 800396e:	e7ac      	b.n	80038ca <_malloc_r+0x36>
 8003970:	4634      	mov	r4, r6
 8003972:	6876      	ldr	r6, [r6, #4]
 8003974:	e7b4      	b.n	80038e0 <_malloc_r+0x4c>
 8003976:	4613      	mov	r3, r2
 8003978:	e7cc      	b.n	8003914 <_malloc_r+0x80>
 800397a:	230c      	movs	r3, #12
 800397c:	4638      	mov	r0, r7
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	f000 f80e 	bl	80039a0 <__malloc_unlock>
 8003984:	e797      	b.n	80038b6 <_malloc_r+0x22>
 8003986:	6025      	str	r5, [r4, #0]
 8003988:	e7dc      	b.n	8003944 <_malloc_r+0xb0>
 800398a:	605b      	str	r3, [r3, #4]
 800398c:	deff      	udf	#255	; 0xff
 800398e:	bf00      	nop
 8003990:	20000270 	.word	0x20000270

08003994 <__malloc_lock>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__malloc_lock+0x8>)
 8003996:	f7ff bf13 	b.w	80037c0 <__retarget_lock_acquire_recursive>
 800399a:	bf00      	nop
 800399c:	2000026c 	.word	0x2000026c

080039a0 <__malloc_unlock>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__malloc_unlock+0x8>)
 80039a2:	f7ff bf0e 	b.w	80037c2 <__retarget_lock_release_recursive>
 80039a6:	bf00      	nop
 80039a8:	2000026c 	.word	0x2000026c

080039ac <_sungetc_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	1c4b      	adds	r3, r1, #1
 80039b0:	4614      	mov	r4, r2
 80039b2:	d103      	bne.n	80039bc <_sungetc_r+0x10>
 80039b4:	f04f 35ff 	mov.w	r5, #4294967295
 80039b8:	4628      	mov	r0, r5
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	8993      	ldrh	r3, [r2, #12]
 80039be:	b2cd      	uxtb	r5, r1
 80039c0:	f023 0320 	bic.w	r3, r3, #32
 80039c4:	8193      	strh	r3, [r2, #12]
 80039c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039c8:	6852      	ldr	r2, [r2, #4]
 80039ca:	b18b      	cbz	r3, 80039f0 <_sungetc_r+0x44>
 80039cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ce:	4293      	cmp	r3, r2
 80039d0:	dd08      	ble.n	80039e4 <_sungetc_r+0x38>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	6022      	str	r2, [r4, #0]
 80039d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	e7e9      	b.n	80039b8 <_sungetc_r+0xc>
 80039e4:	4621      	mov	r1, r4
 80039e6:	f000 fb38 	bl	800405a <__submore>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d0f1      	beq.n	80039d2 <_sungetc_r+0x26>
 80039ee:	e7e1      	b.n	80039b4 <_sungetc_r+0x8>
 80039f0:	6921      	ldr	r1, [r4, #16]
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	b151      	cbz	r1, 8003a0c <_sungetc_r+0x60>
 80039f6:	4299      	cmp	r1, r3
 80039f8:	d208      	bcs.n	8003a0c <_sungetc_r+0x60>
 80039fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80039fe:	42a9      	cmp	r1, r5
 8003a00:	d104      	bne.n	8003a0c <_sungetc_r+0x60>
 8003a02:	3b01      	subs	r3, #1
 8003a04:	3201      	adds	r2, #1
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	6062      	str	r2, [r4, #4]
 8003a0a:	e7d5      	b.n	80039b8 <_sungetc_r+0xc>
 8003a0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a14:	6363      	str	r3, [r4, #52]	; 0x34
 8003a16:	2303      	movs	r3, #3
 8003a18:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	2301      	movs	r3, #1
 8003a24:	e7dc      	b.n	80039e0 <_sungetc_r+0x34>

08003a26 <__ssrefill_r>:
 8003a26:	b510      	push	{r4, lr}
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a2c:	b169      	cbz	r1, 8003a4a <__ssrefill_r+0x24>
 8003a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a32:	4299      	cmp	r1, r3
 8003a34:	d001      	beq.n	8003a3a <__ssrefill_r+0x14>
 8003a36:	f7ff fec5 	bl	80037c4 <_free_r>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8003a40:	6063      	str	r3, [r4, #4]
 8003a42:	b113      	cbz	r3, 8003a4a <__ssrefill_r+0x24>
 8003a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	6923      	ldr	r3, [r4, #16]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7f3      	b.n	8003a48 <__ssrefill_r+0x22>

08003a60 <__ssvfiscanf_r>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	460c      	mov	r4, r1
 8003a66:	2100      	movs	r1, #0
 8003a68:	4606      	mov	r6, r0
 8003a6a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003a6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003a72:	49a6      	ldr	r1, [pc, #664]	; (8003d0c <__ssvfiscanf_r+0x2ac>)
 8003a74:	f10d 0804 	add.w	r8, sp, #4
 8003a78:	91a0      	str	r1, [sp, #640]	; 0x280
 8003a7a:	49a5      	ldr	r1, [pc, #660]	; (8003d10 <__ssvfiscanf_r+0x2b0>)
 8003a7c:	4fa5      	ldr	r7, [pc, #660]	; (8003d14 <__ssvfiscanf_r+0x2b4>)
 8003a7e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003d18 <__ssvfiscanf_r+0x2b8>
 8003a82:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003a86:	91a1      	str	r1, [sp, #644]	; 0x284
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	7813      	ldrb	r3, [r2, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 815a 	beq.w	8003d46 <__ssvfiscanf_r+0x2e6>
 8003a92:	5cf9      	ldrb	r1, [r7, r3]
 8003a94:	1c55      	adds	r5, r2, #1
 8003a96:	f011 0108 	ands.w	r1, r1, #8
 8003a9a:	d019      	beq.n	8003ad0 <__ssvfiscanf_r+0x70>
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	dd0f      	ble.n	8003ac2 <__ssvfiscanf_r+0x62>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	5cba      	ldrb	r2, [r7, r2]
 8003aa8:	0712      	lsls	r2, r2, #28
 8003aaa:	d401      	bmi.n	8003ab0 <__ssvfiscanf_r+0x50>
 8003aac:	462a      	mov	r2, r5
 8003aae:	e7ec      	b.n	8003a8a <__ssvfiscanf_r+0x2a>
 8003ab0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	3201      	adds	r2, #1
 8003ab6:	9245      	str	r2, [sp, #276]	; 0x114
 8003ab8:	6862      	ldr	r2, [r4, #4]
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	3a01      	subs	r2, #1
 8003abe:	6062      	str	r2, [r4, #4]
 8003ac0:	e7ec      	b.n	8003a9c <__ssvfiscanf_r+0x3c>
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ac8:	4798      	blx	r3
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0e9      	beq.n	8003aa2 <__ssvfiscanf_r+0x42>
 8003ace:	e7ed      	b.n	8003aac <__ssvfiscanf_r+0x4c>
 8003ad0:	2b25      	cmp	r3, #37	; 0x25
 8003ad2:	d012      	beq.n	8003afa <__ssvfiscanf_r+0x9a>
 8003ad4:	469a      	mov	sl, r3
 8003ad6:	6863      	ldr	r3, [r4, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f340 8092 	ble.w	8003c02 <__ssvfiscanf_r+0x1a2>
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	7813      	ldrb	r3, [r2, #0]
 8003ae2:	4553      	cmp	r3, sl
 8003ae4:	f040 812f 	bne.w	8003d46 <__ssvfiscanf_r+0x2e6>
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	3201      	adds	r2, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	6063      	str	r3, [r4, #4]
 8003af0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003af2:	6022      	str	r2, [r4, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	9345      	str	r3, [sp, #276]	; 0x114
 8003af8:	e7d8      	b.n	8003aac <__ssvfiscanf_r+0x4c>
 8003afa:	9141      	str	r1, [sp, #260]	; 0x104
 8003afc:	9143      	str	r1, [sp, #268]	; 0x10c
 8003afe:	7853      	ldrb	r3, [r2, #1]
 8003b00:	2b2a      	cmp	r3, #42	; 0x2a
 8003b02:	bf04      	itt	eq
 8003b04:	2310      	moveq	r3, #16
 8003b06:	1c95      	addeq	r5, r2, #2
 8003b08:	f04f 020a 	mov.w	r2, #10
 8003b0c:	bf08      	it	eq
 8003b0e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003b10:	46aa      	mov	sl, r5
 8003b12:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003b16:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003b1a:	2b09      	cmp	r3, #9
 8003b1c:	d91c      	bls.n	8003b58 <__ssvfiscanf_r+0xf8>
 8003b1e:	2203      	movs	r2, #3
 8003b20:	487d      	ldr	r0, [pc, #500]	; (8003d18 <__ssvfiscanf_r+0x2b8>)
 8003b22:	f000 fae3 	bl	80040ec <memchr>
 8003b26:	b138      	cbz	r0, 8003b38 <__ssvfiscanf_r+0xd8>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4655      	mov	r5, sl
 8003b2c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b2e:	eba0 0009 	sub.w	r0, r0, r9
 8003b32:	4083      	lsls	r3, r0
 8003b34:	4313      	orrs	r3, r2
 8003b36:	9341      	str	r3, [sp, #260]	; 0x104
 8003b38:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b3c:	2b78      	cmp	r3, #120	; 0x78
 8003b3e:	d806      	bhi.n	8003b4e <__ssvfiscanf_r+0xee>
 8003b40:	2b57      	cmp	r3, #87	; 0x57
 8003b42:	d810      	bhi.n	8003b66 <__ssvfiscanf_r+0x106>
 8003b44:	2b25      	cmp	r3, #37	; 0x25
 8003b46:	d0c5      	beq.n	8003ad4 <__ssvfiscanf_r+0x74>
 8003b48:	d856      	bhi.n	8003bf8 <__ssvfiscanf_r+0x198>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d064      	beq.n	8003c18 <__ssvfiscanf_r+0x1b8>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b52:	230a      	movs	r3, #10
 8003b54:	9342      	str	r3, [sp, #264]	; 0x108
 8003b56:	e075      	b.n	8003c44 <__ssvfiscanf_r+0x1e4>
 8003b58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003b5a:	4655      	mov	r5, sl
 8003b5c:	fb02 1103 	mla	r1, r2, r3, r1
 8003b60:	3930      	subs	r1, #48	; 0x30
 8003b62:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b64:	e7d4      	b.n	8003b10 <__ssvfiscanf_r+0xb0>
 8003b66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003b6a:	2a20      	cmp	r2, #32
 8003b6c:	d8ef      	bhi.n	8003b4e <__ssvfiscanf_r+0xee>
 8003b6e:	a101      	add	r1, pc, #4	; (adr r1, 8003b74 <__ssvfiscanf_r+0x114>)
 8003b70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b74:	08003c27 	.word	0x08003c27
 8003b78:	08003b4f 	.word	0x08003b4f
 8003b7c:	08003b4f 	.word	0x08003b4f
 8003b80:	08003c85 	.word	0x08003c85
 8003b84:	08003b4f 	.word	0x08003b4f
 8003b88:	08003b4f 	.word	0x08003b4f
 8003b8c:	08003b4f 	.word	0x08003b4f
 8003b90:	08003b4f 	.word	0x08003b4f
 8003b94:	08003b4f 	.word	0x08003b4f
 8003b98:	08003b4f 	.word	0x08003b4f
 8003b9c:	08003b4f 	.word	0x08003b4f
 8003ba0:	08003c9b 	.word	0x08003c9b
 8003ba4:	08003c81 	.word	0x08003c81
 8003ba8:	08003bff 	.word	0x08003bff
 8003bac:	08003bff 	.word	0x08003bff
 8003bb0:	08003bff 	.word	0x08003bff
 8003bb4:	08003b4f 	.word	0x08003b4f
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003b4f 	.word	0x08003b4f
 8003bc0:	08003b4f 	.word	0x08003b4f
 8003bc4:	08003b4f 	.word	0x08003b4f
 8003bc8:	08003b4f 	.word	0x08003b4f
 8003bcc:	08003cab 	.word	0x08003cab
 8003bd0:	08003c79 	.word	0x08003c79
 8003bd4:	08003c1f 	.word	0x08003c1f
 8003bd8:	08003b4f 	.word	0x08003b4f
 8003bdc:	08003b4f 	.word	0x08003b4f
 8003be0:	08003ca7 	.word	0x08003ca7
 8003be4:	08003b4f 	.word	0x08003b4f
 8003be8:	08003c81 	.word	0x08003c81
 8003bec:	08003b4f 	.word	0x08003b4f
 8003bf0:	08003b4f 	.word	0x08003b4f
 8003bf4:	08003c27 	.word	0x08003c27
 8003bf8:	3b45      	subs	r3, #69	; 0x45
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d8a7      	bhi.n	8003b4e <__ssvfiscanf_r+0xee>
 8003bfe:	2305      	movs	r3, #5
 8003c00:	e01f      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c08:	4798      	blx	r3
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	f43f af67 	beq.w	8003ade <__ssvfiscanf_r+0x7e>
 8003c10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c12:	2800      	cmp	r0, #0
 8003c14:	f040 808d 	bne.w	8003d32 <__ssvfiscanf_r+0x2d2>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	e08f      	b.n	8003d3e <__ssvfiscanf_r+0x2de>
 8003c1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c20:	f042 0220 	orr.w	r2, r2, #32
 8003c24:	9241      	str	r2, [sp, #260]	; 0x104
 8003c26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	9241      	str	r2, [sp, #260]	; 0x104
 8003c2e:	2210      	movs	r2, #16
 8003c30:	2b6f      	cmp	r3, #111	; 0x6f
 8003c32:	bf34      	ite	cc
 8003c34:	2303      	movcc	r3, #3
 8003c36:	2304      	movcs	r3, #4
 8003c38:	9242      	str	r2, [sp, #264]	; 0x108
 8003c3a:	e002      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9342      	str	r3, [sp, #264]	; 0x108
 8003c40:	2303      	movs	r3, #3
 8003c42:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	dd3d      	ble.n	8003cc6 <__ssvfiscanf_r+0x266>
 8003c4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c4c:	0659      	lsls	r1, r3, #25
 8003c4e:	d404      	bmi.n	8003c5a <__ssvfiscanf_r+0x1fa>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	5cba      	ldrb	r2, [r7, r2]
 8003c56:	0712      	lsls	r2, r2, #28
 8003c58:	d43c      	bmi.n	8003cd4 <__ssvfiscanf_r+0x274>
 8003c5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	dc4b      	bgt.n	8003cf8 <__ssvfiscanf_r+0x298>
 8003c60:	466b      	mov	r3, sp
 8003c62:	4622      	mov	r2, r4
 8003c64:	4630      	mov	r0, r6
 8003c66:	a941      	add	r1, sp, #260	; 0x104
 8003c68:	f000 f872 	bl	8003d50 <_scanf_chars>
 8003c6c:	2801      	cmp	r0, #1
 8003c6e:	d06a      	beq.n	8003d46 <__ssvfiscanf_r+0x2e6>
 8003c70:	2802      	cmp	r0, #2
 8003c72:	f47f af1b 	bne.w	8003aac <__ssvfiscanf_r+0x4c>
 8003c76:	e7cb      	b.n	8003c10 <__ssvfiscanf_r+0x1b0>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	9342      	str	r3, [sp, #264]	; 0x108
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e7e0      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003c80:	220a      	movs	r2, #10
 8003c82:	e7d5      	b.n	8003c30 <__ssvfiscanf_r+0x1d0>
 8003c84:	4629      	mov	r1, r5
 8003c86:	4640      	mov	r0, r8
 8003c88:	f000 f9ae 	bl	8003fe8 <__sccl>
 8003c8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c8e:	4605      	mov	r5, r0
 8003c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c94:	9341      	str	r3, [sp, #260]	; 0x104
 8003c96:	2301      	movs	r3, #1
 8003c98:	e7d3      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003c9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca0:	9341      	str	r3, [sp, #260]	; 0x104
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e7cd      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e7cb      	b.n	8003c42 <__ssvfiscanf_r+0x1e2>
 8003caa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003cac:	06c3      	lsls	r3, r0, #27
 8003cae:	f53f aefd 	bmi.w	8003aac <__ssvfiscanf_r+0x4c>
 8003cb2:	9b00      	ldr	r3, [sp, #0]
 8003cb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cb6:	1d19      	adds	r1, r3, #4
 8003cb8:	9100      	str	r1, [sp, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	07c0      	lsls	r0, r0, #31
 8003cbe:	bf4c      	ite	mi
 8003cc0:	801a      	strhmi	r2, [r3, #0]
 8003cc2:	601a      	strpl	r2, [r3, #0]
 8003cc4:	e6f2      	b.n	8003aac <__ssvfiscanf_r+0x4c>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4630      	mov	r0, r6
 8003cca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ccc:	4798      	blx	r3
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d0bb      	beq.n	8003c4a <__ssvfiscanf_r+0x1ea>
 8003cd2:	e79d      	b.n	8003c10 <__ssvfiscanf_r+0x1b0>
 8003cd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cd6:	3201      	adds	r2, #1
 8003cd8:	9245      	str	r2, [sp, #276]	; 0x114
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	2a00      	cmp	r2, #0
 8003ce0:	6062      	str	r2, [r4, #4]
 8003ce2:	dd02      	ble.n	8003cea <__ssvfiscanf_r+0x28a>
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	e7b2      	b.n	8003c50 <__ssvfiscanf_r+0x1f0>
 8003cea:	4621      	mov	r1, r4
 8003cec:	4630      	mov	r0, r6
 8003cee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cf0:	4798      	blx	r3
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0ac      	beq.n	8003c50 <__ssvfiscanf_r+0x1f0>
 8003cf6:	e78b      	b.n	8003c10 <__ssvfiscanf_r+0x1b0>
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	dc0f      	bgt.n	8003d1c <__ssvfiscanf_r+0x2bc>
 8003cfc:	466b      	mov	r3, sp
 8003cfe:	4622      	mov	r2, r4
 8003d00:	4630      	mov	r0, r6
 8003d02:	a941      	add	r1, sp, #260	; 0x104
 8003d04:	f000 f87e 	bl	8003e04 <_scanf_i>
 8003d08:	e7b0      	b.n	8003c6c <__ssvfiscanf_r+0x20c>
 8003d0a:	bf00      	nop
 8003d0c:	080039ad 	.word	0x080039ad
 8003d10:	08003a27 	.word	0x08003a27
 8003d14:	080043ee 	.word	0x080043ee
 8003d18:	080043ce 	.word	0x080043ce
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <__ssvfiscanf_r+0x2ec>)
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f43f aec4 	beq.w	8003aac <__ssvfiscanf_r+0x4c>
 8003d24:	466b      	mov	r3, sp
 8003d26:	4622      	mov	r2, r4
 8003d28:	4630      	mov	r0, r6
 8003d2a:	a941      	add	r1, sp, #260	; 0x104
 8003d2c:	f3af 8000 	nop.w
 8003d30:	e79c      	b.n	8003c6c <__ssvfiscanf_r+0x20c>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d38:	bf18      	it	ne
 8003d3a:	f04f 30ff 	movne.w	r0, #4294967295
 8003d3e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d46:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d48:	e7f9      	b.n	8003d3e <__ssvfiscanf_r+0x2de>
 8003d4a:	bf00      	nop
 8003d4c:	00000000 	.word	0x00000000

08003d50 <_scanf_chars>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	4615      	mov	r5, r2
 8003d56:	688a      	ldr	r2, [r1, #8]
 8003d58:	4680      	mov	r8, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b932      	cbnz	r2, 8003d6c <_scanf_chars+0x1c>
 8003d5e:	698a      	ldr	r2, [r1, #24]
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2201      	moveq	r2, #1
 8003d66:	f04f 32ff 	movne.w	r2, #4294967295
 8003d6a:	608a      	str	r2, [r1, #8]
 8003d6c:	2700      	movs	r7, #0
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003e00 <_scanf_chars+0xb0>
 8003d74:	06d1      	lsls	r1, r2, #27
 8003d76:	bf5f      	itttt	pl
 8003d78:	681a      	ldrpl	r2, [r3, #0]
 8003d7a:	1d11      	addpl	r1, r2, #4
 8003d7c:	6019      	strpl	r1, [r3, #0]
 8003d7e:	6816      	ldrpl	r6, [r2, #0]
 8003d80:	69a0      	ldr	r0, [r4, #24]
 8003d82:	b188      	cbz	r0, 8003da8 <_scanf_chars+0x58>
 8003d84:	2801      	cmp	r0, #1
 8003d86:	d107      	bne.n	8003d98 <_scanf_chars+0x48>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	6963      	ldr	r3, [r4, #20]
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	b953      	cbnz	r3, 8003da8 <_scanf_chars+0x58>
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	d031      	beq.n	8003dfa <_scanf_chars+0xaa>
 8003d96:	e022      	b.n	8003dde <_scanf_chars+0x8e>
 8003d98:	2802      	cmp	r0, #2
 8003d9a:	d120      	bne.n	8003dde <_scanf_chars+0x8e>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003da4:	071b      	lsls	r3, r3, #28
 8003da6:	d41a      	bmi.n	8003dde <_scanf_chars+0x8e>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	3701      	adds	r7, #1
 8003dac:	06da      	lsls	r2, r3, #27
 8003dae:	bf5e      	ittt	pl
 8003db0:	682b      	ldrpl	r3, [r5, #0]
 8003db2:	781b      	ldrbpl	r3, [r3, #0]
 8003db4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003db8:	682a      	ldr	r2, [r5, #0]
 8003dba:	686b      	ldr	r3, [r5, #4]
 8003dbc:	3201      	adds	r2, #1
 8003dbe:	602a      	str	r2, [r5, #0]
 8003dc0:	68a2      	ldr	r2, [r4, #8]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	606b      	str	r3, [r5, #4]
 8003dc8:	60a2      	str	r2, [r4, #8]
 8003dca:	b142      	cbz	r2, 8003dde <_scanf_chars+0x8e>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dcd7      	bgt.n	8003d80 <_scanf_chars+0x30>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003dd8:	4798      	blx	r3
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d0d0      	beq.n	8003d80 <_scanf_chars+0x30>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f013 0310 	ands.w	r3, r3, #16
 8003de4:	d105      	bne.n	8003df2 <_scanf_chars+0xa2>
 8003de6:	68e2      	ldr	r2, [r4, #12]
 8003de8:	3201      	adds	r2, #1
 8003dea:	60e2      	str	r2, [r4, #12]
 8003dec:	69a2      	ldr	r2, [r4, #24]
 8003dee:	b102      	cbz	r2, 8003df2 <_scanf_chars+0xa2>
 8003df0:	7033      	strb	r3, [r6, #0]
 8003df2:	2000      	movs	r0, #0
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	443b      	add	r3, r7
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	bf00      	nop
 8003e00:	080043ee 	.word	0x080043ee

08003e04 <_scanf_i>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	460c      	mov	r4, r1
 8003e0a:	4698      	mov	r8, r3
 8003e0c:	4b72      	ldr	r3, [pc, #456]	; (8003fd8 <_scanf_i+0x1d4>)
 8003e0e:	b087      	sub	sp, #28
 8003e10:	4682      	mov	sl, r0
 8003e12:	4616      	mov	r6, r2
 8003e14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e18:	ab03      	add	r3, sp, #12
 8003e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <_scanf_i+0x1d8>)
 8003e20:	69a1      	ldr	r1, [r4, #24]
 8003e22:	4a6f      	ldr	r2, [pc, #444]	; (8003fe0 <_scanf_i+0x1dc>)
 8003e24:	4627      	mov	r7, r4
 8003e26:	2903      	cmp	r1, #3
 8003e28:	bf18      	it	ne
 8003e2a:	461a      	movne	r2, r3
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	9201      	str	r2, [sp, #4]
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003e36:	bf81      	itttt	hi
 8003e38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003e3c:	eb03 0905 	addhi.w	r9, r3, r5
 8003e40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003e44:	60a3      	strhi	r3, [r4, #8]
 8003e46:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003e4a:	bf98      	it	ls
 8003e4c:	f04f 0900 	movls.w	r9, #0
 8003e50:	463d      	mov	r5, r7
 8003e52:	f04f 0b00 	mov.w	fp, #0
 8003e56:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	6831      	ldr	r1, [r6, #0]
 8003e5e:	ab03      	add	r3, sp, #12
 8003e60:	2202      	movs	r2, #2
 8003e62:	7809      	ldrb	r1, [r1, #0]
 8003e64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003e68:	f000 f940 	bl	80040ec <memchr>
 8003e6c:	b328      	cbz	r0, 8003eba <_scanf_i+0xb6>
 8003e6e:	f1bb 0f01 	cmp.w	fp, #1
 8003e72:	d159      	bne.n	8003f28 <_scanf_i+0x124>
 8003e74:	6862      	ldr	r2, [r4, #4]
 8003e76:	b92a      	cbnz	r2, 8003e84 <_scanf_i+0x80>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	6022      	str	r2, [r4, #0]
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003e8a:	6022      	str	r2, [r4, #0]
 8003e8c:	68a2      	ldr	r2, [r4, #8]
 8003e8e:	1e51      	subs	r1, r2, #1
 8003e90:	60a1      	str	r1, [r4, #8]
 8003e92:	b192      	cbz	r2, 8003eba <_scanf_i+0xb6>
 8003e94:	6832      	ldr	r2, [r6, #0]
 8003e96:	1c51      	adds	r1, r2, #1
 8003e98:	6031      	str	r1, [r6, #0]
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	f805 2b01 	strb.w	r2, [r5], #1
 8003ea0:	6872      	ldr	r2, [r6, #4]
 8003ea2:	3a01      	subs	r2, #1
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	6072      	str	r2, [r6, #4]
 8003ea8:	dc07      	bgt.n	8003eba <_scanf_i+0xb6>
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4650      	mov	r0, sl
 8003eae:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003eb2:	4790      	blx	r2
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	f040 8085 	bne.w	8003fc4 <_scanf_i+0x1c0>
 8003eba:	f10b 0b01 	add.w	fp, fp, #1
 8003ebe:	f1bb 0f03 	cmp.w	fp, #3
 8003ec2:	d1cb      	bne.n	8003e5c <_scanf_i+0x58>
 8003ec4:	6863      	ldr	r3, [r4, #4]
 8003ec6:	b90b      	cbnz	r3, 8003ecc <_scanf_i+0xc8>
 8003ec8:	230a      	movs	r3, #10
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	4945      	ldr	r1, [pc, #276]	; (8003fe4 <_scanf_i+0x1e0>)
 8003ed0:	6960      	ldr	r0, [r4, #20]
 8003ed2:	1ac9      	subs	r1, r1, r3
 8003ed4:	f000 f888 	bl	8003fe8 <__sccl>
 8003ed8:	f04f 0b00 	mov.w	fp, #0
 8003edc:	68a3      	ldr	r3, [r4, #8]
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d03d      	beq.n	8003f60 <_scanf_i+0x15c>
 8003ee4:	6831      	ldr	r1, [r6, #0]
 8003ee6:	6960      	ldr	r0, [r4, #20]
 8003ee8:	f891 c000 	ldrb.w	ip, [r1]
 8003eec:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d035      	beq.n	8003f60 <_scanf_i+0x15c>
 8003ef4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003ef8:	d124      	bne.n	8003f44 <_scanf_i+0x140>
 8003efa:	0510      	lsls	r0, r2, #20
 8003efc:	d522      	bpl.n	8003f44 <_scanf_i+0x140>
 8003efe:	f10b 0b01 	add.w	fp, fp, #1
 8003f02:	f1b9 0f00 	cmp.w	r9, #0
 8003f06:	d003      	beq.n	8003f10 <_scanf_i+0x10c>
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f0e:	60a3      	str	r3, [r4, #8]
 8003f10:	6873      	ldr	r3, [r6, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	6073      	str	r3, [r6, #4]
 8003f18:	dd1b      	ble.n	8003f52 <_scanf_i+0x14e>
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	e7d9      	b.n	8003edc <_scanf_i+0xd8>
 8003f28:	f1bb 0f02 	cmp.w	fp, #2
 8003f2c:	d1ae      	bne.n	8003e8c <_scanf_i+0x88>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003f34:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003f38:	d1bf      	bne.n	8003eba <_scanf_i+0xb6>
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	e7a2      	b.n	8003e8a <_scanf_i+0x86>
 8003f44:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003f48:	6022      	str	r2, [r4, #0]
 8003f4a:	780b      	ldrb	r3, [r1, #0]
 8003f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8003f50:	e7de      	b.n	8003f10 <_scanf_i+0x10c>
 8003f52:	4631      	mov	r1, r6
 8003f54:	4650      	mov	r0, sl
 8003f56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f5a:	4798      	blx	r3
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d0df      	beq.n	8003f20 <_scanf_i+0x11c>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	05d9      	lsls	r1, r3, #23
 8003f64:	d50d      	bpl.n	8003f82 <_scanf_i+0x17e>
 8003f66:	42bd      	cmp	r5, r7
 8003f68:	d909      	bls.n	8003f7e <_scanf_i+0x17a>
 8003f6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003f6e:	4632      	mov	r2, r6
 8003f70:	4650      	mov	r0, sl
 8003f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f76:	f105 39ff 	add.w	r9, r5, #4294967295
 8003f7a:	4798      	blx	r3
 8003f7c:	464d      	mov	r5, r9
 8003f7e:	42bd      	cmp	r5, r7
 8003f80:	d028      	beq.n	8003fd4 <_scanf_i+0x1d0>
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	f012 0210 	ands.w	r2, r2, #16
 8003f88:	d113      	bne.n	8003fb2 <_scanf_i+0x1ae>
 8003f8a:	702a      	strb	r2, [r5, #0]
 8003f8c:	4639      	mov	r1, r7
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	4650      	mov	r0, sl
 8003f92:	9e01      	ldr	r6, [sp, #4]
 8003f94:	47b0      	blx	r6
 8003f96:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	f8c8 2000 	str.w	r2, [r8]
 8003fa2:	f011 0f20 	tst.w	r1, #32
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	d00f      	beq.n	8003fca <_scanf_i+0x1c6>
 8003faa:	6018      	str	r0, [r3, #0]
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60e3      	str	r3, [r4, #12]
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	1bed      	subs	r5, r5, r7
 8003fb8:	445d      	add	r5, fp
 8003fba:	442b      	add	r3, r5
 8003fbc:	6123      	str	r3, [r4, #16]
 8003fbe:	b007      	add	sp, #28
 8003fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc4:	f04f 0b00 	mov.w	fp, #0
 8003fc8:	e7ca      	b.n	8003f60 <_scanf_i+0x15c>
 8003fca:	07ca      	lsls	r2, r1, #31
 8003fcc:	bf4c      	ite	mi
 8003fce:	8018      	strhmi	r0, [r3, #0]
 8003fd0:	6018      	strpl	r0, [r3, #0]
 8003fd2:	e7eb      	b.n	8003fac <_scanf_i+0x1a8>
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	e7f2      	b.n	8003fbe <_scanf_i+0x1ba>
 8003fd8:	08004398 	.word	0x08004398
 8003fdc:	08004369 	.word	0x08004369
 8003fe0:	08004281 	.word	0x08004281
 8003fe4:	080043e2 	.word	0x080043e2

08003fe8 <__sccl>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	780b      	ldrb	r3, [r1, #0]
 8003fec:	4604      	mov	r4, r0
 8003fee:	2b5e      	cmp	r3, #94	; 0x5e
 8003ff0:	bf0b      	itete	eq
 8003ff2:	784b      	ldrbeq	r3, [r1, #1]
 8003ff4:	1c4a      	addne	r2, r1, #1
 8003ff6:	1c8a      	addeq	r2, r1, #2
 8003ff8:	2100      	movne	r1, #0
 8003ffa:	bf08      	it	eq
 8003ffc:	2101      	moveq	r1, #1
 8003ffe:	3801      	subs	r0, #1
 8004000:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004004:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004008:	42a8      	cmp	r0, r5
 800400a:	d1fb      	bne.n	8004004 <__sccl+0x1c>
 800400c:	b90b      	cbnz	r3, 8004012 <__sccl+0x2a>
 800400e:	1e50      	subs	r0, r2, #1
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	f081 0101 	eor.w	r1, r1, #1
 8004016:	4610      	mov	r0, r2
 8004018:	54e1      	strb	r1, [r4, r3]
 800401a:	4602      	mov	r2, r0
 800401c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004020:	2d2d      	cmp	r5, #45	; 0x2d
 8004022:	d005      	beq.n	8004030 <__sccl+0x48>
 8004024:	2d5d      	cmp	r5, #93	; 0x5d
 8004026:	d016      	beq.n	8004056 <__sccl+0x6e>
 8004028:	2d00      	cmp	r5, #0
 800402a:	d0f1      	beq.n	8004010 <__sccl+0x28>
 800402c:	462b      	mov	r3, r5
 800402e:	e7f2      	b.n	8004016 <__sccl+0x2e>
 8004030:	7846      	ldrb	r6, [r0, #1]
 8004032:	2e5d      	cmp	r6, #93	; 0x5d
 8004034:	d0fa      	beq.n	800402c <__sccl+0x44>
 8004036:	42b3      	cmp	r3, r6
 8004038:	dcf8      	bgt.n	800402c <__sccl+0x44>
 800403a:	461a      	mov	r2, r3
 800403c:	3002      	adds	r0, #2
 800403e:	3201      	adds	r2, #1
 8004040:	4296      	cmp	r6, r2
 8004042:	54a1      	strb	r1, [r4, r2]
 8004044:	dcfb      	bgt.n	800403e <__sccl+0x56>
 8004046:	1af2      	subs	r2, r6, r3
 8004048:	3a01      	subs	r2, #1
 800404a:	42b3      	cmp	r3, r6
 800404c:	bfa8      	it	ge
 800404e:	2200      	movge	r2, #0
 8004050:	1c5d      	adds	r5, r3, #1
 8004052:	18ab      	adds	r3, r5, r2
 8004054:	e7e1      	b.n	800401a <__sccl+0x32>
 8004056:	4610      	mov	r0, r2
 8004058:	e7da      	b.n	8004010 <__sccl+0x28>

0800405a <__submore>:
 800405a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405e:	460c      	mov	r4, r1
 8004060:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004066:	4299      	cmp	r1, r3
 8004068:	d11b      	bne.n	80040a2 <__submore+0x48>
 800406a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800406e:	f7ff fc11 	bl	8003894 <_malloc_r>
 8004072:	b918      	cbnz	r0, 800407c <__submore+0x22>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004080:	63a3      	str	r3, [r4, #56]	; 0x38
 8004082:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004086:	6360      	str	r0, [r4, #52]	; 0x34
 8004088:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800408c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004090:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004094:	7043      	strb	r3, [r0, #1]
 8004096:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800409a:	7003      	strb	r3, [r0, #0]
 800409c:	6020      	str	r0, [r4, #0]
 800409e:	2000      	movs	r0, #0
 80040a0:	e7ea      	b.n	8004078 <__submore+0x1e>
 80040a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80040a4:	0077      	lsls	r7, r6, #1
 80040a6:	463a      	mov	r2, r7
 80040a8:	f000 f83c 	bl	8004124 <_realloc_r>
 80040ac:	4605      	mov	r5, r0
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d0e0      	beq.n	8004074 <__submore+0x1a>
 80040b2:	eb00 0806 	add.w	r8, r0, r6
 80040b6:	4601      	mov	r1, r0
 80040b8:	4632      	mov	r2, r6
 80040ba:	4640      	mov	r0, r8
 80040bc:	f000 f824 	bl	8004108 <memcpy>
 80040c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80040c4:	f8c4 8000 	str.w	r8, [r4]
 80040c8:	e7e9      	b.n	800409e <__submore+0x44>
	...

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	2300      	movs	r3, #0
 80040d0:	4d05      	ldr	r5, [pc, #20]	; (80040e8 <_sbrk_r+0x1c>)
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fc fd1a 	bl	8000b10 <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	20000268 	.word	0x20000268

080040ec <memchr>:
 80040ec:	4603      	mov	r3, r0
 80040ee:	b510      	push	{r4, lr}
 80040f0:	b2c9      	uxtb	r1, r1
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	d101      	bne.n	80040fe <memchr+0x12>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e003      	b.n	8004106 <memchr+0x1a>
 80040fe:	7804      	ldrb	r4, [r0, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	428c      	cmp	r4, r1
 8004104:	d1f6      	bne.n	80040f4 <memchr+0x8>
 8004106:	bd10      	pop	{r4, pc}

08004108 <memcpy>:
 8004108:	440a      	add	r2, r1
 800410a:	4291      	cmp	r1, r2
 800410c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004110:	d100      	bne.n	8004114 <memcpy+0xc>
 8004112:	4770      	bx	lr
 8004114:	b510      	push	{r4, lr}
 8004116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800411a:	4291      	cmp	r1, r2
 800411c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004120:	d1f9      	bne.n	8004116 <memcpy+0xe>
 8004122:	bd10      	pop	{r4, pc}

08004124 <_realloc_r>:
 8004124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004128:	4680      	mov	r8, r0
 800412a:	4614      	mov	r4, r2
 800412c:	460e      	mov	r6, r1
 800412e:	b921      	cbnz	r1, 800413a <_realloc_r+0x16>
 8004130:	4611      	mov	r1, r2
 8004132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	f7ff bbad 	b.w	8003894 <_malloc_r>
 800413a:	b92a      	cbnz	r2, 8004148 <_realloc_r+0x24>
 800413c:	f7ff fb42 	bl	80037c4 <_free_r>
 8004140:	4625      	mov	r5, r4
 8004142:	4628      	mov	r0, r5
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	f000 f910 	bl	800436c <_malloc_usable_size_r>
 800414c:	4284      	cmp	r4, r0
 800414e:	4607      	mov	r7, r0
 8004150:	d802      	bhi.n	8004158 <_realloc_r+0x34>
 8004152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004156:	d812      	bhi.n	800417e <_realloc_r+0x5a>
 8004158:	4621      	mov	r1, r4
 800415a:	4640      	mov	r0, r8
 800415c:	f7ff fb9a 	bl	8003894 <_malloc_r>
 8004160:	4605      	mov	r5, r0
 8004162:	2800      	cmp	r0, #0
 8004164:	d0ed      	beq.n	8004142 <_realloc_r+0x1e>
 8004166:	42bc      	cmp	r4, r7
 8004168:	4622      	mov	r2, r4
 800416a:	4631      	mov	r1, r6
 800416c:	bf28      	it	cs
 800416e:	463a      	movcs	r2, r7
 8004170:	f7ff ffca 	bl	8004108 <memcpy>
 8004174:	4631      	mov	r1, r6
 8004176:	4640      	mov	r0, r8
 8004178:	f7ff fb24 	bl	80037c4 <_free_r>
 800417c:	e7e1      	b.n	8004142 <_realloc_r+0x1e>
 800417e:	4635      	mov	r5, r6
 8004180:	e7df      	b.n	8004142 <_realloc_r+0x1e>
	...

08004184 <_strtol_l.constprop.0>:
 8004184:	2b01      	cmp	r3, #1
 8004186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418a:	4686      	mov	lr, r0
 800418c:	4690      	mov	r8, r2
 800418e:	d001      	beq.n	8004194 <_strtol_l.constprop.0+0x10>
 8004190:	2b24      	cmp	r3, #36	; 0x24
 8004192:	d906      	bls.n	80041a2 <_strtol_l.constprop.0+0x1e>
 8004194:	f7ff faea 	bl	800376c <__errno>
 8004198:	2316      	movs	r3, #22
 800419a:	6003      	str	r3, [r0, #0]
 800419c:	2000      	movs	r0, #0
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a2:	460d      	mov	r5, r1
 80041a4:	4835      	ldr	r0, [pc, #212]	; (800427c <_strtol_l.constprop.0+0xf8>)
 80041a6:	462a      	mov	r2, r5
 80041a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041ac:	5d06      	ldrb	r6, [r0, r4]
 80041ae:	f016 0608 	ands.w	r6, r6, #8
 80041b2:	d1f8      	bne.n	80041a6 <_strtol_l.constprop.0+0x22>
 80041b4:	2c2d      	cmp	r4, #45	; 0x2d
 80041b6:	d12e      	bne.n	8004216 <_strtol_l.constprop.0+0x92>
 80041b8:	2601      	movs	r6, #1
 80041ba:	782c      	ldrb	r4, [r5, #0]
 80041bc:	1c95      	adds	r5, r2, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d057      	beq.n	8004272 <_strtol_l.constprop.0+0xee>
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d109      	bne.n	80041da <_strtol_l.constprop.0+0x56>
 80041c6:	2c30      	cmp	r4, #48	; 0x30
 80041c8:	d107      	bne.n	80041da <_strtol_l.constprop.0+0x56>
 80041ca:	782a      	ldrb	r2, [r5, #0]
 80041cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80041d0:	2a58      	cmp	r2, #88	; 0x58
 80041d2:	d149      	bne.n	8004268 <_strtol_l.constprop.0+0xe4>
 80041d4:	2310      	movs	r3, #16
 80041d6:	786c      	ldrb	r4, [r5, #1]
 80041d8:	3502      	adds	r5, #2
 80041da:	2200      	movs	r2, #0
 80041dc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80041e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041e4:	fbbc f9f3 	udiv	r9, ip, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80041ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80041f2:	2f09      	cmp	r7, #9
 80041f4:	d814      	bhi.n	8004220 <_strtol_l.constprop.0+0x9c>
 80041f6:	463c      	mov	r4, r7
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	dd20      	ble.n	800423e <_strtol_l.constprop.0+0xba>
 80041fc:	1c57      	adds	r7, r2, #1
 80041fe:	d007      	beq.n	8004210 <_strtol_l.constprop.0+0x8c>
 8004200:	4581      	cmp	r9, r0
 8004202:	d319      	bcc.n	8004238 <_strtol_l.constprop.0+0xb4>
 8004204:	d101      	bne.n	800420a <_strtol_l.constprop.0+0x86>
 8004206:	45a2      	cmp	sl, r4
 8004208:	db16      	blt.n	8004238 <_strtol_l.constprop.0+0xb4>
 800420a:	2201      	movs	r2, #1
 800420c:	fb00 4003 	mla	r0, r0, r3, r4
 8004210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004214:	e7eb      	b.n	80041ee <_strtol_l.constprop.0+0x6a>
 8004216:	2c2b      	cmp	r4, #43	; 0x2b
 8004218:	bf04      	itt	eq
 800421a:	782c      	ldrbeq	r4, [r5, #0]
 800421c:	1c95      	addeq	r5, r2, #2
 800421e:	e7ce      	b.n	80041be <_strtol_l.constprop.0+0x3a>
 8004220:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004224:	2f19      	cmp	r7, #25
 8004226:	d801      	bhi.n	800422c <_strtol_l.constprop.0+0xa8>
 8004228:	3c37      	subs	r4, #55	; 0x37
 800422a:	e7e5      	b.n	80041f8 <_strtol_l.constprop.0+0x74>
 800422c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004230:	2f19      	cmp	r7, #25
 8004232:	d804      	bhi.n	800423e <_strtol_l.constprop.0+0xba>
 8004234:	3c57      	subs	r4, #87	; 0x57
 8004236:	e7df      	b.n	80041f8 <_strtol_l.constprop.0+0x74>
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	e7e8      	b.n	8004210 <_strtol_l.constprop.0+0x8c>
 800423e:	1c53      	adds	r3, r2, #1
 8004240:	d108      	bne.n	8004254 <_strtol_l.constprop.0+0xd0>
 8004242:	2322      	movs	r3, #34	; 0x22
 8004244:	4660      	mov	r0, ip
 8004246:	f8ce 3000 	str.w	r3, [lr]
 800424a:	f1b8 0f00 	cmp.w	r8, #0
 800424e:	d0a6      	beq.n	800419e <_strtol_l.constprop.0+0x1a>
 8004250:	1e69      	subs	r1, r5, #1
 8004252:	e006      	b.n	8004262 <_strtol_l.constprop.0+0xde>
 8004254:	b106      	cbz	r6, 8004258 <_strtol_l.constprop.0+0xd4>
 8004256:	4240      	negs	r0, r0
 8004258:	f1b8 0f00 	cmp.w	r8, #0
 800425c:	d09f      	beq.n	800419e <_strtol_l.constprop.0+0x1a>
 800425e:	2a00      	cmp	r2, #0
 8004260:	d1f6      	bne.n	8004250 <_strtol_l.constprop.0+0xcc>
 8004262:	f8c8 1000 	str.w	r1, [r8]
 8004266:	e79a      	b.n	800419e <_strtol_l.constprop.0+0x1a>
 8004268:	2430      	movs	r4, #48	; 0x30
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1b5      	bne.n	80041da <_strtol_l.constprop.0+0x56>
 800426e:	2308      	movs	r3, #8
 8004270:	e7b3      	b.n	80041da <_strtol_l.constprop.0+0x56>
 8004272:	2c30      	cmp	r4, #48	; 0x30
 8004274:	d0a9      	beq.n	80041ca <_strtol_l.constprop.0+0x46>
 8004276:	230a      	movs	r3, #10
 8004278:	e7af      	b.n	80041da <_strtol_l.constprop.0+0x56>
 800427a:	bf00      	nop
 800427c:	080043ee 	.word	0x080043ee

08004280 <_strtol_r>:
 8004280:	f7ff bf80 	b.w	8004184 <_strtol_l.constprop.0>

08004284 <_strtoul_l.constprop.0>:
 8004284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004288:	4686      	mov	lr, r0
 800428a:	460d      	mov	r5, r1
 800428c:	4f35      	ldr	r7, [pc, #212]	; (8004364 <_strtoul_l.constprop.0+0xe0>)
 800428e:	4628      	mov	r0, r5
 8004290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004294:	5d3e      	ldrb	r6, [r7, r4]
 8004296:	f016 0608 	ands.w	r6, r6, #8
 800429a:	d1f8      	bne.n	800428e <_strtoul_l.constprop.0+0xa>
 800429c:	2c2d      	cmp	r4, #45	; 0x2d
 800429e:	d130      	bne.n	8004302 <_strtoul_l.constprop.0+0x7e>
 80042a0:	2601      	movs	r6, #1
 80042a2:	782c      	ldrb	r4, [r5, #0]
 80042a4:	1c85      	adds	r5, r0, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d057      	beq.n	800435a <_strtoul_l.constprop.0+0xd6>
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d109      	bne.n	80042c2 <_strtoul_l.constprop.0+0x3e>
 80042ae:	2c30      	cmp	r4, #48	; 0x30
 80042b0:	d107      	bne.n	80042c2 <_strtoul_l.constprop.0+0x3e>
 80042b2:	7828      	ldrb	r0, [r5, #0]
 80042b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80042b8:	2858      	cmp	r0, #88	; 0x58
 80042ba:	d149      	bne.n	8004350 <_strtoul_l.constprop.0+0xcc>
 80042bc:	2310      	movs	r3, #16
 80042be:	786c      	ldrb	r4, [r5, #1]
 80042c0:	3502      	adds	r5, #2
 80042c2:	f04f 38ff 	mov.w	r8, #4294967295
 80042c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80042ca:	2700      	movs	r7, #0
 80042cc:	fb03 f908 	mul.w	r9, r3, r8
 80042d0:	4638      	mov	r0, r7
 80042d2:	ea6f 0909 	mvn.w	r9, r9
 80042d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80042da:	f1bc 0f09 	cmp.w	ip, #9
 80042de:	d815      	bhi.n	800430c <_strtoul_l.constprop.0+0x88>
 80042e0:	4664      	mov	r4, ip
 80042e2:	42a3      	cmp	r3, r4
 80042e4:	dd23      	ble.n	800432e <_strtoul_l.constprop.0+0xaa>
 80042e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80042ea:	d007      	beq.n	80042fc <_strtoul_l.constprop.0+0x78>
 80042ec:	4580      	cmp	r8, r0
 80042ee:	d31b      	bcc.n	8004328 <_strtoul_l.constprop.0+0xa4>
 80042f0:	d101      	bne.n	80042f6 <_strtoul_l.constprop.0+0x72>
 80042f2:	45a1      	cmp	r9, r4
 80042f4:	db18      	blt.n	8004328 <_strtoul_l.constprop.0+0xa4>
 80042f6:	2701      	movs	r7, #1
 80042f8:	fb00 4003 	mla	r0, r0, r3, r4
 80042fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004300:	e7e9      	b.n	80042d6 <_strtoul_l.constprop.0+0x52>
 8004302:	2c2b      	cmp	r4, #43	; 0x2b
 8004304:	bf04      	itt	eq
 8004306:	782c      	ldrbeq	r4, [r5, #0]
 8004308:	1c85      	addeq	r5, r0, #2
 800430a:	e7cc      	b.n	80042a6 <_strtoul_l.constprop.0+0x22>
 800430c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004310:	f1bc 0f19 	cmp.w	ip, #25
 8004314:	d801      	bhi.n	800431a <_strtoul_l.constprop.0+0x96>
 8004316:	3c37      	subs	r4, #55	; 0x37
 8004318:	e7e3      	b.n	80042e2 <_strtoul_l.constprop.0+0x5e>
 800431a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800431e:	f1bc 0f19 	cmp.w	ip, #25
 8004322:	d804      	bhi.n	800432e <_strtoul_l.constprop.0+0xaa>
 8004324:	3c57      	subs	r4, #87	; 0x57
 8004326:	e7dc      	b.n	80042e2 <_strtoul_l.constprop.0+0x5e>
 8004328:	f04f 37ff 	mov.w	r7, #4294967295
 800432c:	e7e6      	b.n	80042fc <_strtoul_l.constprop.0+0x78>
 800432e:	1c7b      	adds	r3, r7, #1
 8004330:	d106      	bne.n	8004340 <_strtoul_l.constprop.0+0xbc>
 8004332:	2322      	movs	r3, #34	; 0x22
 8004334:	4638      	mov	r0, r7
 8004336:	f8ce 3000 	str.w	r3, [lr]
 800433a:	b932      	cbnz	r2, 800434a <_strtoul_l.constprop.0+0xc6>
 800433c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004340:	b106      	cbz	r6, 8004344 <_strtoul_l.constprop.0+0xc0>
 8004342:	4240      	negs	r0, r0
 8004344:	2a00      	cmp	r2, #0
 8004346:	d0f9      	beq.n	800433c <_strtoul_l.constprop.0+0xb8>
 8004348:	b107      	cbz	r7, 800434c <_strtoul_l.constprop.0+0xc8>
 800434a:	1e69      	subs	r1, r5, #1
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	e7f5      	b.n	800433c <_strtoul_l.constprop.0+0xb8>
 8004350:	2430      	movs	r4, #48	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1b5      	bne.n	80042c2 <_strtoul_l.constprop.0+0x3e>
 8004356:	2308      	movs	r3, #8
 8004358:	e7b3      	b.n	80042c2 <_strtoul_l.constprop.0+0x3e>
 800435a:	2c30      	cmp	r4, #48	; 0x30
 800435c:	d0a9      	beq.n	80042b2 <_strtoul_l.constprop.0+0x2e>
 800435e:	230a      	movs	r3, #10
 8004360:	e7af      	b.n	80042c2 <_strtoul_l.constprop.0+0x3e>
 8004362:	bf00      	nop
 8004364:	080043ee 	.word	0x080043ee

08004368 <_strtoul_r>:
 8004368:	f7ff bf8c 	b.w	8004284 <_strtoul_l.constprop.0>

0800436c <_malloc_usable_size_r>:
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f18      	subs	r0, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfbc      	itt	lt
 8004376:	580b      	ldrlt	r3, [r1, r0]
 8004378:	18c0      	addlt	r0, r0, r3
 800437a:	4770      	bx	lr

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

ARM GAS  /tmp/cco8lzMv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	Error_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	Error_Handler:
  25              	.LFB67:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "tim.h"
  22:Core/Src/main.c **** #include "gpio.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include "encoder.h"
  27:Core/Src/main.c **** #include "PID.h"
  28:Core/Src/main.c **** #define GPIO_PIN_SET 1
  29:Core/Src/main.c **** #define GPIO_PIN_RESET 0 
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cco8lzMv.s 			page 2


  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c ****  int a=1;
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** uint16_t adc_vaule[3];
  51:Core/Src/main.c **** extern float motor1_speed;
  52:Core/Src/main.c **** extern int motor1_dir;
  53:Core/Src/main.c **** uint8_t dir_flag;
  54:Core/Src/main.c **** uint8_t flag_1;
  55:Core/Src/main.c **** uint8_t flag_2;
  56:Core/Src/main.c **** float kp=2100,ki=3.5,kd=0.1;
  57:Core/Src/main.c **** float vkp=0,vki=0;
  58:Core/Src/main.c **** extern int PWM;
  59:Core/Src/main.c **** float b;
  60:Core/Src/main.c **** /* USER CODE END PV */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  63:Core/Src/main.c **** void SystemClock_Config(void);
  64:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END PFP */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  69:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* USER CODE END 0 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /**
  74:Core/Src/main.c ****   * @brief  The application entry point.
  75:Core/Src/main.c ****   * @retval int
  76:Core/Src/main.c ****   */
  77:Core/Src/main.c **** int main(void)
  78:Core/Src/main.c **** {
  79:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  86:Core/Src/main.c ****   HAL_Init();
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  89:Core/Src/main.c **** 
ARM GAS  /tmp/cco8lzMv.s 			page 3


  90:Core/Src/main.c ****   /* USER CODE END Init */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Configure the system clock */
  93:Core/Src/main.c ****   SystemClock_Config();
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE END SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Initialize all configured peripherals */
 100:Core/Src/main.c ****   MX_GPIO_Init();
 101:Core/Src/main.c ****   MX_TIM1_Init();
 102:Core/Src/main.c ****   MX_TIM2_Init();
 103:Core/Src/main.c ****   MX_TIM3_Init();
 104:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 105:Core/Src/main.c ****   Motor_Init();
 106:Core/Src/main.c ****   ver_PID_Init();
 107:Core/Src/main.c ****   pos_PID_Init();
 108:Core/Src/main.c ****  b=3000;
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE END 2 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Infinite loop */
 113:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 114:Core/Src/main.c ****   while (1)
 115:Core/Src/main.c ****   { 
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****     SET_PWM(PWM);
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   //   HAL_ADCEx_Calibration_Start(&hadc1 );
 122:Core/Src/main.c ****   //   HAL_ADC_Start_DMA(&hadc1,adc_vaule,3);
 123:Core/Src/main.c ****    
 124:Core/Src/main.c ****    
 125:Core/Src/main.c ****   // if(a==1)
 126:Core/Src/main.c ****   // {
 127:Core/Src/main.c ****   //       flag_1=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 128:Core/Src/main.c ****   //       flag_2=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
 129:Core/Src/main.c ****         
 130:Core/Src/main.c ****   //   if(adc_vaule[0]>0 && adc_vaule[0]<10 && motor1_dir==1 && flag_1==1 && flag_2==0)
 131:Core/Src/main.c ****   //   {
 132:Core/Src/main.c ****   //     HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 133:Core/Src/main.c ****   //     HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 134:Core/Src/main.c ****   //     OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 135:Core/Src/main.c ****   //         OLED_ShowNum(2,12,motor1_dir,1);
 136:Core/Src/main.c ****   //   }
 137:Core/Src/main.c ****   //   else if(adc_vaule[0]>0 && adc_vaule[0]<10 && motor1_dir==0 && flag_1==0 && flag_2==1)
 138:Core/Src/main.c ****   //   {
 139:Core/Src/main.c ****   //     HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 140:Core/Src/main.c ****   //     HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 141:Core/Src/main.c ****   //     // OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 142:Core/Src/main.c ****   //     //     OLED_ShowNum(2,12,motor1_dir,1);
 143:Core/Src/main.c ****   //   }
 144:Core/Src/main.c ****   
 145:Core/Src/main.c ****   //         __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,adc_vaule[2]);
 146:Core/Src/main.c ****           
ARM GAS  /tmp/cco8lzMv.s 			page 4


 147:Core/Src/main.c ****   //     // OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 148:Core/Src/main.c ****   //     //     OLED_ShowNum(2,12,motor1_dir,1);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   // }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****     // if(a==1)
 156:Core/Src/main.c ****     // { OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 157:Core/Src/main.c ****     //   if(adc_vaule[2]>0 && adc_vaule[2]<5) 
 158:Core/Src/main.c ****     //    {
 159:Core/Src/main.c ****     //      __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,3500);//全速
 160:Core/Src/main.c ****     //      OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 161:Core/Src/main.c ****     //      OLED_ShowNum(2,12,motor1_dir,1);
 162:Core/Src/main.c ****     //    }
 163:Core/Src/main.c ****     //   else {
 164:Core/Src/main.c ****     //       __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,adc_vaule[0]);
 165:Core/Src/main.c ****     //       OLED_ShowFloatNum(1,7,motor1_speed,1,2);
 166:Core/Src/main.c ****     //       OLED_ShowNum(2,12,motor1_dir,1);
 167:Core/Src/main.c ****     //   }
 168:Core/Src/main.c ****     // }
 169:Core/Src/main.c ****     /* USER CODE END WHILE */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 172:Core/Src/main.c ****   }
 173:Core/Src/main.c ****   /* USER CODE END 3 */
 174:Core/Src/main.c **** }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** /**
 177:Core/Src/main.c ****   * @brief System Clock Configuration
 178:Core/Src/main.c ****   * @retval None
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c **** void SystemClock_Config(void)
 181:Core/Src/main.c **** {
 182:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 183:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 186:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 187:Core/Src/main.c ****   */
 188:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 190:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 195:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 196:Core/Src/main.c ****   {
 197:Core/Src/main.c ****     Error_Handler();
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 203:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cco8lzMv.s 			page 5


 204:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 205:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     Error_Handler();
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** /* USER CODE END 4 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** /**
 220:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 221:Core/Src/main.c ****   * @retval None
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c **** void Error_Handler(void)
 224:Core/Src/main.c **** {
  27              		.loc 1 224 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 225:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 226:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 227:Core/Src/main.c ****   __disable_irq();
  33              		.loc 1 227 3 view .LVU1
  34              	.LBB4:
  35              	.LBI4:
  36              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cco8lzMv.s 			page 6


  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/cco8lzMv.s 			page 7


  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/cco8lzMv.s 			page 8


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  37              		.loc 2 140 27 view .LVU2
  38              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  39              		.loc 2 142 3 view .LVU3
  40              		.syntax unified
  41              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 72B6     		cpsid i
  43              	@ 0 "" 2
  44              		.thumb
  45              		.syntax unified
  46              	.L2:
  47              	.LBE5:
  48              	.LBE4:
 228:Core/Src/main.c ****   while (1)
  49              		.loc 1 228 3 discriminator 1 view .LVU4
 229:Core/Src/main.c ****   {
 230:Core/Src/main.c ****   }
  50              		.loc 1 230 3 discriminator 1 view .LVU5
 228:Core/Src/main.c ****   while (1)
  51              		.loc 1 228 9 discriminator 1 view .LVU6
  52 0002 FEE7     		b	.L2
  53              		.cfi_endproc
  54              	.LFE67:
  56              		.section	.text.SystemClock_Config,"ax",%progbits
  57              		.align	1
  58              		.global	SystemClock_Config
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	SystemClock_Config:
  65              	.LFB66:
 181:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  66              		.loc 1 181 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 64
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 00B5     		push	{lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 14, -4
  74 0002 91B0     		sub	sp, sp, #68
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 72
 182:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  77              		.loc 1 182 3 view .LVU8
 182:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  78              		.loc 1 182 22 is_stmt 0 view .LVU9
  79 0004 2822     		movs	r2, #40
  80 0006 0021     		movs	r1, #0
  81 0008 06A8     		add	r0, sp, #24
  82 000a FFF7FEFF 		bl	memset
  83              	.LVL0:
ARM GAS  /tmp/cco8lzMv.s 			page 9


 183:Core/Src/main.c **** 
  84              		.loc 1 183 3 is_stmt 1 view .LVU10
 183:Core/Src/main.c **** 
  85              		.loc 1 183 22 is_stmt 0 view .LVU11
  86 000e 0023     		movs	r3, #0
  87 0010 0193     		str	r3, [sp, #4]
  88 0012 0293     		str	r3, [sp, #8]
  89 0014 0393     		str	r3, [sp, #12]
  90 0016 0493     		str	r3, [sp, #16]
  91 0018 0593     		str	r3, [sp, #20]
 188:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  92              		.loc 1 188 3 is_stmt 1 view .LVU12
 188:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  93              		.loc 1 188 36 is_stmt 0 view .LVU13
  94 001a 0122     		movs	r2, #1
  95 001c 0692     		str	r2, [sp, #24]
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  96              		.loc 1 189 3 is_stmt 1 view .LVU14
 189:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  97              		.loc 1 189 30 is_stmt 0 view .LVU15
  98 001e 4FF48033 		mov	r3, #65536
  99 0022 0793     		str	r3, [sp, #28]
 190:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 100              		.loc 1 190 3 is_stmt 1 view .LVU16
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 101              		.loc 1 191 3 view .LVU17
 191:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 102              		.loc 1 191 30 is_stmt 0 view .LVU18
 103 0024 0A92     		str	r2, [sp, #40]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 104              		.loc 1 192 3 is_stmt 1 view .LVU19
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 105              		.loc 1 192 34 is_stmt 0 view .LVU20
 106 0026 0222     		movs	r2, #2
 107 0028 0D92     		str	r2, [sp, #52]
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 108              		.loc 1 193 3 is_stmt 1 view .LVU21
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 109              		.loc 1 193 35 is_stmt 0 view .LVU22
 110 002a 0E93     		str	r3, [sp, #56]
 194:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 111              		.loc 1 194 3 is_stmt 1 view .LVU23
 194:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 112              		.loc 1 194 32 is_stmt 0 view .LVU24
 113 002c 4FF4E013 		mov	r3, #1835008
 114 0030 0F93     		str	r3, [sp, #60]
 195:Core/Src/main.c ****   {
 115              		.loc 1 195 3 is_stmt 1 view .LVU25
 195:Core/Src/main.c ****   {
 116              		.loc 1 195 7 is_stmt 0 view .LVU26
 117 0032 06A8     		add	r0, sp, #24
 118 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 119              	.LVL1:
 195:Core/Src/main.c ****   {
 120              		.loc 1 195 6 view .LVU27
 121 0038 80B9     		cbnz	r0, .L7
 202:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cco8lzMv.s 			page 10


 122              		.loc 1 202 3 is_stmt 1 view .LVU28
 202:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 123              		.loc 1 202 31 is_stmt 0 view .LVU29
 124 003a 0F23     		movs	r3, #15
 125 003c 0193     		str	r3, [sp, #4]
 204:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 126              		.loc 1 204 3 is_stmt 1 view .LVU30
 204:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 127              		.loc 1 204 34 is_stmt 0 view .LVU31
 128 003e 0221     		movs	r1, #2
 129 0040 0291     		str	r1, [sp, #8]
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 130              		.loc 1 205 3 is_stmt 1 view .LVU32
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 131              		.loc 1 205 35 is_stmt 0 view .LVU33
 132 0042 0023     		movs	r3, #0
 133 0044 0393     		str	r3, [sp, #12]
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 134              		.loc 1 206 3 is_stmt 1 view .LVU34
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 135              		.loc 1 206 36 is_stmt 0 view .LVU35
 136 0046 4FF48062 		mov	r2, #1024
 137 004a 0492     		str	r2, [sp, #16]
 207:Core/Src/main.c **** 
 138              		.loc 1 207 3 is_stmt 1 view .LVU36
 207:Core/Src/main.c **** 
 139              		.loc 1 207 36 is_stmt 0 view .LVU37
 140 004c 0593     		str	r3, [sp, #20]
 209:Core/Src/main.c ****   {
 141              		.loc 1 209 3 is_stmt 1 view .LVU38
 209:Core/Src/main.c ****   {
 142              		.loc 1 209 7 is_stmt 0 view .LVU39
 143 004e 01A8     		add	r0, sp, #4
 144 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 145              	.LVL2:
 209:Core/Src/main.c ****   {
 146              		.loc 1 209 6 view .LVU40
 147 0054 20B9     		cbnz	r0, .L8
 213:Core/Src/main.c **** 
 148              		.loc 1 213 1 view .LVU41
 149 0056 11B0     		add	sp, sp, #68
 150              	.LCFI2:
 151              		.cfi_remember_state
 152              		.cfi_def_cfa_offset 4
 153              		@ sp needed
 154 0058 5DF804FB 		ldr	pc, [sp], #4
 155              	.L7:
 156              	.LCFI3:
 157              		.cfi_restore_state
 197:Core/Src/main.c ****   }
 158              		.loc 1 197 5 is_stmt 1 view .LVU42
 159 005c FFF7FEFF 		bl	Error_Handler
 160              	.LVL3:
 161              	.L8:
 211:Core/Src/main.c ****   }
 162              		.loc 1 211 5 view .LVU43
 163 0060 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cco8lzMv.s 			page 11


 164              	.LVL4:
 165              		.cfi_endproc
 166              	.LFE66:
 168              		.section	.text.main,"ax",%progbits
 169              		.align	1
 170              		.global	main
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
 176              	main:
 177              	.LFB65:
  78:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 178              		.loc 1 78 1 view -0
 179              		.cfi_startproc
 180              		@ Volatile: function does not return.
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 08B5     		push	{r3, lr}
 184              	.LCFI4:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
  86:Core/Src/main.c **** 
 188              		.loc 1 86 3 view .LVU45
 189 0002 FFF7FEFF 		bl	HAL_Init
 190              	.LVL5:
  93:Core/Src/main.c **** 
 191              		.loc 1 93 3 view .LVU46
 192 0006 FFF7FEFF 		bl	SystemClock_Config
 193              	.LVL6:
 100:Core/Src/main.c ****   MX_TIM1_Init();
 194              		.loc 1 100 3 view .LVU47
 195 000a FFF7FEFF 		bl	MX_GPIO_Init
 196              	.LVL7:
 101:Core/Src/main.c ****   MX_TIM2_Init();
 197              		.loc 1 101 3 view .LVU48
 198 000e FFF7FEFF 		bl	MX_TIM1_Init
 199              	.LVL8:
 102:Core/Src/main.c ****   MX_TIM3_Init();
 200              		.loc 1 102 3 view .LVU49
 201 0012 FFF7FEFF 		bl	MX_TIM2_Init
 202              	.LVL9:
 103:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 203              		.loc 1 103 3 view .LVU50
 204 0016 FFF7FEFF 		bl	MX_TIM3_Init
 205              	.LVL10:
 105:Core/Src/main.c ****   ver_PID_Init();
 206              		.loc 1 105 3 view .LVU51
 207 001a FFF7FEFF 		bl	Motor_Init
 208              	.LVL11:
 106:Core/Src/main.c ****   pos_PID_Init();
 209              		.loc 1 106 3 view .LVU52
 210 001e FFF7FEFF 		bl	ver_PID_Init
 211              	.LVL12:
 107:Core/Src/main.c ****  b=3000;
 212              		.loc 1 107 3 view .LVU53
ARM GAS  /tmp/cco8lzMv.s 			page 12


 213 0022 FFF7FEFF 		bl	pos_PID_Init
 214              	.LVL13:
 108:Core/Src/main.c **** 
 215              		.loc 1 108 2 view .LVU54
 108:Core/Src/main.c **** 
 216              		.loc 1 108 3 is_stmt 0 view .LVU55
 217 0026 044B     		ldr	r3, .L12
 218 0028 044A     		ldr	r2, .L12+4
 219 002a 1A60     		str	r2, [r3]	@ float
 220              	.L10:
 114:Core/Src/main.c ****   { 
 221              		.loc 1 114 3 is_stmt 1 discriminator 1 view .LVU56
 117:Core/Src/main.c **** 
 222              		.loc 1 117 5 discriminator 1 view .LVU57
 223 002c 044B     		ldr	r3, .L12+8
 224 002e 1868     		ldr	r0, [r3]
 225 0030 FFF7FEFF 		bl	SET_PWM
 226              	.LVL14:
 114:Core/Src/main.c ****   { 
 227              		.loc 1 114 9 discriminator 1 view .LVU58
 228 0034 FAE7     		b	.L10
 229              	.L13:
 230 0036 00BF     		.align	2
 231              	.L12:
 232 0038 00000000 		.word	.LANCHOR0
 233 003c 00803B45 		.word	1161527296
 234 0040 00000000 		.word	PWM
 235              		.cfi_endproc
 236              	.LFE65:
 238              		.global	b
 239              		.global	vki
 240              		.global	vkp
 241              		.global	kd
 242              		.global	ki
 243              		.global	kp
 244              		.global	flag_2
 245              		.global	flag_1
 246              		.global	dir_flag
 247              		.global	adc_vaule
 248              		.global	a
 249              		.section	.bss.adc_vaule,"aw",%nobits
 250              		.align	2
 253              	adc_vaule:
 254 0000 00000000 		.space	6
 254      0000
 255              		.section	.bss.b,"aw",%nobits
 256              		.align	2
 257              		.set	.LANCHOR0,. + 0
 260              	b:
 261 0000 00000000 		.space	4
 262              		.section	.bss.dir_flag,"aw",%nobits
 265              	dir_flag:
 266 0000 00       		.space	1
 267              		.section	.bss.flag_1,"aw",%nobits
 270              	flag_1:
 271 0000 00       		.space	1
 272              		.section	.bss.flag_2,"aw",%nobits
ARM GAS  /tmp/cco8lzMv.s 			page 13


 275              	flag_2:
 276 0000 00       		.space	1
 277              		.section	.bss.vki,"aw",%nobits
 278              		.align	2
 281              	vki:
 282 0000 00000000 		.space	4
 283              		.section	.bss.vkp,"aw",%nobits
 284              		.align	2
 287              	vkp:
 288 0000 00000000 		.space	4
 289              		.section	.data.a,"aw"
 290              		.align	2
 293              	a:
 294 0000 01000000 		.word	1
 295              		.section	.data.kd,"aw"
 296              		.align	2
 299              	kd:
 300 0000 CDCCCC3D 		.word	1036831949
 301              		.section	.data.ki,"aw"
 302              		.align	2
 305              	ki:
 306 0000 00006040 		.word	1080033280
 307              		.section	.data.kp,"aw"
 308              		.align	2
 311              	kp:
 312 0000 00400345 		.word	1157840896
 313              		.text
 314              	.Letext0:
 315              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 316              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 317              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 318              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 319              		.file 7 "Core/Inc/gpio.h"
 320              		.file 8 "Core/Inc/tim.h"
 321              		.file 9 "Encoder/encoder.h"
 322              		.file 10 "Encoder/PID.h"
 323              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 324              		.file 12 "<built-in>"
ARM GAS  /tmp/cco8lzMv.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cco8lzMv.s:16     .text.Error_Handler:0000000000000000 $t
     /tmp/cco8lzMv.s:24     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cco8lzMv.s:57     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cco8lzMv.s:64     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cco8lzMv.s:169    .text.main:0000000000000000 $t
     /tmp/cco8lzMv.s:176    .text.main:0000000000000000 main
     /tmp/cco8lzMv.s:232    .text.main:0000000000000038 $d
     /tmp/cco8lzMv.s:260    .bss.b:0000000000000000 b
     /tmp/cco8lzMv.s:281    .bss.vki:0000000000000000 vki
     /tmp/cco8lzMv.s:287    .bss.vkp:0000000000000000 vkp
     /tmp/cco8lzMv.s:299    .data.kd:0000000000000000 kd
     /tmp/cco8lzMv.s:305    .data.ki:0000000000000000 ki
     /tmp/cco8lzMv.s:311    .data.kp:0000000000000000 kp
     /tmp/cco8lzMv.s:275    .bss.flag_2:0000000000000000 flag_2
     /tmp/cco8lzMv.s:270    .bss.flag_1:0000000000000000 flag_1
     /tmp/cco8lzMv.s:265    .bss.dir_flag:0000000000000000 dir_flag
     /tmp/cco8lzMv.s:253    .bss.adc_vaule:0000000000000000 adc_vaule
     /tmp/cco8lzMv.s:293    .data.a:0000000000000000 a
     /tmp/cco8lzMv.s:250    .bss.adc_vaule:0000000000000000 $d
     /tmp/cco8lzMv.s:256    .bss.b:0000000000000000 $d
     /tmp/cco8lzMv.s:266    .bss.dir_flag:0000000000000000 $d
     /tmp/cco8lzMv.s:271    .bss.flag_1:0000000000000000 $d
     /tmp/cco8lzMv.s:276    .bss.flag_2:0000000000000000 $d
     /tmp/cco8lzMv.s:278    .bss.vki:0000000000000000 $d
     /tmp/cco8lzMv.s:284    .bss.vkp:0000000000000000 $d
     /tmp/cco8lzMv.s:290    .data.a:0000000000000000 $d
     /tmp/cco8lzMv.s:296    .data.kd:0000000000000000 $d
     /tmp/cco8lzMv.s:302    .data.ki:0000000000000000 $d
     /tmp/cco8lzMv.s:308    .data.kp:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
Motor_Init
ver_PID_Init
pos_PID_Init
SET_PWM
PWM
